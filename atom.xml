<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[fr.romain:blog:3.0]]></title>
  <link href="http://linsolas.github.com/atom.xml" rel="self"/>
  <link href="http://linsolas.github.com/"/>
  <updated>2013-04-02T23:21:53+02:00</updated>
  <id>http://linsolas.github.com/</id>
  <author>
    <name><![CDATA[Romain Linsolas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Devoxx France 2013 - Jour 3]]></title>
    <link href="http://linsolas.github.com/blog/2013/03/29/devoxx-france-2013-jour-3/"/>
    <updated>2013-03-29T09:17:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2013/03/29/devoxx-france-2013-jour-3</id>
    <content type="html"><![CDATA[<p><img src="http://www.devoxx.com/download/attachments/6816022/DevoxxFR-2012-web-400-267.png" title="Devoxx France 2013" alt="Devoxx France" /></p>

<p>Aie, déjà le dernier jour de la conférence Devoxx France. Que le temps passe vite ! Cette dernière journée reste toutefois très intense, en particulier parce qu&#8217;à 10h40, c&#8217;était ma présentation &#8221;<em>Du JavaScript propre ? Challenge Accepted!</em>&#8221; avec Julien Jakubowski. Je ferais un billet dédié à cette présentation.</p>

<!-- more -->


<h3><a href="http://www.devoxx.com/display/FR13/Web+Oriented+Architecture%2C+une+transmutation+des+pratiques+de+construction+des+SI">Web oriented architecture, une transmutation des pratiques de construction des SI</a></h3>

<p>J&#8217;avais raté les keynotes du jeudi, je me suis dit qu&#8217;il serait dommage d&#8217;en faire autant le vendredi. Bon, j&#8217;ai raté une partie de la première keynote, celle d&#8217;<a href="http://www.devoxx.com/display/FR13/Alexis+Moussine-pouchkine">Alexis Moussine-Pouchkine</a>, &#8221;<a href="http://www.devoxx.com/display/FR13/Normal+ou+decafeine">Normal ou décafeiné</a>&#8221;. En gros, le message de sa keynote est que l&#8217;avenir, en particulier le Cloud, peut - et doit - se faire avec Java.</p>

<p>Passons à la deuxième keynote, celle de <a href="http://www.devoxx.com/display/FR13/Habib+Guergachi">Habib Guergachi</a>, CEO de <a href="http://zenexity.com/">Zenexity</a>. Je voulais la voir car il l&#8217;avait <a href="http://www.parleys.com/#play/5148922a0364bc17fc56c738">déjà jouée l&#8217;année passée</a> sous forme de conférence, et j&#8217;avais entendu d&#8217;excellents retours. Au delà du message, c&#8217;est vraiment le bonhomme qui impressionne. Il avait une telle énergie que cela en devenait contagieux. Rien de mieux pour bien démarrer une journée intense !</p>

<p>Revenons au message lui-même. Il est un peu polémique, mais je crois qu&#8217;il n&#8217;a pas complètement tort sur un certain nombre de choses.</p>

<p>Quand il s&#8217;agit de faire un choix important, il y a deux solutions possibles. On peut opter et pousser le changement, au risque d&#8217;innover. Certes, il y a le risque de se faire virer, mais ce sera dans la gloire :) L&#8217;autre chemin, c&#8217;est la soumission, et ne pas bousculer les choses établies. On ne risque pas de se faire virer à court terme, mais peut-être que dans 2 ans, on vous reprochera de ne pas avoir sû anticiper le changement, et vous vous ferez virer dans la honte !</p>

<p>Ok, c&#8217;est une vision un peu simpliste, mais y a un soupçon de vérité là-dedans quand même.</p>

<p>Habib, au cours de sa présentation, parle de <a href="http://www.playframework.com/">Play</a>. Bien entendu, il prêche pour sa paroisse, Zenexity est l&#8217;éditeur du framework. Il s&#8217;agit d&#8217;une innovation française. Pourtant, au début c&#8217;était plutôt un défaut, que ce soit pour les français (qui ne jurent que par des produits américains) ou par les américains eux-mêmes. Utiliser une technologie française c&#8217;est un peu comme voler dans un avion congolais : ça ne rassure pas vraiment ! Pourtant, Play! a été adopté par de grands noms (surtout américains), comme LinkedIn, Typesafe, etc. Dès lors, tout le monde, y compris les français, encense le framework.</p>

<p>On ne peut pas tout comprendre, il faut savoir se concentrer sur un problème précis, un petit bout d&#8217;une architecture entière. Et si l&#8217;on se jette à l&#8217;eau, que l&#8217;on prend le problème à bras le corps, peut-être que l&#8217;on sera la personne qui a vraiment sû comprendre et aborder ce problème, et que la solution que l&#8217;on proposera deviendra la solution que tout le mondre utilisera. Mais pour cela, il faut se lancer !</p>

<p>Pour résumer, la keynote de Habib Guergachi était pleine de panache, et donne à réflechir. Rien de mieux pour continuer la journée, surtout que la présentation suivante est celle de <a href="http://www.devoxx.com/display/FR13/Julien+Jakubowski">Julien Jakubowski</a> et&#8230; <a href="http://www.devoxx.com/display/FR13/Romain+Linsolas">moi-même</a>. J&#8217;y reviendrais très vite.</p>

<hr/>


<h3><a href="http://www.devoxx.com/display/FR13/Animez+vos+pages+HTML5++un+tour+d%27horizon+complet+des+techniques+d%27animation+en+HTML5">Animez vos pages HTML5: un tour d&#8217;horizon complet des techniques d&#8217;animation en HTML5</a></h3>

<p><a href="http://www.devoxx.com/display/FR13/Martin+Gorner">Martin Gorner</a> (<a href="https://twitter.com/martingorner">@martingorner</a>) de Google nous parle d&#8217;animation en HTML5. Sa présentation est visible <a href="http://animateyourhtml5.appspot.com/pres/#1">en live sur ce site</a>.</p>

<p>En CSS 3, <code>transition</code> permet d&#8217;animer des éléments. Le navigateur va calculer lui-même toutes les étapes intermédiaires.
La propriété <code>animation</code> permet de faire des animations plus complexes, en définissant les propriétés CSS à appliquer à différentes étapes.
Le CSS 3 dispose également de transformations géométriques 2D (rotation, agrandissement, étirement, etc.).
Il y a également des transformations 3D : <code>translateZ</code>, <code>rotateY</code>, etc.
A noter qu&#8217;il faut définir soi même la perspective via une propriété CSS : <code>-webkit-perspective: 1000px;</code>.
Par défaut, la valeur par défaut est <code>-webkit-tansform-style: flat</code>. Ce n&#8217;est pas ce que l&#8217;on souhaite, il faut donc la mettre à <code>preserve-3d</code>. Attention, Internet Explorer 10 ne gère pas cette propriété (mais on peut bidouiller avec du JavaScript pour remplir cette lacune).</p>

<p><img src="http://linsolas.github.com/images/devoxxfr-2013-animation-1.jpg" title="Finalement, animer un cube en CSS, ce n'est pas si compliqué" alt="Finalement, animer un cube en CSS, ce n'est pas si compliqué" /></p>

<p>Les bonnes habitudes pour travailler en 3D :</p>

<ul>
<li>Créer un <code>div</code> qui représente la scène.</li>
<li>Créer un objet qui supportera l&#8217;animation.</li>
<li>Y affecter des images.</li>
<li>Définir les propriétés d&#8217;animation.</li>
</ul>


<p>Après avoir passé en revue l&#8217;utilisation des Canvas 2D, Martin aborde le Canvas 3D, connu aussi sous le nom de <strong>WebGL</strong>. Après quelques explications, Martin propose d&#8217;aborder la partie pratique à l&#8217;aide de la librairie <a href="https://github.com/mrdoob/three.js/">Three.js</a>, qui permet de coder dans le moteur WebGL en JavaScript : définition de la scène, création d&#8217;une &#8220;caméra&#8221;, des &#8220;lumières&#8221;. Ensuite on peut ajouter des objets (des <em>Meshs</em>). Enfin, on définit les actions.
Voici un exemple de code avec cette librairie :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">camera</span><span class="p">,</span> <span class="nx">scene</span><span class="p">,</span> <span class="nx">renderer</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">geometry</span><span class="p">,</span> <span class="nx">material</span><span class="p">,</span> <span class="nx">mesh</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">init</span><span class="p">();</span>
</span><span class='line'><span class="nx">animate</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">camera</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">(</span> <span class="mi">75</span><span class="p">,</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span> <span class="o">/</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">10000</span> <span class="p">);</span>
</span><span class='line'>    <span class="nx">camera</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">z</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">scene</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Scene</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">geometry</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CubeGeometry</span><span class="p">(</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">200</span> <span class="p">);</span>
</span><span class='line'>    <span class="nx">material</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="p">(</span> <span class="p">{</span> <span class="nx">color</span><span class="o">:</span> <span class="mh">0xff0000</span><span class="p">,</span> <span class="nx">wireframe</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>    <span class="nx">mesh</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span> <span class="nx">geometry</span><span class="p">,</span> <span class="nx">material</span> <span class="p">);</span>
</span><span class='line'>    <span class="nx">scene</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span> <span class="nx">mesh</span> <span class="p">);</span>
</span><span class='line'>    <span class="nx">renderer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CanvasRenderer</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">renderer</span><span class="p">.</span><span class="nx">setSize</span><span class="p">(</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="p">,</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span> <span class="p">);</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span> <span class="nx">renderer</span><span class="p">.</span><span class="nx">domElement</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">animate</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// note: three.js includes requestAnimationFrame shim</span>
</span><span class='line'>    <span class="nx">requestAnimationFrame</span><span class="p">(</span> <span class="nx">animate</span> <span class="p">);</span>
</span><span class='line'>    <span class="nx">mesh</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">x</span> <span class="o">+=</span> <span class="mf">0.01</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">mesh</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">y</span> <span class="o">+=</span> <span class="mf">0.02</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">renderer</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span> <span class="nx">scene</span><span class="p">,</span> <span class="nx">camera</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Three.js gère également des modèles d&#8217;objets 3D (via la spécification <a href="https://collada.org">Collada</a> par exemple).</p>

<p>Un point sur les préfixes (ici <code>-webkit-*</code>) : il y a une &#8220;convention&#8221;. Tant qu&#8217;une spécification n&#8217;est pas officielle, les navigateurs utilisent des préfixes. Une fois la spécification entérinée, alors le préfixe peut disparaître. On peut sinon utiliser des outils tels que <a href="http://leaverou.github.com/prefixfree/">prefixfree.js</a> ou <a href="http://sass-lang.com/">SASS</a> qui vont s&#8217;occuper d&#8217;ajouter les préfixes pour nous.</p>

<p><img src="http://linsolas.github.com/images/devoxxfr-2013-animation-2.jpg" title="Les 4 possibilités d'animations en web" alt="Les 4 possibilités d'animations en web" /></p>

<hr/>


<h2><a href="http://www.devoxx.com/display/FR13/Peut+on+toujours+etre+developpeur+apres+40+ans">Peut on toujours être développeur après 40 ans ?</a></h2>

<p><a href="http://www.devoxx.com/display/FR13/Benjamin+Marron">Benjamin Marron</a> (<a href="https://twitter.com/bmarron">@bmarron</a>) nous explique s&#8217;il est possible</p>

<p>Être boucher à 40 ans ? Artisan à 40 ans ? La question ne se pose pas tant elle est évidente. Pourtant, pour un développeur, la question se pose.
Y a-t-il une obscolescence des développeur ? Si la personne est concernée, se forme, alors non. Mais sans ces efforts, cela risque d&#8217;arriver. Et direction chef de projet :)</p>

<p>Grâce à leur expérience, les développeurs expérimentés savent mieux filtrer les informations, choisir les outils ou les librairies.</p>

<p><img src="http://linsolas.github.com/images/devoxxfr-2013-40ans.jpg" title="Développeur à 40 ans, c'est ça ?" alt="Développeur à 40 ans, c'est ça ?" /></p>

<p>Alors la question est peut-être de savoir si nous sommes usés ?
Il ne faut pas rester dans sa zone de confort.
Les conférences comme Devoxx permettent de se gonfler à bloc, le leitmotiv c&#8217;est &#8221;<strong>soyez fiers d&#8217;être développeurs</strong>&#8221;</p>

<p>Quid du choc générationnel ? Comme travailler avec des &#8220;petits jeunes&#8221; de 20 ans ? Il faut rester humble, dire que l&#8217;on a toujours à apprendre.</p>

<p>Il y a aussi le problème de disponibilité, avec la vie de famille, les enfants, etc. Mais cela reste jouable, et le fait de ne pas être toujours 100% disponible pour son travail n&#8217;est pas un frein.</p>

<p>Le message de Benjamin Marron est que la passion doit nous faire continuer dans cette voie, et que nous avons les moyens d&#8217;y parvenir. Un sujet n&#8217;a pas été vraiment abordé, si ce n&#8217;est lors des questions du public : la reconnaissance de l&#8217;expérience par l&#8217;employeur. Il est vrai qu&#8217;en France, niveau salaire, on a tendance à stagner assez vite (disons à partir d&#8217;une dizaine d&#8217;années d&#8217;expérience), et continuer sa progression n&#8217;est pas toujours facile. Ca reste compliqué aujourd&#8217;hui, mais les choses semblent changer. Doucement en tout cas.</p>

<hr/>


<h2><a href="http://www.devoxx.com/display/FR13/Winter+is+coming">Winter is coming</a></h2>

<p><img src="http://linsolas.github.com/images/devoxxfr-2013-winter.jpg" title="Winter is coming" alt="Winter is coming" /></p>

<p>Je finis (ou presque) ma journée avec la présentation de <a href="http://www.devoxx.com/display/FR13/Didier+Girard">Didier Girard</a> et <a href="http://www.devoxx.com/display/FR13/Aurelien+Pelletier">Aurélien Pelletier</a> de <a href="http://www.sfeir.com/">SFEIR</a>. J&#8217;avoue que j&#8217;ai un peu du mal à savoir quoi tirer de cette présentation, tant le message n&#8217;était pas très clair. L&#8217;idée, du moins une partie de ce qui a été dit, c&#8217;est de savoir comment juger de la pertinence d&#8217;un framework, d&#8217;une librairie, et de savoir estimer son espérance de vie, dans un monde très concurrentiel.</p>

<p>Didier Girard décide donc d&#8217;utiliser <a href="http://www.google.com/trends/?hl=en">Google Trends</a> pour juger de la popularité d&#8217;un framework. Mais plutôt que simplement comparer deux noms de technologies via le site de Google, il décide d&#8217;y ajouter le terme <em>tutorial</em>, supposant que plus il y a de tutoriels sur une technologie, plus celle-ci intéresse les gens, et sera facile à maitriser.
Bien sûr, Didier Girard insiste sur le fait que cela doit aider à se faire une opinion, mais que cela ne saurait suffire. Pourtant, il n&#8217;ira guère plus loin dans sa démonstration, ce qui est un peu contradictoire au final. Dommage.</p>

<p>Pour résumer, on va dire que ce n&#8217;est pas forcément la présentation que j&#8217;ai préféré à Devoxx :)</p>

<hr/>


<h2><a href="http://www.devoxx.com/display/FR13/Les+Cast+Codeurs+Podcast...+putain+4+ans+deja%21">Les CastCodeurs, putain 4 ans déjà</a></h2>

<p><img src="http://linsolas.github.com/images/devoxxfr-2013-castcodeurs.jpg" title="Merci Atlassian, une fois de plus !" alt="Merci Atlassian, une fois de plus !" /></p>

<p>Ca devient une tradition, finir un Devoxx avec une session live des <a href="http://lescastcodeurs.com/">Cast Codeurs</a>. A vrai dire, je ne vois <strong>aucune</strong> raison de ne pas y assister : récapitulatif de la conférence, bonne ambiance, bonnes blagues (quoique ?) et bières offertes par Atlassian ! Rien de mieux pour terminer en beauté une magnifique conférence. Allez écouter le podcast, bientôt disponible. En attendant, il y a les podcasts de <a href="http://lescastcodeurs.com/2011/11/28/les-cast-codeurs-podcast-episode-49-devoxx-2011-les-dix-ans/">Devoxx 2011</a>, <a href="http://lescastcodeurs.com/2012/04/21/les-cast-codeurs-podcast-episode-57-en-direct-de-devoxx-france-2012/">Devoxx France 2012</a>, et enfin <a href="http://lescastcodeurs.com/2012/11/29/les-cast-codeurs-podcast-episode-68-devoxx-2012-et-les-putchettes/">Devoxx 2012</a>.</p>

<p>A l&#8217;année prochaine !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devoxx France 2013 - Jour 2]]></title>
    <link href="http://linsolas.github.com/blog/2013/03/28/devoxx-france-2013-jour-2/"/>
    <updated>2013-03-28T11:31:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2013/03/28/devoxx-france-2013-jour-2</id>
    <content type="html"><![CDATA[<p><img src="http://www.devoxx.com/download/attachments/6816022/DevoxxFR-2012-web-400-267.png" title="Devoxx France 2013" alt="Devoxx France" /></p>

<p>Et c&#8217;est parti pour la seconde journée de Devoxx France 2013. Le jeudi est la première journée des conférences et quickies. Moins de code, mais toujours autant de fun.</p>

<p>Pour cause de timing, j&#8217;ai hélas raté les keynotes du matin. <a href="http://www.devoxx.com/display/FR13/Bonjour+et+bienvenue">La première</a>, présentée par une partie de l&#8217;équipe organisatrice de l&#8217;événement, était essentiellement destinée à accueillir les personnes et donner un certain nombre de chiffres. Une annonce toutefois : la nouvelle version du site <a href="http://www.parleys.com">Parleys</a>, refait complètement en HTML 5. Exit le Flash, et c&#8217;est tant mieux !</p>

<p><a href="http://www.devoxx.com/pages/viewpage.action?pageId=6818412">La seconde, L&#8217;Histoire des Ecritures</a>, présentée par <a href="http://www.devoxx.com/display/FR13/Clarisse+Herrenschmidt">Clarisse Herrenschmidt</a> retraçait l&#8217;histoire de l&#8217;écriture, au terme de nombreux siècles d&#8217;évolution. Une keynote visiblement passionnante, qui change un peu des thèmes très informatiques dont on a l&#8217;habitude. Certains l&#8217;ont comparée à la keynote de Michel Serres à l&#8217;USI, donc forcément un compliment ! L&#8217;ayant ratée, je pense qu&#8217;il s&#8217;agira de la première que je regarderais sur le site de Parleys.</p>

<p><a href="http://www.devoxx.com/display/FR13/Objects+and+functions%2C+conflict+without+a+cause">Dernière keynote</a> fut celle de <a href="http://www.devoxx.com/display/FR13/Martin+Odersky">Martin Odersky</a>, le créateur de Scala. Il semble que les retours indiquent que la keynote n&#8217;a pas été dans la direction d&#8217;un apaisement entre les <em>Javaïstes</em> et les <em>Scalafistes</em>. Dommage.</p>

<!-- more -->


<h2><a href="http://www.devoxx.com/display/FR13/Elastifiez+votre+application+++du+SQL+au+NoSQL+en+moins+d%27une+heure">Elastifiez votre application : du SQL au NoSQL en moins d&#8217;une heure</a></h2>

<p><img src="http://linsolas.github.com/images/devoxxfr-2013-nosql-1.jpg" title="David et Tug sur scène" alt="David et Tug sur scène" /></p>

<p><a href="http://www.devoxx.com/display/FR13/David+Pilato">David Pilato</a> et <a href="http://www.devoxx.com/display/FR13/Tugdual%20Grall">Tugdual Grall</a> nous propose un guide pour migrer une application utilisant une base de données relationnelle vers une base de données NoSQL.</p>

<p>Tout d&#8217;abord, une question : pourquoi migrer ?</p>

<ul>
<li>Il est aisé de faire de la scalabilité verticale : augmentation des serveurs, de la mémoire, etc. Mais cela ne suffit plus, on voudrait de la scalabilité horizontale.</li>
<li>La recherche doit être structurée. On souhaiterait de la recherche full-text.</li>
</ul>


<p>Ils vont nous montrer le développement d&#8217;une application basée sur <a href="http://www.couchbase.com/">CouchBase</a> pour la base de données NoSQL et <a href="http://www.elasticsearch.org/">ElasticSearch</a> pour la partie recherche.</p>

<p><img src="http://linsolas.github.com/images/devoxxfr-2013-nosql-2.jpg" title="Un petit problème, David ?" alt="Un petit problème, David ?" /></p>

<p>On commence par une visite de l&#8217;application telle qu&#8217;elle est, dans sa version relationelle. Il s&#8217;agit d&#8217;une base assez simple, avec des fonctionnalités de CRUD, et une recherche assez limitée (la recherche n&#8217;est pas multi-champs, très stricte, etc.).</p>

<p>Première étape du refactoring de l&#8217;application : mettre en place une API REST dans le serveur (utilisation de Spring MVC + <a href="http://jackson.codehaus.org/">Jackson</a>). Par exemple, on propose une méthode de récupération d&#8217;une personne par son ID (ou éventuellement par son nom).</p>

<p>Deuxième étape, mise en place de <strong>CouchBase</strong>. Côté code, on ajoute la dépendance vers le client CouchBase dans le <code>pom.xml</code>. L&#8217;API utilisée ici est très claire et concise. Pour montrer que ça fonctionne, Tugdual montre des appels REST via la commande <code>curl</code>. Ce n&#8217;est pas sexy, mais ça marche effectivement.</p>

<p>L&#8217;interface graphique de l&#8217;application se fait en Angular, mais ça n&#8217;a guère d&#8217;importance ici.</p>

<p>Tout fonctionne bien, mais ce n&#8217;est pas encore ça. Par exemple, si on cherche <em>Joe Smith</em>, on trouvera des résultats, mais pas si l&#8217;on cherche <em>Smith Joe</em>. C&#8217;est là qu&#8217;intervient <strong>ElasticSearch</strong>. Une fois l&#8217;index dans ElasticSearch créé, on duplique les données de CouchBase vers ElasticSearch, tout ceci se faisant très simplement via l&#8217;interface web de CouchBase (la base de données est prévue pour fonctionner avec ElasticSearch).</p>

<p>Maintenant, on modifie la partie de recherche - gérée par AngularJS - afin de taper directement sur ElasticSearch, sans passer par le serveur. Avec pratiquement aucune modification, la recherche bénéficie désormais de la puissance d&#8217;ElasticSearch : recherche multi-champs, recherche plus générique (désormais la recherche <em>Smith Joe</em> trouve effectivement <em>Joe Smith</em>), etc.</p>

<p>Passons maintenant à l&#8217;analyse de données. David présente <a href="http://kibana.org/">Kibana</a>, un plugin d&#8217;Elastic Search qui permet de créer des dashboards dynamiques. En quelques clics, David arrive à créer un histogramme montrant la distribution des dates de naissance parmi la base de données contenant déjà plus d&#8217;un million d&#8217;entrées. Même chose pour créer un camembert pour la répartition par pays. Ce dashboard est dynamique. On peut ainsi naviguer dans nos données.</p>

<p><img src="http://linsolas.github.com/images/devoxxfr-2013-nosql-3.jpg" title="Kibana, pour faire des dashboards rapides et efficaces" alt="Kibana, pour faire des dashboards rapides et efficaces" /></p>

<p>Un autre point positif des bases NoSQL : les données sont sans schéma (<em>schema less</em>), c&#8217;est-à-dire qu&#8217;il est possible d&#8217;ajouter, modifier ou supprimer des champs sans aucun problème. Aucun <code>ALTER TABLE</code> à faire, pas de freeze de la base de données, pas d&#8217;update des données existantes.</p>

<p>En moins d&#8217;une heure, David et Tug ont réussi leur pari de faire migrer leur application pour la rendre plus scalable, plus élastique. En prime, et ce n&#8217;est pas négligeable, ils ont ajouté de vraies fonctionnalités de recherche et de création de dashboards dynamiques, à moindre frais. Une telle migration n&#8217;est toutefois pas si aisée dans le monde réél, et se passer d&#8217;une base relationnelle n&#8217;est pas toujours simple, en particulier car il faut changer aussi sa façon de penser son modèle de données.</p>

<hr/>


<h2><a href="http://www.devoxx.com/display/FR13/Les+bronzes+font+du+dev">Les bronzés font du dév</a></h2>

<p><img src="http://linsolas.github.com/images/devoxxfr-2013-ellene.jpg" title="Pas de machine ? Lis la doc en attendant !" alt="Pas de machine ? Lis la doc en attendant" /></p>

<p><a href="http://www.devoxx.com/display/FR13/Ellene+Dijoux">Ellène Siber Dijoux</a> (<a href="https://twitter.com/ElleneSiber">@ElleneSiber</a>), durant un Quickie humoristique, nous montre la vie professionnelle de Martin Dutruc, jeune développeur fraichement débarqué de son école. La déconvenue va être totale, et nous voyons à travers cette petite histoire pas mal de travers de notre métier (quand il n&#8217;est pas exécuté par les bonnes personnes) ainsi qu&#8217;un certain nombre de clichés dans notre environnement :</p>

<ul>
<li>La société à &#8220;taille humaine&#8221; de 1200 personnes ;</li>
<li>Le commercial qui était un ancien développeur et qui connait bien le monde du &#8221;<em>Java - J deux ZE</em>&#8221; ;</li>
<li>Pas de machine lors de l&#8217;arrivée d&#8217;un nouveau dans l&#8217;équipe. Du coup on lui donne 1000 pages de documentation, fonctionnelle ou technique ;</li>
<li>Le problème du build qui ne passe pas, alors il faut ignorer les tests ;</li>
<li>La mauvaise gestion du temps, de la pseudo-agilité (vive les itérations de 2 mois !).</li>
</ul>


<p>Ellène s&#8217;en est bien sortie, le format de sa présentation n&#8217;était pas forcément facile. Hélas, ces travers sentaient beaucoup le vécu, y compris pour moi. En tout cas, bien vu Ellène :)</p>

<hr/>


<h2><a href="http://www.devoxx.com/display/FR13/Comparing+JVM+Web+Frameworks">Comparing JVM Web Frameworks</a></h2>

<p><a href="http://www.devoxx.com/display/FR13/Matt+Raible">Matt Raible</a> (<a href="https://twitter.com/mraible">@mraible</a>) nous propose une comparaison de différents frameworks Web tournant sur la JVM. Tout d&#8217;abord une petite histoire sur le web et les frameworks web pour la JVM.</p>

<p><img src="https://farm9.staticflickr.com/8529/8588701778_91aeb65377_o.png" title="L'historique des frameworks web de la JVM" alt="L'historique des frameworks web de la JVM" />
<em>Image de <a href="http://raibledesigns.com/">Matt Raible</a> (Copyright Raible Designs)</em></p>

<p>Y a t&#8217;il trop de frameworks web pour la JVM ? La salle pense en majorité que oui. L&#8217;arrivée des frameworks JavaScript ne change pas la donne, et posent d&#8217;autres problèmes : peu de scalabilité, problème de sécurité, code potentiellement critique côté client, etc.</p>

<p>Passons au comparatif des frameworks. Tout d&#8217;abord, quels critères pour choisir les candidats ?</p>

<ul>
<li>Communauté / Support</li>
<li>HTML 5</li>
<li>REST</li>
<li>Mobile</li>
<li>Performances</li>
<li>Rapidité des pages</li>
</ul>


<p>Matt décide de se &#8220;borner&#8221; à la plateforme JVM pour restreindre son choix. Cela laisse tout de même un large choix de langage : Java, Scala, Groovy, etc.</p>

<p>Faire des comparatifs n&#8217;est pas simple. Il faut affronter communautés passionnées (surtout celles ayant une mauvaise note), critiques sur la façon de noter ou sur les notes. Il y aussi la possibilité de &#8220;tricher&#8221; avec les résultats.</p>

<p>Pour Matt, l&#8217;une des très bonne comparaison de frameworks était la présentation <a href="http://www.parleys.com/#play/514892290364bc17fc56c52e/chapter0/about">World Wide Wait</a> lors du Devoxx 2011.
Autre comparatif intéressant est le site <a href="http://devrates.com/stats/index">devrates.com</a> qui permet avant tout de connaitre la popularité d&#8217;un framework.</p>

<p>S&#8217;il s&#8217;agit d&#8217;un framework <em>full stack</em>, Matt recommande avant tout de choisir en fonction du langage que l&#8217;on souhaite utiliser : JRuby, Groovy, Scala ou Java.</p>

<p>Cette présentation n&#8217;était pas une comparaison en soi, mais plutôt les bonnes méthodes à suivre quand on veut faire soi même une comparaison de frameworks, afin de choisir ce qui permettra de mieux répondre à nos besoins. Une présentation intéressante, mais peut-être un peu en deça de ce que nous avait habitué Matt Raible par le passé.</p>

<hr/>


<h2><a href="http://www.devoxx.com/display/FR13/Structures+de+donnees+exotiques%2C+au+dela+de+ArrayList%2C+HashMap+et+autres+HashSet.">Structures de données exotiques, au delà de ArrayList, HashMap et autres HashSet</a></h2>

<p><a href="http://www.devoxx.com/display/FR13/Sam+Bessalah">Sam Bessalah</a> (<a href="https://twitter.com/samklr">@samklr</a>)</p>

<p>On a tendance à toujours sortir l&#8217;artillerie lourde, et pas de considérer vraiment le problème que l&#8217;on a. Comme il le dit, <em>quand on a un marteau, tout ressemble à un clou</em> ! Durant cette présentation, Sam nous présente 4 structures de données, un poil exotique.</p>

<h3>Skiplist</h3>

<ul>
<li>Stockage de données ordonnées</li>
<li>Insertion / suppression en <code>O(log N)</code></li>
<li>Recherche en <code>O(log N)</code></li>
</ul>


<p>Plutôt que de parcourir toute la liste pour chercher un élément, on prend des &#8220;voies express&#8221;, c&#8217;est-à-dire qu&#8217;on va sauter des éléments. Pour vulgariser un peu, Sam compare ça aux Métro 1 et au RER A. Par exemple, si l&#8217;on veut se rendre de La Défense à Châtelet, on peut prendre l&#8217;une ou l&#8217;autre des lignes. Le Métro 1 va mettre plus de temps, car il s&#8217;arrête à chaque station, alors que le RER prend une voie &#8220;express&#8221; (du moins en temps normal, quand il n&#8217;y a pas d&#8217;incident :) ). On arrive ainsi plus vite à destination. C&#8217;est le même principe pour les <code>SkipList</code> lorsqu&#8217;on la parcourt à la recherche d&#8217;un élément : on ne va pas aller d&#8217;élément en élément, mais on va plutôt prendre des &#8220;raccourcis&#8221;.</p>

<p>Depuis le JDK 1.6, il existe des implémentations de ce type de structure :</p>

<ul>
<li><a href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ConcurrentSkipListMap.html">java.util.concurrent.ConcurrentSkipListMap</a></li>
<li><a href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ConcurrentSkipListSet.html">java.util.concurrent.ConcurrentSkipListSet</a></li>
</ul>


<h3>Tries</h3>

<p>Cette structure est une sorte d&#8217;arbre ternaire. Pour une recherche de texte, la complexité va dépendre non de la taille de l&#8217;arbre, mais de la longueur de la chaine de recherche.
Toutefois, cette structure reste assez gourmande en mémoire. Sam fait un focus sur la structure <code>Hash Array Mapped Trie</code> (<a href="http://en.wikipedia.org/wiki/Hash_array_mapped_trie">HAMT</a>). Dans ce type de structure, on code les clés sur 32 bits, du coup la profondeur de l&#8217;arbre ne dépassera jamais 7 niveaux.</p>

<p>Pour la complexité nous avons d&#8217;excellents résultats :</p>

<ul>
<li>ajouter, premier, dernier, n-ième élément, mise à jour -> <code>O(1)</code>.</li>
<li>concat, insert, preprend -> <code>O(N)</code> (N étant au maximum 7).</li>
</ul>


<p>A noter qu&#8217;il existe une <code>Concurrent Trie</code> (<a href="http://en.wikipedia.org/wiki/Ctrie">CTrie</a>) qui n&#8217;est pas bloquante.</p>

<h3>Sketches</h3>

<p>Prendre un ensemble de données, en extraire des informations, puis travailler sur ces informations et non sur les données elles-mêmes.</p>

<h4>Bloom Filters</h4>

<p>Structure de données probabiliste. Par exemple, est-ce qu&#8217;un élément appartient à un ensemble de données ?
On ne pas être sûr à 100% que la donnée soit présente, mais on est absolument certain qu&#8217;elle n&#8217;y ait pas. Il ne peut donc pas y avoir de faux-négatif.</p>

<p>Attention toutefois, si un <em>Bloom Filter</em> accepte les insertions, il ne peut pas y ajouter de suppression de données. Afin de supporter la suppression, il faudra utiliser un <em>Counting Bloom Filter</em>.</p>

<p>On peut trouver une implémentation dans Guava, <a href="http://docs.guava-libraries.googlecode.com/git-history/v11.0/javadoc/com/google/common/hash/BloomFilter.html">BloomFilter</a></p>

<h3>Count Min Sketches</h3>

<p>Le <a href="http://en.wikipedia.org/wiki/Count-Min_sketch">Count Min Sketch</a> est une évolution du Bloom Filter. Cette structure garde l&#8217;information du nombre d&#8217;occurences de chaque élément. Une utilisation de ce genre de structure est de détecter quelle source change le plus souvent ses données, les IP qui consomment le plus de bande passante, etc.</p>

<p>A voir sur GitHub, une <a href="https://github.com/clearspring/stream-lib">librairie de structure de données par flux</a>.</p>

<hr/>


<p>Une seconde journée moins chargée en terme de conférence en ce qui me concerne, car il me fallait encore préparer mon passage du lendemain avec Julien Jakubowski. J&#8217;ai également beaucoup discuté avec d&#8217;autres personnes, visiter un peu les stands, etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devoxx France 2013 - Jour 1]]></title>
    <link href="http://linsolas.github.com/blog/2013/03/27/devoxx-france-2013-jour-1/"/>
    <updated>2013-03-27T09:42:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2013/03/27/devoxx-france-2013-jour-1</id>
    <content type="html"><![CDATA[<p><img src="http://www.devoxx.com/download/attachments/6816022/DevoxxFR-2012-web-400-267.png" alt="Devoxx France" /></p>

<p>Enfin, ça y est ! La deuxième édition de la conférence <a href="http://www.devoxx.com/display/FR13/Accueil">Devoxx France</a> a débuté. Comme l&#8217;année dernière, la conférence se déroule sur trois jours. Le mercredi est essentiellement constituée de démonstrations, de laboratoires, de mises en pratique d&#8217;un outil ou d&#8217;un langage, de <em>Tools in Action</em>.
Ma journée débute donc avec une université sur les tests en JavaScript. L&#8217;après-midi contiendra quelques surprises, dont&#8230; un minitel :)</p>

<!-- more -->


<h2><a href="http://www.devoxx.com/display/FR13/Le+fantome%2C+le+zombie+et+testacular%2C+panorama+des+outils+de+tests+pour+application+web+moderne.">Le fantôme, le zombie et Testacular, panorama des outils de tests pour application web moderne</a></h2>

<p><img src="http://linsolas.github.com/images/devoxxfr-2013-tests-js-1.jpg" alt="Qui fait vraiment des tests ?" /></p>

<p>Photo par <a href="https://twitter.com/binout">@binout</a></p>

<p>Pour commencer la journée et la conférence, <a href="http://www.devoxx.com/display/FR13/Jean-laurent+De+morlhon">Jean-Laurent de Morhlon</a> (<a href="https://twitter.com/morlhon">@morlhon</a>) et <a href="http://www.devoxx.com/display/FR13/Pierre+Gayvallet">Pierre Gayvallet</a> (<a href="https://twitter.com/wayofspark">@wayofspark</a>) nous proposent un tour d&#8217;horizon de ce qui se fait autour des tests JavaScript.</p>

<p>Tout d&#8217;abord, un rappel des différents types de tests</p>

<ul>
<li>Tests <strong>unitaires</strong> : il s&#8217;agit ici de tests techniques. On les exécutera plutôt en isolation, c&#8217;est-à-dire côté en supprimant le maximum de choses autour du code : pas de base de données, de navigateur web, d&#8217;accès réseau, etc.</li>
<li>Tests d&#8217;<strong>intégration</strong> : nous restons dans les techniques techniques, mais ici nous voulons mettre l&#8217;ensemble de l&#8217;application en test.</li>
<li>Tests d&#8217;<strong>acceptance</strong> : ce sont avant tout des tests fonctionnels. Nous pouvons utiliser le <em>BDD</em> (<em>Behavior Driven Development</em>). Toutefois, ces tests doivent représenter une petite partie de l&#8217;ensemble des tests.</li>
</ul>


<p>Technique de l&#8217;<em>outside-in</em> :</p>

<ul>
<li>On écrit un test d&#8217;acceptance qui va échouer.</li>
<li>Ensuite, on écrit un test unitaire qui va également échouer.</li>
<li>Puis on code de façon à faire passer le test simplement.</li>
<li>Une fois le test unitaire réussit, on procède au refactoring.</li>
<li>Une fois que le test unitaire est au vert et que le refactoring est terminé, on peut terminer en faisant en sorte que le test d&#8217;acceptance réussisse.</li>
</ul>


<p>Un peu de vocabulaire maintenant : un navigateur <em>headless</em> (&#8221;<em>sans tête</em>&#8221;) est un navigateur sans interface graphique. Cela servira beaucoup pour les tests, la partie graphique étant éliminée, nous gagnons ainsi beaucoup de temps. Quelques exemples : PhantomJS, HtmlUnit, Zombie.js&#8230;</p>

<h3>PhantomJS</h3>

<p><img src="http://linsolas.github.com/images/phantomjs.png" alt="PhantomJS" /></p>

<p><a href="http://phantomjs.org">PhantomJS</a>, un navigateur <em>headless</em> dispose d&#8217;un vrai <em>rendering</em> (pas d&#8217;émulation), rapide, et offre une API JavaScript très complète.</p>

<p>Voici un exemple de code avec PhantomJS :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Loading a web page&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">page</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;webpage&#39;</span><span class="p">).</span><span class="nx">create</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">&#39;http://www.phantomjs.org/&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">page</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//Page is loaded!</span>
</span><span class='line'>    <span class="nx">phantom</span><span class="p">.</span><span class="nx">exit</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;une des particularité de PhantomJS est son double contexte d&#8217;exécution : client et serveur. Cela implique parfois des problèmes de communication entre les deux contextes, ce qui est souvent source d&#8217;erreur.</p>

<p>La gestion du <em>rendering</em> de PhantomJS supporte quasiment tous les standards HTML5 et CSS3, avec quelques limites toutefois : pas de support de Flash (ô mon dieu :) ), pas de CSS 3D, de géolocalisation, WebGL, etc.
Son écosystème est assez riche : GhostWriter (qui implémente la spécification WebDriver), des runners de tests (Poltergeist, Mocha, etc.), des frameworks de tests (Lotte, WebSpecter, CasperJS, etc.), mais aussi des outils pour réaliser des screenshots (capturejs, node-webshot&#8230;)</p>

<h3>CasperJS</h3>

<p><img src="http://linsolas.github.com/images/casperjs.jpg" alt="CasperJS" /></p>

<p><a href="http://casperjs.org/">CasperJS</a> est une surcouche de PhantomJS pour ajouter ce qui manque à ce dernier :</p>

<ul>
<li>Gestion des callbacks, de l&#8217;asynchronisme</li>
<li>API fluide (<em>fluent API</em>)</li>
<li>Méthodes d&#8217;intéraction avec la page (support du clavier, etc.)</li>
<li>Framework de tests</li>
</ul>


<p>Par exemple, le code suivant :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">page</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;webpage&#39;</span><span class="p">).</span><span class="nx">create</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">page</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">url1</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">status</span> <span class="o">==</span> <span class="s2">&quot;fail&quot;</span><span class="p">)</span> <span class="nx">phantom</span><span class="p">.</span><span class="nx">exit</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">page</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">url2</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">status</span> <span class="o">==</span> <span class="s2">&quot;fail&quot;</span><span class="p">)</span> <span class="nx">phantom</span><span class="p">.</span><span class="nx">exit</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">page</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">url3</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">status</span> <span class="o">==</span> <span class="s2">&quot;fail&quot;</span><span class="p">)</span> <span class="nx">phantom</span><span class="p">.</span><span class="nx">exit</span><span class="p">();</span>
</span><span class='line'>            <span class="nx">page</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">url4</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">status</span> <span class="o">==</span> <span class="s2">&quot;fail&quot;</span><span class="p">)</span> <span class="nx">phantom</span><span class="p">.</span><span class="nx">exit</span><span class="p">();</span>
</span><span class='line'>                <span class="c1">// Can I stop, now?</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>s&#8217;écrira plus simplement avec CasperJS :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">casper</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;casper&#39;</span><span class="p">).</span><span class="nx">create</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">casper</span><span class="p">.</span><span class="nx">start</span><span class="p">(</span><span class="nx">url1</span><span class="p">);</span>
</span><span class='line'><span class="nx">casper</span><span class="p">.</span><span class="nx">thenOpen</span><span class="p">(</span><span class="nx">url2</span><span class="p">);</span>
</span><span class='line'><span class="nx">casper</span><span class="p">.</span><span class="nx">thenOpen</span><span class="p">(</span><span class="nx">url3</span><span class="p">);</span>
</span><span class='line'><span class="nx">casper</span><span class="p">.</span><span class="nx">thenOpen</span><span class="p">(</span><span class="nx">url4</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">casper</span><span class="p">.</span><span class="nx">run</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il faut noter qu&#8217;avec la version 1.1 de CasperJS (pas encore sortie), l&#8217;écriture des tests sera simplifiée, en particulier pour ce qui concerne le code à exécuter avant ou après des tests (<code>setUp</code> et <code>`tearDown</code>).</p>

<p>S&#8217;ensuit une démonstration de l&#8217;outil CasperJS, pour tester de façon fluide est très simple des interactions sur un site web marchant : tests basiques d&#8217;une page (vérification d&#8217;un titre, du contenu), simulation de clics pour ajouter des éléments dans le panier, test de la validation d&#8217;un formulaire, etc.
Point sympathique, il est possible de demander à CasperJS de réaliser une capture d&#8217;écran durant un test et de le copier dans un fichier avec une commande simple : <code>casper.capture("mon_image.png");</code> On peut donc faire du <em>Screenshot Driven Development</em> :)</p>

<h3>Zombie.js</h3>

<p><img src="http://linsolas.github.com/images/zombiejs.jpg" alt="ZombieJS" /></p>

<p><a href="http://zombie.labnotes.org/">ZombieJS</a> est un navigateur <em>headless</em>, qui tourne sur node.js, et qui repose sur des bibliothèque d&#8217;émulation (c&#8217;est un avantage mais aussi un inconvénient). Ce n&#8217;est donc pas un <em>vrai</em> navigateur, bien qu&#8217;il supporte la plupart des fonctionnalités des navigateurs actuels : HTML5, sélecteurs CSS3, cookier, web storage, ajax, etc. Il se base sur certaines librairies tierces, telles que :</p>

<ul>
<li>JSDom</li>
<li>HTML5</li>
<li>Sizzle.js (sélecteurs CSS)</li>
</ul>


<p>L&#8217;API de Zombie.js est fluide, ce qui permet de rendre le code plus lisible (encore plus en utilisant CoffeeScript). Voici un exemple de code avec Zombie.js :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Browser</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;zombie&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;assert&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Load the page from localhost</span>
</span><span class='line'><span class="nx">browser</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Browser</span><span class="p">()</span>
</span><span class='line'><span class="nx">browser</span><span class="p">.</span><span class="nx">visit</span><span class="p">(</span><span class="s2">&quot;http://localhost:3000/&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Fill email, password and submit form</span>
</span><span class='line'>  <span class="nx">browser</span><span class="p">.</span>
</span><span class='line'>    <span class="nx">fill</span><span class="p">(</span><span class="s2">&quot;email&quot;</span><span class="p">,</span> <span class="s2">&quot;zombie@underworld.dead&quot;</span><span class="p">).</span>
</span><span class='line'>    <span class="nx">fill</span><span class="p">(</span><span class="s2">&quot;password&quot;</span><span class="p">,</span> <span class="s2">&quot;eat-the-living&quot;</span><span class="p">).</span>
</span><span class='line'>    <span class="nx">pressButton</span><span class="p">(</span><span class="s2">&quot;Sign Me Up!&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Form submitted, new page loaded.</span>
</span><span class='line'>      <span class="nx">assert</span><span class="p">.</span><span class="nx">ok</span><span class="p">(</span><span class="nx">browser</span><span class="p">.</span><span class="nx">success</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">browser</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span> <span class="s2">&quot;Welcome To Brains Depot&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un autre exemple de test avec les sélecteurs CSS :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">brower</span><span class="p">.</span><span class="nx">queryAll</span><span class="p">(</span><span class="s2">&quot;#content &gt; .produit&quot;</span><span class="p">).</span><span class="nx">length</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">7</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Avec Zombie, le code devient très lisible, ultra rapide. Toutefois, il a quelques défauts (assez importants pour certains) :</p>

<ul>
<li>Emule un navigateur.</li>
<li>Difficile à intégrer dans un build java.</li>
<li>Difficile à faire tourner sur Windows (aie !).</li>
<li>Le développement est quelque peu en berne (aie aussi !).</li>
<li>Les erreurs sont parfois cryptiques.</li>
</ul>


<p>Jean-Laurent passe ensuite à une démonstration de l&#8217;outil avec CoffeeScript.</p>

<h3>QUnit</h3>

<p><img src="http://linsolas.github.com/images/qunit.png" alt="QUnit" /></p>

<p><a href="http://qunitjs.com">QUnit</a> est une librairie de tests JavaScript plus proche des JUnit, avec le système des assert. On est ici plutôt à destination des tests unitaires, pour faire du TDD.
L&#8217;écosystème de QUnit est assez riche, il est également possible d&#8217;ajouter de nouvelles assertions (par défaut, QUnit n&#8217;en propose qu&#8217;une toute petite poignée) :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Code du plugin QUnit closeEnough (https://github.com/jquery/qunit/tree/master/addons/close-enough)</span>
</span><span class='line'><span class="nx">QUnit</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span> <span class="nx">QUnit</span><span class="p">.</span><span class="nx">assert</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Checks that the first two arguments are equal, or are numbers close enough to be considered equal</span>
</span><span class='line'><span class="cm">  * based on a specified maximum allowable difference.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="nx">close</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">actual</span><span class="p">,</span> <span class="nx">expected</span><span class="p">,</span> <span class="nx">maxDifference</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">passes</span> <span class="o">=</span> <span class="p">(</span><span class="nx">actual</span> <span class="o">===</span> <span class="nx">expected</span><span class="p">)</span> <span class="o">||</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">actual</span> <span class="o">-</span> <span class="nx">expected</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="nx">maxDifference</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">QUnit</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">passes</span><span class="p">,</span> <span class="nx">actual</span><span class="p">,</span> <span class="nx">expected</span><span class="p">,</span> <span class="nx">message</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Checks that the first two arguments are numbers with differences greater than the specified</span>
</span><span class='line'><span class="cm">  * minimum difference.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="nx">notClose</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">actual</span><span class="p">,</span> <span class="nx">expected</span><span class="p">,</span> <span class="nx">minDifference</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">QUnit</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">actual</span> <span class="o">-</span> <span class="nx">expected</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nx">minDifference</span><span class="p">,</span> <span class="nx">actual</span><span class="p">,</span> <span class="nx">expected</span><span class="p">,</span> <span class="nx">message</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;utilisation de cette nouvelle assertion doit passer par l&#8217;objet <em>assert</em> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;Example unit test&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">assert</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">assert</span><span class="p">.</span><span class="nx">close</span><span class="p">(</span><span class="mf">3.141</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">,</span> <span class="mf">0.001</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">assert</span><span class="p">.</span><span class="nx">notClose</span><span class="p">(</span><span class="mf">3.1</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">,</span> <span class="mf">0.001</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Sinon.js</h3>

<p><a href="http://sinonjs.org/">Cette librairie</a> de tests a le gros avantage de pouvoir mocker pas mal de choses, dont les timers, des servers, des appels Ajax.
Il dispose également d&#8217;une API assez complète pour les espions (<em>spy</em>) ou les <em>stubs</em>.
Un petit exemple :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s2">&quot;calls original function with right this and args&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">callback</span> <span class="o">=</span> <span class="nx">sinon</span><span class="p">.</span><span class="nx">spy</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">proxy</span> <span class="o">=</span> <span class="nx">once</span><span class="p">(</span><span class="nx">callback</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">proxy</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">assert</span><span class="p">(</span><span class="nx">callback</span><span class="p">.</span><span class="nx">calledOn</span><span class="p">(</span><span class="nx">obj</span><span class="p">));</span>
</span><span class='line'>    <span class="nx">assert</span><span class="p">(</span><span class="nx">callback</span><span class="p">.</span><span class="nx">calledWith</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un autre exemple, en mockant une requête Ajax :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">after</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// When the test either fails or passes, restore the original</span>
</span><span class='line'>    <span class="c1">// jQuery ajax function (Sinon.JS also provides tools to help</span>
</span><span class='line'>    <span class="c1">// test frameworks automate clean-up like this)</span>
</span><span class='line'>    <span class="nx">jQuery</span><span class="p">.</span><span class="nx">ajax</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s2">&quot;makes a GET request for todo items&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">sinon</span><span class="p">.</span><span class="nx">stub</span><span class="p">(</span><span class="nx">jQuery</span><span class="p">,</span> <span class="s2">&quot;ajax&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">getTodos</span><span class="p">(</span><span class="mi">42</span><span class="p">,</span> <span class="nx">sinon</span><span class="p">.</span><span class="nx">spy</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">assert</span><span class="p">(</span><span class="nx">jQuery</span><span class="p">.</span><span class="nx">ajax</span><span class="p">.</span><span class="nx">calledWithMatch</span><span class="p">({</span> <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;/todo/42/items&quot;</span> <span class="p">}));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Karma (aka Testacular)</h3>

<p><a href="http://karma-runner.github.com/0.8/index.html">Karma</a> (anciennement appelé Testacular) est un lanceur de tests multi-navigateurs, tournant sur node.js. Il a été développé par l&#8217;équipe d&#8217;AngularJS (Google).
Il propose également des adaptateurs pour supporter différents frameworks de tests : Mocha, Jasmine, QUnit ou Angular Scenario.</p>

<h3>Chai.js</h3>

<p><img src="http://linsolas.github.com/images/chaijs.png" alt="Chaijs" /></p>

<p><a href="http://chaijs.com/">ChaiJS</a> est une toute petite librairie d&#8217;assertions. Elle propose 3 types d&#8217;assertions :</p>

<p>Le type <em>Assert</em> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">assert</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">assert</span><span class="p">.</span><span class="nx">typeOf</span><span class="p">(</span><span class="nx">foo</span><span class="p">,</span> <span class="s1">&#39;string&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">foo</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">assert</span><span class="p">.</span><span class="nx">lengthOf</span><span class="p">(</span><span class="nx">foo</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="nx">assert</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="nx">tea</span><span class="p">,</span> <span class="s1">&#39;favors&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">assert</span><span class="p">.</span><span class="nx">lengthOf</span><span class="p">(</span><span class="nx">tea</span><span class="p">.</span><span class="nx">flavors</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le type <em>Expect</em> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">expect</span> <span class="o">=</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">expect</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">expect</span><span class="p">(</span><span class="nx">foo</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span><span class="p">(</span><span class="s1">&#39;string&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">expect</span><span class="p">(</span><span class="nx">foo</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">expect</span><span class="p">(</span><span class="nx">foo</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">length</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="nx">expect</span><span class="p">(</span><span class="nx">tea</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;flavors&#39;</span><span class="p">).</span><span class="kd">with</span><span class="p">.</span><span class="nx">length</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ou encore le type du <em>Should</em> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">chai</span><span class="p">.</span><span class="nx">should</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">foo</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span><span class="p">(</span><span class="s1">&#39;string&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">foo</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">foo</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">length</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="nx">tea</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;flavors&#39;</span><span class="p">).</span><span class="kd">with</span><span class="p">.</span><span class="nx">length</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Mocha</h3>

<p><img src="http://linsolas.github.com/images/mocha.png" alt="Mocha" /></p>

<p><a href="http://visionmedia.github.com/mocha/">Mocha</a> est un framework de test, tourne sur Node.js ou dans un navigateur.
Il s&#8217;intègre parfaitement avec beaucoup d&#8217;autres choses : Jenkins, TeamCity, des outils comme chai.js.</p>

<h3>JSCover</h3>

<p><a href="http://tntim96.github.com/JSCover/">JSCover</a> (anciennement JsCoverage) permet de mesurer la couverture de code par les tests JS. Il offre également un export de type Cobertura, ce qui lui permet son intégration dans Jenkins (et a priori Sonar ?).</p>

<h3>Plato</h3>

<p><a href="http://jsoverson.github.com/plato/examples/jquery/">Plato</a> est un outil d&#8217;introspection des tests. Il donne ainsi un rapport détaillé du code JS, permet même d&#8217;estimer le nombre de bugs dans l&#8217;application :)
Il met également en détails les erreurs levées par JsLint.</p>

<p>Voilà une très bonne présentation pour commencer Devoxx France, avec beaucoup de beaux outils à tester. Peut-être même trop, les trois heures ont paru bien courtes :)</p>

<hr/>


<h2><a href="http://www.devoxx.com/display/FR13/Frontend+Live+Coding+++Tour+d%27horizon+de+l%27outillage+et+des+technos+web+d%27aujourd%27hui">Frontend live coding : tour d&#8217;horizon de l&#8217;outillage et des technos web d&#8217;aujourd&#8217;hui</a></h2>

<p><a href="http://www.parleys.com/#play/51561f64e4b0c779d78813f3">Vidéo Parleys</a></p>

<p><a href="http://www.devoxx.com/display/FR13/Frederic+Camblor">Frédéric Camblor</a> (<a href="https://twitter.com/fcamblor">@fcamblor</a>) nous propose un tour d&#8217;horizon des outils liés au développement web :</p>

<ul>
<li><strong>Yeoman</strong> / <strong>Grunt</strong> : orchestrateur des développements web ;</li>
<li><strong>Sass</strong> / <strong>Compass</strong> : surcouche à CSS permettant notamment de variabiliser les feuilles de style ;</li>
<li><strong>Bower</strong> : provisionneur de librairies JavaScript ;</li>
<li><strong>RequireJS</strong> : injecteur de dépendances JavaScript à la demande ;</li>
<li><strong>Handlebars</strong> : moteur de templating coté client ;</li>
<li><strong>BackboneJS</strong> : framework MVC qui permet d&#8217;améliorer la maintenabilité du code JavaScript ;</li>
<li>Un ensemble de tips de développement dans Chrome, dont vous ne soupçonnez peut-être pas l&#8217;existence.</li>
</ul>


<h3>Yeoman et Grunt</h3>

<p><img src="http://linsolas.github.com/images/yeoman.png" alt="Yeoman" /></p>

<p>Premier outil présenté par Frédéric, <a href="http://yeoman.io/">Yeoman</a>. C&#8217;est un ensemble d&#8217;outils pouvant jouer le rôle de <em>scaffolder</em>, c&#8217;est-à-dire qu&#8217;il va nous créer en un rien de temps une structure spécifique pour un projet, tout en forçant certaines bonnes pratiques (définition d&#8217;un cycle de vie pour l&#8217;application, exécution des tests, etc.). Quelque part, il y a pas mal de similitudes avec Maven ici.</p>

<p>Frédéric démarre par générer une structure adaptée à une <em>webapp</em>, via un générateur dédié. Il existe plusieurs autres générateurs, pour faire de l&#8217;Angular, du Testacular (enfin Karma), du Backbone, etc. La similitude avec les Maven archetype est saisissante ici. Donc une simple commande <code>yo webapp</code> permet de tout générer.</p>

<p>Une fois ceci généré, nous pouvons constater la présence d&#8217;un fichier <em>gruntfile.js</em> qui est utilisé par <a href="http://gruntjs.com/">Grunt</a> pour réaliser un certain nombre de tâches (&#8220;compilation&#8221;, tests, démarrage d&#8217;un serveur, etc.). Frédéric le compare là aussi à Maven ou Gradle. Dans les faits, je trouve plus que cela s&#8217;approche de Gradle et de son approche scriptée, mais bon. A en voir le contenu, cela est un peu cryptique dans un premier temps, mais Frédéric nous indique qu&#8217;il n&#8217;est guère nécessaire de s&#8217;y attarder. En effet, ça fonctionne, et c&#8217;est tout ce qu&#8217;on lui demande ! On pourra bien sûr décider de s&#8217;intéresser au contenu de ce fichier, si les besoins au sein du projet le nécessite.</p>

<h3>SASS</h3>

<p><img src="http://linsolas.github.com/images/sass-lang.png" alt="SASS" /></p>

<p><a href="http://sass-lang.com/">SASS</a>, à l&#8217;image de <a href="http://lesscss.org/">LESS</a> est une surcharge du langage CSS pour en offrir des améliorations. Parmi celles-ci, on notera surtout :</p>

<ul>
<li><code>@import</code> qui permet d&#8217;importer un autre fichier CSS, et donc de bien segmenter son code CSS.</li>
<li>La possibilité d&#8217;imbriquer les classes (le <em>nesting</em>), offrant ainsi une bien meilleure lisibilité de son code, tout en l&#8217;architecturant mieux.</li>
<li>Les variables, pratique pour éviter les redondances, et faciliter le refactoring.</li>
<li>Des fonctions arithmétiques simples (on pourra faire <code>$largeurPanneau + 10px</code> par exemple).</li>
<li>Des mixins, sortes de fonction permettant de regrouper sous un même bloc un code redondant.</li>
</ul>


<p>A noter qu&#8217;il existe un site, <a href="http://compass-style.org/">Compass</a> qui permet de disposer de nombreux mixins pour SASS.</p>

<h3>Bower</h3>

<p><a href="https://github.com/twitter/bower">Bower</a> est un module de gestion des dépendances, un peu à l&#8217;image de Maven. Le fichier <code>component.json</code>, que Frédéric avait généré via la commande <code>yo webapp</code>, est le descripteur des dépendances de notre projet web-app.
Il est possible d&#8217;exécuter quelques commandes avec <code>bower</code> :</p>

<ul>
<li><code>bower install</code> pour installer en local les dépendances définies pour le projet. A noter que contrairement à Maven qui utilise un <em>repository</em> commun à tous les projets, Bower copie localement, <strong>pour chaque projet</strong> la liste des dépendances. Un peu dommage !</li>
<li><code>bower search</code> recherche les dépendances présentes dans le <em>registry</em> Bower.</li>
<li><code>bower info XXX</code>  donne toutes les versions présentes pour la librairie spécifiée.</li>
</ul>


<p>Il est également possible d&#8217;enregistrer sa propre librairie dans le <em>registry</em> de Bower, via une commande (<code>bower register [mon package] [mon repo git]</code>). Attention, il ne semble pas y avoir beaucoup de contrôles, et la librairie est de suite visible à tout le monde !</p>

<p>Un point important, le <em>versioning</em> des dépendances hébergées sur Bower est assez strict, et respecte le <a href="http://semver.org/"><em>Semantic Versioning</em></a>. Pour faire simple, une version est généralement constituée de 3 chiffres (<code>x.y.z</code>), où nous avons la version majeure (<code>x</code>), la version mineure  (<code>y</code>) puis les bugfixes  (<code>z</code>). Cela nous permet d&#8217;obtenir une certaine flexibilité dans la définition des dépendances. Par exemple, si on définit une version <code>1.2.x</code>, cela signifie que l&#8217;on veut n&#8217;importe quelle version <code>1.2.*</code>, et que si une nouvelle version bugfixe apparait, alors Bower pourra l&#8217;utiliser directement.</p>

<h3>RequireJS</h3>

<p><img src="http://linsolas.github.com/images/requirejs.png" alt="Require.js" /></p>

<p>Frédéric parle maintenant de <a href="http://requirejs.org/">Require.js</a>, une librairie qui a l&#8217;avantage de pouvoir charger des fichiers JavaScript à la demande. On peut également y définir des dépendances (par exemple il faut la librairie <em>foo.js</em> puis <em>bar.js</em> avant d&#8217;exécuter mon code).</p>

<h3>Handlebars</h3>

<p><img src="http://linsolas.github.com/images/handlebars.png" alt="Handlebars" /></p>

<p>Il arrive fréquemment d&#8217;avoir besoin de recourir au <em>templating</em>, c&#8217;est-à-dire de placer de la donnée (généralement en format JSON) dans du code HTML (en particulier quand on doit itérer sur un ensemble d&#8217;éléments). Frédéric est parti pour utiliser <a href="http://handlebarsjs.com/">Handlebars</a>. Personnellement, j&#8217;ai plus l&#8217;habitude d&#8217;utiliser <a href="http://mustache.github.com/">Mustache.js</a>, mais les principes sont les mêmes.</p>

<h3>Backbone.js</h3>

<p><img src="http://linsolas.github.com/images/backbone.png" alt="Backbone.js" /></p>

<p>Pour de multiples raisons, on peut être amené à développer toute une partie de l&#8217;application côté client. Ainsi, au lieu de développer le coeur de l&#8217;application côté serveur et de n&#8217;envoyer que la partie graphique au client, nous y envoyons un framework JavaScript, ainsi que toute une application côté client : la partie modèle, la partie controlleur et la partie vue se retrouvent dès lors sur le navigateur. Frédéric opte pour <a href="http://backbonejs.org/">Backbone.js</a>, mais il existe aussi <a href="http://emberjs.com/">Ember.js</a>, ou le très à la mode <a href="http://angularjs.org/">Angular.js</a> de Google.
Un tel choix architectural n&#8217;est bien sûr pas à prendre à la légère, cela apporte certains avantages (rapidité, minimisation de l&#8217;utilisation de la bande passante, possibilité de faire fonctionner son application en mode déconnecté, etc.), mais il y a également des inconvénients, dont le principal à mon avis est la sécurité.</p>

<h3>Rivets.js</h3>

<p>Dernier choix de librairie de la session : <a href="http://rivetsjs.com/">Rivets.js</a> pour réaliser du <em>data-binding</em> bi-directionnel. Cela est nécessaire pour qu&#8217;une modification au niveau du modèle soit immédiatement répercutée côté DOM, et qu&#8217;une modification côté DOM soit répercutée côté modèle. Cette librairie s&#8217;intègre parfaitement à Backbone.js, mais aurait été tout à fait inutile avec Angular, car ce dernier intègre nativement cette fonctionnalité de <em>data-binding</em>.</p>

<p>Pour résumer, cette deuxième université a été très intéressante aussi, car elle a montré une <em>stack</em> complète d&#8217;outils et de librairies pour le développement efficace d&#8217;une application en JavaScript. Seul bémol, la partie tests qui n&#8217;a pas été abordée. Toutefois, Frédéric nous avait prévenu au début qu&#8217;il n&#8217;était pas à l&#8217;aise dans ce domaine. De plus, l&#8217;université du matin en avait fait son thème principal, et cela aurait été sans doute redondant. J&#8217;aurais quand même apprécié de savoir quelles librairies de tests s&#8217;adaptaient le mieux avec la <em>stack</em> choisie par Frédéric.</p>

<hr/>


<h2><a href="http://www.devoxx.com/display/FR13/3615+Cloud+Devoxx">3615 Cloud @ Devoxx</a></h2>

<p><img src="http://linsolas.github.com/images/devoxxfr-2013-minitel.jpg" alt="Le minitel, l'avenir de Maven ?" /></p>

<p>Voici une session complètement décalée. <a href="http://www.devoxx.com/display/FR13/Nicolas+Loof">Nicolas Loof</a> et <a href="http://www.devoxx.com/display/FR13/Laurent+Huet">Laurent Huet</a> nous proposent d&#8217;intéragir avec une instance CloudBees grâce à&#8230; un minitel ! Oui, le minitel des années 80. Et sans trucage, juste du bricolage.
Le montage est le suivant :</p>

<ul>
<li>Un bon vieux minitel sert de console : saisie des commandes et affichage (textuel bien entendu).</li>
<li>Ensuite, un assemblage électronique réalisé par Laurent pour le connecter avec un Raspberry Pi.</li>
<li>Un Raspberry Pi qui va s&#8217;occuper de la partie &#8220;intelligente&#8221; des opérations.</li>
<li>Un MacBook Pro (celui de Nicolas, dont l&#8217;écran a rendu l&#8217;âme la semaine d&#8217;avant, grâce à un geste malheureux d&#8217;un enfant) pour la connexion à Internet. C&#8217;est aussi le MBP qui affichera la vidéo d&#8217;une caméra qui filme l&#8217;écran du minitel (eh oui, difficile de brancher un cable de vidéoprojecteur sur un minitel).</li>
</ul>


<p>Durant la présentation, on nous explique le montage électronique, puis ils exécuteront les tâches suivantes :</p>

<ul>
<li>Afficher le status de quelques jobs sur CloudBees, puis interagir avec eux : stopper ou démarrer ces jobs.</li>
<li>Faire un <code>mvn package</code> ! (ils le lanceront en mode <code>offline</code> bien sûr :) ).</li>
<li>Faire un commit avec git.</li>
</ul>


<p>Bref, une session très agréable, bien que tout à fait inutile !</p>

<h2><a href="http://www.devoxx.com/display/FR13/Good+Bad+and+Ugly+Maven+-+a+puzzler+session">Good bad and ugly Maven - a puzzler session</a></h2>

<p><img src="http://linsolas.github.com/images/devoxxfr-2013-maven.jpg" alt="In Maven dependencies hell" /></p>

<p><a href="http://www.devoxx.com/display/FR13/Nicolas+Loof">Nicolas Loof</a> (encore lui), accompagné de son éternel ami <a href="http://www.devoxx.com/display/FR13/Arnaud+Heritier">Arnaud Héritier</a> nous ont proposé le jeu &#8221;<em>Qui veut gagner des millions</em>&#8221; mais à la sauce Maven. Au cours d&#8217;une série de 6 ou 7 questions, Nicolas présentait des situations plus ou moins compliquées avec Maven, souvent des problèmes de dépendances transitives avec des conflits de version. Arnaud, en bon candidat, devait donner la bonne réponse, avec parfois l&#8217;aide du public.</p>

<p>Dans une ambiance décontractée et sympathique, j&#8217;ai donc terminé la première journée de Devoxx, avant de me rendre au repas du soir des speakers.</p>

<h2>Conclusion</h2>

<p>Comme l&#8217;année dernière, la première journée a été très riche à Devoxx France. Celle-ci est généralement plus calme, car il y a moins de monde, les sessions sont plus longues, surtout quand on assiste à des universités. J&#8217;ai fait un choix très orienté sur JavaScript cette année, avec 6 heures de démo, de code et de tests. A vrai dire, le programme que j&#8217;avais initialement établi le matin était différent. Je comptais en effet aller d&#8217;abord suivre <a href="http://www.devoxx.com/display/FR13/Introduction+iOS6+pour+les+developpeurs+Java">l&#8217;introduction à iOS pour un développeur Java</a> puis le <a href="http://www.devoxx.com/display/FR13/AngularJS%2C+ou+le+futur+du+developpement+Web">développement sur AngularJS</a>, mais à ma grande déception il s&#8217;agissait d&#8217;universités et non de <em>Labs</em> (ou <em>Hands On</em>). Ne codant pas moi-même, je craignais de ne pas retenir grand chose pour iOS (je n&#8217;ai aucune connaissance dans ce langage), et je n&#8217;aurais sans doute pas appris grand chose de nouveau sur Angular.js, que j&#8217;ai déjà un peu manipulé.</p>

<p>Mon souhait pour Devoxx France 2014, ce serait que la conférence se déroule sur 4 jours :</p>

<ul>
<li>2 jours de Labs, <em>Hands On</em> et universités, mais avec une préférence pour les sessions on l&#8217;audience code;</li>
<li>2 jours de conférences.</li>
</ul>


<p>Sait-on jamais :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Du JavaScript propre ? Challenge Accepted]]></title>
    <link href="http://linsolas.github.com/blog/2013/03/21/du-javascript-propre-challenge-accepted/"/>
    <updated>2013-03-21T23:17:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2013/03/21/du-javascript-propre-challenge-accepted</id>
    <content type="html"><![CDATA[<p><img src="http://linsolas.github.com/images/affiche-conference.jpg" alt="Du JavaScript propre ? Challenge Accepted!"/></p>

<p>L&#8217;édition 2013 de <a href="http://www.devoxx.com/display/FR13/Accueil">Devoxx France</a> arrive à grands pas, le 27 mars c&#8217;est presque demain !
A nouveau, j&#8217;aurais la chance d&#8217;être speaker, cette fois-ci pour présenter, conjointement avec <a href="http://www.devoxx.com/display/FR13/Julien+Jakubowski">Julien Jakubowski</a>, <a href="http://www.devoxx.com/display/FR13/Du+Javascript+propre+++Challenge+Accepted"><em>Du JavaScript propre ? Challenge Accepted!</em></a></p>

<p>Le JavaScript est partout, et pour peu que vous souhaitiez faire un peu de web, il est incontournable. Mais fini le JavaScript de papy, celui que vous écriviez en 2003 pour bidouiller votre page web. On est aujourd&#8217;hui sur quelque chose de sérieux. Il est donc hors de question de continuer à bidouiller, et il faut savoir chouchouter son code JavaScript.</p>

<p>Nous aborderons dans un premier temps les principaux travers du développement en JavaScript, avec quelques petites surprises, puis nous rentrerons dans le vif du sujet : les astuces, les bonnes pratiques et les bons outils pour écrire du code JavaScript <strong>proprement</strong>. Au bout d&#8217;une heure, vous ne devriez plus avoir peur de vous lancer dans l&#8217;écriture de 100,000 lignes de code JavaScript !</p>

<p>Si vous êtes curieux des solutions que l&#8217;on va vous proposer, venez à la Seine B, vendredi matin à 10h40.</p>

<p>Rendez-vous à Devoxx !</p>

<p><strong>EDIT</strong> En attendant la vidéo sur le site de <a href="http://www.parleys.com">Parleys</a>, voici <a href="http://fr.slideshare.net/linsolas/java-script-devoxxfrance2013">les slides sur SlideShare</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conférencier à Devoxx France 2013]]></title>
    <link href="http://linsolas.github.com/blog/2013/02/21/conferencier-a-devoxx-france-2013/"/>
    <updated>2013-02-21T00:08:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2013/02/21/conferencier-a-devoxx-france-2013</id>
    <content type="html"><![CDATA[<p><img src="http://www.devoxx.com/download/attachments/6816022/DevoxxFR-2012-web-400-267.png"/></p>

<p><em>tl;dr</em> Je serais à nouveau présentateur pour la conférence Devoxx France 2013, et ça fait mon bonheur, surtout qu&#8217;il s&#8217;agit d&#8217;une conférence (oui, je fais une conférence dans une conférence, normal quoi) !</p>

<!-- more -->


<p>La conférence <a href="http://www.devoxx.com">Devoxx</a> est arrivée assez tard dans ma vie professionnelle. J&#8217;en avais entendu parler il y a environ 4 ou 5 ans, et j&#8217;avais eu envie d&#8217;y assister à plusieurs reprises, en vain.
Quand fin 2011 le comité Devoxx annonça qu&#8217;à partir de 2012 la conférence aurait sa <em>petite</em> soeur <strong>Devoxx France</strong>, il devenait hors de question pour moi de ne pas y assister. Et pour n&#8217;avoir aucun regrêt, j&#8217;avais même proposé deux sujets (un <em>Tools In Action</em> ainsi qu&#8217;un <em>Quickie</em>) au <em>CFP</em> (<em>Call for Papers</em>, ou en français <em>Appel à Orateur</em> ?). A ma grande surprise, les deux sujets ont été acceptés, et je me suis ainsi retrouvé à présenter ceci :</p>

<ul>
<li><a href="http://www.devoxx.com/display/FR12/Chouchoutez+votre+code+JavaScript">Chouchoutez votre code JavaScript</a>, où je montrais qu&#8217;industrialiser son développement JavaScript est aussi facile qu&#8217;en Java, et pour ne rien gâcher, avec les mêmes outils : Maven, Jenkins, Sonar.</li>
<li><a href="http://www.devoxx.com/display/FR12/TestNG%2C+parce+que+vos+tests+le+valent+bien">TestNG, parce que vos tests le valent bien</a>, un petit <em>Quickie</em> pour montrer les atouts de TestNG par rapport à JUnit.</li>
</ul>


<p>Ca a été un grand moment, et quand est venu le <em>CFP</em> pour Devoxx World (la conférence originelle, tenue à Anvers), je me suis dit que j&#8217;allais également y proposer des sujets. Au final, mon <em>Quickie</em> <a href="http://www.devoxx.com/display/DV12/Easy+Entity+Auditing+with+Hibernate+Envers">Easy Entity Auditing With Hibernate Envers</a> a été retenu. Parler en anglais n&#8217;est pas forcément chose aisée, et le format <em>Quickie</em> - 15 minutes - s&#8217;adaptait à merveille !</p>

<p>Et voilà que vient l&#8217;année 2013. Et donc les Devoxx. Cette année, en plus de Paris et Anvers, Londres s&#8217;est jointe à la fête. Mais pas question pour moi d&#8217;assister à DevoxxUK, Devoxx France restant la priorité (surtout que les deux conférences se chevauchent dans le calendrier).
Vu l&#8217;excitation que m&#8217;avait procuré mes présentations lors des Devoxx 2012, je voulais absolument y retourner comme orateur. Par manque de temps et d&#8217;inspiration, je n&#8217;ai finalement proposé qu&#8217;un seul sujet, une conférence (format de 50 minutes). Pari risqué, car c&#8217;est le <em>slot</em> le plus demandé. Il me semble qu&#8217;il y a eu environ 310 propositions pour une trentaine de places. Près de 90% seront donc refusées. Par chance, la mienne fut retenue, tout comme celle de <a href="http://julien.jakubowski.fr/">Julien Jakubowski</a> (architecte <a href="http://www.octo.com">OCTO</a> et fondateur du <a href="http://chtijug.org/">Chti&#8217;JUG</a>), <a href="http://www.devoxx.com/display/FR13/Du+Javascript+propre+++Challenge+Accepted+%21"><em>Du JavaScript propre ? Challenge Accepted</em></a>.
Etant donné la ressemblance de nos deux présentations, il a été décidé que nous présenterions tous les deux une conférence commune. C&#8217;est donc chose faite (enfin, on y travaille quoi).</p>

<p>Je ne vais pas dévoiler le contenu de la présentation, mais il s&#8217;agira de lister les principaux travers lorsque l&#8217;on développe en JavaScript, et surtout de montrer les moyens de code proprement.</p>

<p><em>Stay tuned</em>, et je l&#8217;espère que l&#8217;on se verra à la conférence Devoxx !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[brownbaglunch.fr]]></title>
    <link href="http://linsolas.github.com/blog/2013/02/20/brownbaglunch-dot-fr/"/>
    <updated>2013-02-20T23:12:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2013/02/20/brownbaglunch-dot-fr</id>
    <content type="html"><![CDATA[<p>Récemment, je vous ai dit qu&#8217;il fallait <a href="http://linsolas.github.com/blog/2013/02/09/lancez-vous-dans-les-brown-bag-lunches/">vous lancer dans les Brown Bag Lunch</a>. Je suis sûr que depuis, vous avez envie de vous y mettre, comme participant, ou pourquoi pas comme orateur !</p>

<p>Hé bien voilà un beau site tout neuf fait spécialement pour vous aider dans la démarche : <a href="http://www.brownbaglunch.fr/">http://www.brownbaglunch.fr/</a>.</p>

<p>Vous trouverez sur ce site la liste des <em>baggers</em> (présentateurs) français, avec leurs propositions de sessions, ainsi que des sites permettant d&#8217;accueillir des BBL.
Si vous souhaitez enrichir ce site, allez jeter un coup d&#8217;oeil à la <a href="https://github.com/nrichand/BrownBagLunch">page GitHub du site</a>.</p>

<p>Enfin, n&#8217;hésitez absolument pas à suivre le petit piou-piou <a href="https://twitter.com/bbl_fr">@bbl_fr</a> !</p>

<p>Allez, on s&#8217;appelle et on se fait <del>une bouffe</del> un BBL !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lancez-vous dans les Brown Bag Lunches]]></title>
    <link href="http://linsolas.github.com/blog/2013/02/09/lancez-vous-dans-les-brown-bag-lunches/"/>
    <updated>2013-02-09T23:00:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2013/02/09/lancez-vous-dans-les-brown-bag-lunches</id>
    <content type="html"><![CDATA[<p><img src="http://linsolas.github.com/images/Brown-Bag.png" alt="Brown Bag lunch"/></p>

<h2>Kezako ?</h2>

<p>Un <em>Brown Bag Lunch</em> c&#8217;est une présentation technique à l&#8217;heure du déjeuner. Le <em>brown bag</em> fait en effet référence à ce sac en carton marron que l&#8217;on utilise pour transporter son déjeuner sur son lieu de travail. L&#8217;idée est donc simple : une personne vient faire une présentation, pendant que l&#8217;assistance l&#8217;écoute en dégustant un bon sandwich (ça marche aussi avec une salade, d&#8217;ailleurs). On joint ainsi l&#8217;utile à l&#8217;agréable.</p>

<p><a href="https://twitter.com/dgageot">David Gageot</a>, en redevenant consultant indépendant, a décidé de se <a href="http://blog.javabien.net/2012/11/05/bbl/">lancer dans les BBL</a> au mois de janvier 2013. Profitant de l&#8217;occasion, je l&#8217;ai fait venir à la SGCIB, où il nous a proposé sa fameuse présentation &#8221;<em>Du Legacy au Cloud en moins d&#8217;une heure</em>&#8221;.</p>

<!-- more -->


<p><img src="http://linsolas.github.com/images/bbl-gageot.jpg" alt="David Gageot durant son BBL"/>
<em>David Gageot nous explique comment tester du code legacy</em></p>

<p>Le premier BBL organisé à la SGCIB aura finalement été celui d&#8217;un autre <a href="https://twitter.com/dadoonet">David, Pilato</a> venu faire une présentation d&#8217;<a href="http://www.elasticsearch.org">Elastic Search</a>, un moteur de recherche très puissant et extrêmement simple d&#8217;emploi.</p>

<p><img src="http://linsolas.github.com/images/bbl-pilato.jpg" alt="David Pilato durant son BBL"/>
<em>David Pilato nous montre son Elastic</em></p>

<p>Le 3e BBL devrait être celui de <a href="https://twitter.com/fsarradin">François Sarradin</a> pour nous montrer qu&#8217;en une heure, on peut développer un framework web en Scala (et, par la même occasion, chauffer la salle ;o) ).</p>

<p>A chaque fois, le public a apprécié la qualité des présentations, et de mon côté en tant qu&#8217;organisateur, j&#8217;apprécie de voir leur enthousiasme. Leur nombre ne cesse d&#8217;ailleurs de croitre, passant de 20 à 25, et peut-être même d&#8217;avantage pour les prochaines sessions.</p>

<h2>Et pourquoi ne pas proposer un BBL ?</h2>

<p>Que faut-il pour proposer un BBL ? Simplement un sujet, un peu sexy cela va sans dire. Proposer un sujet sur la maitrise des EJB 1.0, ce n&#8217;est guère attirant. Après, il faut trouver un endroit pour présenter. Moi, je peux vous proposer de venir à la SGCIB, il suffit de me contacter pour cela, après je m&#8217;occupe de l&#8217;organisation, de trouver une date ainsi que l&#8217;audience.
Pourquoi faire proposer un BBL ? En tant qu&#8217;orateur, cela a plusieurs avantages :</p>

<ul>
<li>Tout d&#8217;abord, cela vous permet de vous entrainer à parler en public face à un comité &#8220;relativement&#8221; restreint.</li>
<li>Ensuite, cela vous permet de rôder votre présentation, pour la perfectionner.</li>
<li>Cela vous fait également de la publicité, et permet de vous faire connaitre par d&#8217;autres personnes.</li>
<li>Enfin, parce que c&#8217;est fun et qu&#8217;un bon informaticien aime faire partager sa passion !</li>
</ul>


<p>Un BBL est aussi une occasion parfaite pour répéter une présentation avant de la présenter dans une conférence telle que <a href="http://www.devoxx.fr">Devoxx France</a>, <a href="http://www.mix-it.fr/">Mix-IT</a>, ou n&#8217;importe quel JUG en France (et <a href="http://www.touilleur-express.fr/2011/04/19/plus-de-17-java-user-group-en-france-debut-2011/">ils sont nombreux</a>).</p>

<p>Bref, lancez-vous dans l&#8217;aventure !</p>

<p>Et à défaut de sujet à proposer, pourquoi ne pas héberger vous-même un BBL ? Pour cela, il suffit d&#8217;avoir des locaux (si possible faciles d&#8217;accès, pour faciliter la venue des intervenants), d&#8217;avoir un public - il n&#8217;est pas nécessaire de faire des BBL avec 30 personnes, une demi douzaine peut déjà suffire - et de contacter les bonnes personnes. Twitter est sans doute une excellente porte d&#8217;entrée pour ça.</p>

<p>Icone par <a href="http://pica-ae.deviantart.com/">pica-ae</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devoxx 2012]]></title>
    <link href="http://linsolas.github.com/blog/2012/11/20/devoxx-2012/"/>
    <updated>2012-11-20T15:56:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2012/11/20/devoxx-2012</id>
    <content type="html"><![CDATA[<p>J&#8217;ai déjà parlé des présentations auxquelles j&#8217;ai assisté lors de la conférence Devoxx dans des précédents billets (<a href="http://linsolas.github.com/blog/2012/11/18/devoxx-2012-jour-1/">premier jour</a>, <a href="http://linsolas.github.com/blog/2012/11/20/devoxx-2012-jour-2/">le deuxième jour</a>, <a href="http://linsolas.github.com/blog/2012/11/20/devoxx-2012-jour-3/">le troisième jour</a> et <a href="http://linsolas.github.com/blog/2012/11/17/devoxx-2012-presentation-dhibernate-envers/">mon Quickie</a>). Cette fois-ci, j&#8217;aborderais les à-côtés.</p>

<!-- more -->


<h2>Pourquoi Devoxx ?</h2>

<p>J&#8217;ai dû entendre parler de la conférence Devoxx autour de 2009, et mon envie d&#8217;y participer n&#8217;est allée qu&#8217;en grandissant. Ce sera finalement l&#8217;édition française de Devoxx, en avril 2012, qui sera ma première participation. Mais l&#8217;édition française ne m&#8217;a pas rassasié, et je voulais absolument assister à l&#8217;édition originale. Deux sujets soumis, dont un retenu (&#8221;<a href="http://www.devoxx.com/display/DV12/Easy+Entity+Auditing+with+Hibernate+Envers"><em>Easy Entity Auditing with Hibernate Envers</em></a>&#8221;) plus tard, et zou, me voilà en Belgique !</p>

<p><img src="http://linsolas.github.com/images/Devoxx2012-Anvers.jpg" alt="La gare d'Anvers" title="La gare d'Anvers"/></p>

<p>Alors qu&#8217;est-ce que Devoxx ? Il s&#8217;agit de la deuxième conférence Java au monde, la première étant la Grand Messe d&#8217;Oracle, le <em>Java One</em> qui se tient à San Fransisco. Voyez ces chiffres : 5 jours de conférence, environ 3500 participants - tous les billets étaient vendus 1 mois avant, presque aussi bien que pour Lady Gaga :) - presque 200 conférenciers, des hectolitres de bière&#8230;</p>

<p>Niveau organisation, on voit qu&#8217;il s&#8217;agit de la 11e édition. Tout est bien rodé, il n&#8217;y a quasiment aucun accroc, les conférences s&#8217;enchainent avec une fluidité remarquable. Devoxx prennant place dans un complexe cinématographique, les salles sont plutôt grandes, de 200 à 900 places environ et les sièges sont vraiment confortables (peut-être même un peu trop, quand on a très peu dormi la veille :) ). Devoxx étant une conférence de geeks, il fallait bien des gadgets de geeks. Le premier, c&#8217;est le bracelet incorporant une puce NFC, permettant de s&#8217;authentifier, mais aussi de voter à la fin d&#8217;une session. D&#8217;ailleurs ce point m&#8217;a vraiment plu, je trouve cette idée géniale. Seul bémol, il aurait été appréciable pour le conférencier d&#8217;avoir sa note finale, histoire de savoir si son discours a convaincu ou non.</p>

<p><img src="http://linsolas.github.com/images/Devoxx2012-Badge.jpg" alt="Le badge Devoxx" title="Le badge Devoxx"/></p>

<p><img src="http://linsolas.github.com/images/Devoxx2012-Votes.jpg" alt="Les bornes de votes" title="Les bornes de votes"/></p>

<p>Ces bornes de votes sont gérées par des <a href="http://www.raspberrypi.org/">Raspberry Pi</a>, l&#8217;une des stars de Devoxx. Plusieurs sessions étaient consacrées à cette petite machine très accessible (autour de $25) et visiblement assez puissante. D&#8217;ailleurs, il y en avait aussi pour gérer les écrans affichant le descriptif de la conférence devant chacune des salles. Il y a eu aussi <a href="http://www.aldebaran-robotics.com/en/">le NAO</a>, un magnifique petit robot.</p>

<p><img src="http://linsolas.github.com/images/Devoxx2012-NAO.jpg" alt="NAO, le petit robot" title="NAO, le petit robot"/></p>

<p>Là, contrairement au Raspberry Pi, le joujou est <em>très</em> cher. En gros, si vous passez un test d&#8217;aptitude auprès d&#8217;Aldebaran Robotics (la concepteur français du robot), et que vous vous engagez à produire 2 applications par an, alors il ne vous en coûtera <em>que</em> 3000€ (H.T. bien entendu). Si vous voulez juste vous l&#8217;offrir pour Noël, comptez 4 fois plus :) Mais cela reste un bien joli jouet, et l&#8217;ouverture de la conférence (que j&#8217;ai ratée pour cause de grèves) a été faite par 5 NAOs qui ont dansé une petite chorégraphie. Stephan Janssen, le fondateur de Devoxx, a dit que s&#8217;ils étaient les Commodore 64 de la robotique, il fallait imaginer ce que nous aurons dans 5 ans ! Je suis assez d&#8217;accord sur ce point, il suffit de voir l&#8217;évolution de nos téléphones en 5 ou 10 ans (comparez le Nokia 3310 à un iPhone 5, Samsung Galaxy S3 ou un Nexus 4 :) ).</p>

<p>Allez, je finirais juste par une critique : les repas. Franchement, ils ne sont pas au niveau de l&#8217;organisation de la conférence. Le mercredi, un simple sandwich et un yaourt, le lendemain une petite salade (assez bonne cela dit), ça fait un peu <em>cheap</em> (et pour éviter que les affamés se jettent dessus, il faut badger avant de se servir). De même, lors de la pause de 4 heures, pas grand chose à se mettre sous la dent.</p>

<h2>Les thèmes</h2>

<p>En 2011, le <strong>Cloud</strong> et le <strong>HTML 5</strong> étaient des sujets très souvent abordés par les conférenciers. Désormais, ce sont des thèmes qui ne sont plus abordés directement, tant ils sont acceptés, intégrés. On ne conçoit plus de développer un site sans passer par du HTML 5, ni même de le déployer sans considérer la case du &#8220;Cloud&#8221;.
C&#8217;est un peu la même chose pour ce qui est des méthodologies et en particulier de l&#8217;<strong>agilité</strong>. Peu de sessions spécifiquement dédiées à ces sujets, mais ces thèmes sont régulièrement abordés par les conférenciers. Le métier de développeur, ainsi que la façon dont on l&#8217;exécute a aussi été abordé dans plusieurs speakers.</p>

<p>La <strong>sécurité</strong> a aussi beaucoup fait parlé d&#8217;elle, étant également l&#8217;un des sujets abordé par Tim Bray lors de la keynote de Google du jeudi.</p>

<p>Devoxx 2012 a parfaitement monté que Java n&#8217;est plus simplement focalisé sur le langage lui-même, mais dispose de tout un écosystème. Certes on a parlé du <strong>JDK8</strong>, avec les expressions lambdas, les closures. On a aussi abordé le <strong>JavaEE</strong> 7 et différentes JSR. Mais les langages gravitant autour de la JVM ont eu la part belle dans cette session du Devoxx, avec Scala, Groovy, Android, Ceylon&#8230;
Notons aussi une bonne présence de <strong>JavaFX</strong> dans les sessions, bien que ces dernières n&#8217;aient jamais fait salle comble d&#8217;après ce que j&#8217;ai entendu dire. Cette forte présence est sans doute à mettre en parallèle avec le fait qu&#8217;Oracle est l&#8217;un des deux sponsors platinium - avec Google. Visiblement, la nouvelle version de JavaFX semble apporter des choses intéressantes, mais à mon goût, elle arrive sans doute trop tard pour vraiment captiver les foules.
Peu présente l&#8217;année dernière, Adobe n&#8217;était même plus à Devoxx cette année, preuve s&#8217;il en est que la technologie Flash s&#8217;essoufle grandement&#8230;</p>

<p>Le web a eu aussi une part très importante dans le planning, en particulier de tout ce qui tourne autour de <strong>JavaScript</strong>. La démonstration d&#8217;AngularJS par les développeurs de Google a été l&#8217;un des gros succès cette année. On a eu également droit à une session parlant des tests du JavaScript, sur vert.x également. Je note d&#8217;ailleurs que le monde de Java et celui du JavaScript sont de plus en plus proches, avec toujours plus de frameworks ou librairies permettant de faire intéragir l&#8217;un avec l&#8217;autre (on peut ainsi exécuter des tests JavaScript écrits en Jasmine sur une JVM avec Maven). L&#8217;outillage autour de JavaScript s&#8217;améliore encore plus, permettant d&#8217;y mettre en oeuvre des pratiques courantes en Java comme le TDD, l&#8217;intégration continue, etc.</p>

<p>Autre thématique à ce Devoxx, qui disposait de son propre canal appelé le <em>Future<Devoxx></em>, était la <strong>robotique</strong>, avec les interactions avec le NAO ou les Raspberry Pi.</p>

<p>Au final, des sujets d&#8217;actualité, et assez variés. Je me demande ce que nous réserve les trois Devoxx de 2013 !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devoxx 2012 - Jour 3]]></title>
    <link href="http://linsolas.github.com/blog/2012/11/20/devoxx-2012-jour-3/"/>
    <updated>2012-11-20T14:19:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2012/11/20/devoxx-2012-jour-3</id>
    <content type="html"><![CDATA[<p>Et voilà, l&#8217;aventure Devoxx s&#8217;achève presque, avec ce 3e jour, ou plutôt demi-journée, car la conférence ferme ses portes à 13 heures. En arrivant le matin au Métropolis, on voit déjà que beaucoup de stands ont déjà plié bagage, l&#8217;ambiance est clairement plus calme.
Au programme pour moi : de l&#8217;Elastic Search, et le podcast des Cast Codeurs&#8230;</p>

<!-- more -->




<hr/>


<h2><a href="http://devoxx.com/display/DV12/Search%2C+the+Final+Frontier">Search, the Final Frontier</a></h2>

<p><img src="http://linsolas.github.com/images/Devoxx2012-ElasticSearch.jpg" alt="Shay Banon présente Elastic Search"/></p>

<p><a href="http://devoxx.com/display/DV12/Shay+Banon">Shay Banon</a>, le créateur d&#8217;Elastic Search, nous fait une démonstration live d&#8217;Elastic Search et de son API. Ici, point de slide, simplement 2 outils : un bloc note, rempli de commmand <em>curl</em>, et une terminal de commandes pour les exécuter (bon, ok, parfois un navigateur juste pour nous montrer l&#8217;état des noeuds d&#8217;Elastic Search) ! En utilisant <em>curl</em> (une commande utilisée ici pour faire des appels à l&#8217;API REST d&#8217;Elastic Search), Shay Banon nous montre comment il est possible d&#8217;intéragir avec son réseau Elastic Search et d&#8217;y exécuter différents types de recherche (stricte, phonétique, approximative, etc.).</p>

<p>Pas facile de retranscrire ici les idées présentées ici, mais j&#8217;espère que Shay Banon mettra à disposition les commandes qu&#8217;il a utilisé, afin de pouvoir se familiariser un peu plus avec Elastic Search !</p>

<hr/>


<h2><a href="http://devoxx.com/display/DV12/Les+Cast+Codeurs+Podcast">Les Cast Codeurs</a></h2>

<p><img src="http://linsolas.github.com/images/Devoxx2012-CastCodeurs.jpg" alt="Enregistrement du podcast des Cast Codeurs"/></p>

<p>Pour terminer en beauté ce Devoxx, rien ne vaut un enregistrement live du <a href="http://lescastcodeurs.com/">podcast des Cast Codeurs</a> (l&#8217;épisode devrait être disponible sous peu). Beaucoup de membres des Duchess France, ainsi que les habitués des Cast Codeurs (Emmanuel Bernard, Vincent Massol, Guillaume Laforge, Antonio Goncalves, Arnaud Héritier) sont au micro pour nous donner leur avis sur cette édition, pour parler des thèmes abordés par les conférenciers, évoquer les présentations marquantes, et plein d&#8217;autres choses. Bien entendu, tout se fait dans une très bonne ambiance, vous ne tarderez pas à le découvrir dès que le podcast deviendra disponible. Et pour clore cet enregistrement, les gars géniaux d&#8217;Atlassian nous ont offert un buffet bière - pizza, l&#8217;alimentation de base du développeur :)</p>

<p>Voilà, l&#8217;édition 2012 de Devoxx s&#8217;achève, il est temps de rentrer en France, avec un retour bien moins chaotique que l&#8217;aller, à voyager avec quelques personnes sympathiques dont Mathilde Lemée, Antonio Goncalves, ou encore José Paumard.</p>

<p>Allez, pour rester dans l&#8217;esprit Devoxx, aujourd&#8217;hui s&#8217;est ouverte <a href="https://cfp.devoxx.com/">la soumission des sujets pour Devoxx France et Devoxx UK</a> (CFP, <em>Call For Paper</em>), et en moins d&#8217;une demi-heure, déjà 5 sujets ont été soumis ! Ne tardez pas trop, le CFP ferme fin janvier&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devoxx 2012 - Jour 2]]></title>
    <link href="http://linsolas.github.com/blog/2012/11/20/devoxx-2012-jour-2/"/>
    <updated>2012-11-20T08:58:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2012/11/20/devoxx-2012-jour-2</id>
    <content type="html"><![CDATA[<p>Après <a href="http://linsolas.github.com/blog/2012/11/18/devoxx-2012-jour-1/">une première journée bien remplie</a>, place à la deuxième journée, qui s&#8217;annonce très chargée elle aussi&#8230;</p>

<!-- more -->


<h2>&#8220;Annonce&#8221; JBoss</h2>

<p>La journée commence par 2 sessions plénières. Tout d&#8217;abord, une &#8220;annonce&#8221; par JBoss. Voilà un exemple parfait d&#8217;annonce ratée. Dans les faits, JBoss veut renommer son serveur d&#8217;applications (JBoss AS) et nous demande donc de <a href="http://www.jboss.org/vote">voter</a> pour notre préférence, parmi les noms suivants :</p>

<ul>
<li>BaseJump</li>
<li>WildFly</li>
<li>jBeret</li>
<li>Petasos</li>
<li>Jocron</li>
</ul>


<p>Personnellement, je ne les trouve pas terrible, le 4e est carrément affreux (du moins en français). Bref, on s&#8217;ennuie. Le bon côté des choses, c&#8217;est que cela ne dure que 10 minutes. Place à Google !</p>

<h2>Google, Life online</h2>

<p>Durant environ une heure, nous avons un discours de <a href="http://www.devoxx.com/display/DV12/Tim+Bray">Tim Bray</a> qui a parlé de la vie en ligne (<em>Life online</em>), ainsi que quelques démonstrations - plus commerciales que techniques - de certains produits de Google.
Tim Bray a donc abordé le sujet de la vie en ligne, en insistant particulièrement sur un point : la sécurité. Premièrement, il est absolument indispensable de mettre en place le HTTPS sur son site, car il est de notre responsabilité de sécuriser la connexion avec nos utilisateurs. Certes cela coûte un peu d&#8217;argent (la génération des certificats étant payante), mais cela est simplement vital. Un autre message de Tim Bray concernait les mots de passe. Utiliser un même mot de passe pour plusieurs sites est généralement une mauvaise idée, on l&#8217;a vu récément avec le piratage de LinkedIn, laissant filer dans la nature des millions de mot de passes. Il insiste aussi sur l&#8217;intérêt d&#8217;utiliser les authentifications par tiers, comme avec Google, Twitter ou Facebook, bien que tous ces boutons enlaidissent un peu les pages de connexions&#8230;
Dernier point important, la vérification en deux étapes, que tout le monde devrait adopter pour son compte Google. Le principe est d&#8217;utiliser une 2e méthode d&#8217;authentification en plus du mot de passe, à savoir un code reçu par texto pour se logguer. Si cette opération peut paraitre un peu contraignante, il n&#8217;en est rien en réalité, et cela peut vous éviter de bien graves désagréments, comme cela a pu arriver <a href="http://www.wired.com/gadgetlab/2012/08/apple-amazon-mat-honan-hacking/all/">à certaines personnes</a>.</p>

<p>Bref, un discours pas forcément joyeux, mais plein de remarques de bon sens. La suite sera un peu plus légère, avec entre autre la présentation des nouveaux produits de Google, en particulier <a href="http://www.google.fr/nexus/4/">le téléphone Nexus 4</a>, <a href="http://www.google.fr/nexus/10/">la tablette Nexus 10</a>, ainsi que <a href="http://www.android.com/">la dernière version d&#8217;Android, Jelly Bean 4.2</a>. De bien belles machines, présentées par <a href="http://www.devoxx.com/display/DV12/Chet+Haase">Chet Haase</a> ainsi que <a href="http://www.android.com/">Romain Guy</a>, bien que le discours paraissait plutôt commercial&#8230;</p>

<p><img src="http://linsolas.github.com/images/Devoxx2012-Google.JPG" alt="Présentation de la dernière version d'Android sur le Nexus 10 par Romain Guy"/></p>

<p>Il a été aussi question des nouveautés de Google App Engine, comme l&#8217;intégration de Jenkins grâce à Cloudbees, ainsi que d&#8217;une fonctionnalité très intéressante, le <a href="https://developers.google.com/appengine/docs/adminconsole/trafficsplitting">Traffic Splitting</a>. L&#8217;idée est de dire à GAE de rediriger une partie du trafic de son site (exprimée en %) vers une autre version de son application, pour par exemple, permettre à quelques utilisateurs de tester la toute dernière version de son site. Simple et pratique !</p>

<hr/>


<h2><a href="http://www.devoxx.com/display/DV12/Bean+Validation+1.1++it%27s+not+Beansland+anymore">Bean Validation 1.1: It&#8217;s not beansland anymore</a></h2>

<p><img src="http://linsolas.github.com/images/Devoxx2012-Validation.JPG" alt="Bean Validation"/></p>

<p>Allons jeter un oeil maintenant sur la présentation d&#8217;<a href="http://www.devoxx.com/display/DV12/Emmanuel+Bernard">Emmanuel Bernard</a> sur la nouvelle version de Bean Validation (<a href="http://jcp.org/en/jsr/detail?id=349">JSR 349</a>).</p>

<h3>Rappels sur la version 1.0</h3>

<p>Tout d&#8217;abord, un petit rappel de la version 1.0, qui a défini les bases de la validation, son standard. Des frameworks comme JPA, JSF, GWT, etc. l&#8217;utilisent déjà, ce qui est une bonne chose.
Des contraintes existent déjà, comme <code>@NotNull</code>, <code>@Size</code>, etc. Il est toutefois possible de créer ses propres contraintes, tel que <code>@ZipCode</code>.
La notion de groupes avait aussi été introduite : validation partielle, ordre des contraintes. On définit un groupe comme ceci :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@NotNull</span><span class="o">(</span><span class="n">group</span><span class="o">=</span><span class="n">BasicPostal</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="n">String</span> <span class="n">street</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@ZipCode</span><span class="o">(</span><span class="n">group</span> <span class="o">=</span> <span class="n">BasicPostal</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="n">String</span> <span class="n">zipCode</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le groupe étant une interface, ce qui plus facile à en contrôler la validité d&#8217;un point de vue du code qu&#8217;une chaine de caractères.</p>

<h3>Bean Validation 1.1</h3>

<p>Les annotations de Bean Validation peuvent être aussi utilisées pour valider des paramètres d&#8217;une fonction, d&#8217;un constructeur, comme par exemple ici :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">User</span> <span class="nf">createUser</span><span class="o">(</span><span class="nd">@NotNull</span> <span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="nd">@Past</span> <span class="n">Date</span> <span class="n">birthDate</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mais il est aussi possible de demander de valider un objet, voire un graphe d&#8217;objets grâce à <code>@Valid</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">Order</span> <span class="nf">createOrder</span><span class="o">(...,</span> <span class="nd">@Valid</span> <span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si l&#8217;on souhaite également valider la valeur retournée par une méthode, alors on ajoutera simplement l&#8217;annotation au niveau de la méthode elle-même.</p>

<p>Emmanuel Bernard vient à poser une question à l&#8217;assemblée. Doit-on valider les getters? La majorité de la salle vote &#8220;Non&#8221;, considérant ainsi que les getters sont de simples accesseurs à une propriété, et qu&#8217;ils ne doivent donc pas lever d&#8217;exception si par exemple le champ à retourner vaut <code>null</code>. Le problème principal si l&#8217;on veut valider ces getters est que cela pourrait casser du code existant, car l&#8217;interprétation d&#8217;une violation peut être différente selon les frameworks.</p>

<p>Autre nouveauté de la version 1.1 est l&#8217;introduction des conversions de groupes. Sous ce titre un peu barbare se cache la fonctionnalité qui permet d&#8217;altérer un groupe de validation lors du <em>cascading</em> de validation, c&#8217;est-à-dire que potentiellement, certaines règles de validation pourront être activées en fonction de la valeur de certains champs. Par exemple, on peut disposer de 2 types de validation d&#8217;une adresse : une validation simple et une validation complète, le choix de la validation étant fait selon certains critères du contexte.</p>

<p>Bean Validation dispose également d&#8217;une meilleure intégration avec JAX-RS, JPA, CDI, etc. JAXB ne semble hélas pas faire partie du lot, les délais des JSR étant trop courts pour intégrer les nouveautés de la validation à JAXB.</p>

<p>Question timing, <em>normalement</em>, la release du JCP est prévue pour mi-mars. Hibernate Validator 5 alpha 1 vient de sortir, donc si vous souhaitez y jeter un oeil, allez-y !</p>

<hr/>


<p>Il est l&#8217;heure de la pause déjeuner, je n&#8217;assiste pas aux sessions de midi, la salle où je voulais aller étant pleine. Un petit détour par Code Story, puis viennent les Quickies. Le premier, c&#8217;est <a href="http://www.devoxx.com/display/DV12/From+Zero+to+JavaEE+in+15+Minutes+%28or+Less%29">From Zero to JavaEE in 15 minutes</a>, présentée par <a href="http://www.devoxx.com/display/DV12/Koen+Aers">Koean Aers</a> ainsi qu&#8217;un autre collègue de JBoss. La démonstration consiste à utiliser JBoss Forge pour générer une application JSF à partir uniquement d&#8217;un schéma de base de données. L&#8217;application reste bien entendu basique, essentiellement destinée à des opérations de CRUD. Je suis moyennement convaincu, certes ça marche, mais j&#8217;ai déjà vu un peu mieux comme solutions, tel que <a href="http://www.jaxio.com/celerio.html">Celerio</a>, voire même Play! (qui ne génère certes pas le code depuis la base - quoique - mais qui dispose de toutes les briques pour faire du CRUD facilement).</p>

<p>Le Quickie suivant était le mien, sur Hibernate Envers. Vous pouvez lire tout le détail dans <a href="http://linsolas.github.com/blog/2012/11/17/devoxx-2012-presentation-dhibernate-envers/">un billet précédent</a>.</p>

<hr/>


<h2><a href="http://devoxx.com/pages/viewpage.action?pageId=6391754">Javascript unit testing and build integration</a>&lt;</h2>

<p><a href="http://devoxx.com/display/DV12/Wouter+Groeneveld">Wouter Groeneveld</a> nous parle des test en Javascript. A vrai dire, certaines parties m&#8217;ont rappelé <a href="http://www.devoxx.com/display/FR12/Chouchoutez+votre+code+JavaScript">ma session à Devoxx France</a>, la mienne ayant toutefois été plus axée sur la partie industrialisation, avec l&#8217;intégration de Sonar dans l&#8217;analyse du code. Wouter va plus dans le détail, en montrant les forces et les faiblesses des solutions proposées.</p>

<p>Il part donc sur l&#8217;utilisation de <a href="http://pivotal.github.com/jasmine/">Jasmine</a> pour réaliser des tests du code Javascript, en montrant quelques exemples de code. Puis il en vient à la partie visuelle de son application. Comment la tester ? Tout d&#8217;abord, il opte pour Selenium, mais la relative lenteur et le besoin d&#8217;un navigateur sont des inconvénients assez importants dès que l&#8217;on a une grosse base de tests. Après avoir montré un runner spécifique, il parle de <a href="http://phantomjs.org/">PhantomJS</a>, un <em>headless browser</em> basé sur WebKit et offrant une API pour interagir avec le JavaScript. Du coup, plus besoin de &#8220;vrai&#8221; navigateur pour exécuter et tester son code JavaScript. Les tests s&#8217;exécutent très rapidement, le seul problème étant qu&#8217;aucun pont avec la JVM n&#8217;existe actuellement (les tests sont exécutés via Ant), et donc il n&#8217;y a pas vraiment d&#8217;intégration avec l&#8217;IDE ou un serveur d&#8217;intégration continue. Cela rend également le déboggage assez difficile.</p>

<hr/>


<h2><a href="http://devoxx.com/display/DV12/Code+but+not+as+we+know+it+-+Infrastructure+as+code">Code but not as we know it - Infrastructure as code</a></h2></h2>

<p><a href="http://devoxx.com/display/DV12/Patrick+Debois">Patrick Debois</a> nous fait un état des lieux assez complet sur la gestion de la configuration, en parlant des principales solutions existantes aujourd&#8217;hui, à savoir :</p>

<ul>
<li><a href="http://cfengine.com/">CFEngine</a></li>
<li><a href="http://puppetlabs.com/">Puppet</a></li>
<li><a href="http://wiki.opscode.com/display/chef/Home">Chef</a></li>
<li><a href="http://palletops.com/">Pallet</a></li>
<li><a href="http://ansible.cc/">Ansible</a></li>
</ul>


<p>Il faut cependant dire qu&#8217;il insistera avant tout sur les deux plus connus, Puppet et Chef.
En guise d&#8217;introduction, un rappel de pourquoi ces solutions existent, ainsi que des principes élémentaires, comme par exemple l&#8217;idempotence, qui stipule que si je relance le même &#8220;code&#8221;, jalors e dois retrouver le même état à chaque fois. Ensuite, une explication rapide mais claire sur le langage utilisé par ces outils, ainsi que quelques notions importantes à savoir.
Par exemple, Puppet utilise des <em>manifests</em> (fichiers .pp), et fait une compilation du catalogue avant son exécution, alors que Chef, qui utilise des <em>recipes</em> (fichiers .rb), va réaliser une exécution linéaire des scripts.</p>

<p>Ensuite, Patrick Debois nous parle d&#8217;outils, d&#8217;éditeurs, en nous citant quelques solutions :</p>

<ul>
<li>Lexers</li>
<li>vi(m)</li>
<li>Geppetto, un plugin Eclipse</li>
<li>JetBrains Rubymine support for Puppet</li>
</ul>


<p>Grâce à tout cela, ce domaine se rapproche de plus en plus à notre domaine de prédilection, le développement logiciel. On voit apparaitre des notions de règle de &#8220;codage&#8221;, de patterns ou d&#8217;anti-patterns, voire même de tests et de déboggage (bien que cela est encore très restreint).
C&#8217;est un sujet qui ne tient bien évidemment pas en une heure, mais cette session a le mérite d&#8217;exposer clairement la situation actuelle en la matière. A approfondir !</p>

<hr/>


<h2><a href="http://www.devoxx.com/display/DV12/Re-imagining+the+browser+with+AngularJS">Re-imagining the browser with AngularJS</a></h2>

<p>La conférence sur <a href="http://angularjs.org/">AngularJS</a> présentée par <a href="http://www.devoxx.com/display/DV12/Igor+Minar">Igor Minar</a> et <a href="http://www.devoxx.com/display/DV12/Misko+Hevery">Miško Hevery</a> est, de l&#8217;avis d&#8217;une majorité des spectateurs, LA conférence qu&#8217;il fallait voir à Devoxx. Elle était quasi-parfaite sur tous les plans : 2 speakers excellents et parfaitement complémentaires, présentant un numéro sans faille, sur une technologie très attrayante. Bref, du 10/10.</p>

<p>Cette conférence m&#8217;a vraiment beaucoup plu, et je vais essayer de faire un billet spécifiquement sur elle d&#8217;ici quelques jours. En attendant, les slides <a href="https://github.com/strangeloop/strangeloop2012/blob/master/slides/sessions/Hevery-Re-imagining%20the%20browser%20with%20AngularJS.pdf">sont visibles sur Internet</a>, bien qu&#8217;une bonne partie de la présentation était une démo&#8230;</p>

<hr/>


<h2><a href="http://devoxx.com/display/DV12/Progressing+Parleys.com%2C+a+Java+based+e-Learning+platform">Progressing Parleys</a></h2>

<p>Pour la dernière conférence de la journée, je choisis de m&#8217;intéresser à l&#8217;évolution de Parleys. <a href="http://www.parleys.com/">Parleys.com</a> est un site hébergeant de nombreuses vidéos liées à l&#8217;informatique, ainsi que toutes les sessions des Devoxx, et certains JUG (<em>Java Users Group</em>). <a href="http://devoxx.com/display/DV12/Stephan+Janssen">Stephan Janssen</a> l&#8217;a créé en 2006. Il est également le fondateur du JUG Belge (BeJUG), et, excusez du peu, fondateur également de Devoxx (Javapolis à l&#8217;origine).
Bref, lors de cette session, Stephan Janssen, <a href="http://devoxx.com/display/DV12/Jo+Voordeckers">Jo Voordeckers</a> et <a href="http://devoxx.com/display/DV12/Benjamin+Dobler">Benjamin Dobler</a>, nous parlent de la prochaine version de Parleys, disponible au plus tard pour Devoxx France. La stack technique est intéressante, comme on peut le voir ici :</p>

<p><img src="http://linsolas.github.com/images/Devoxx2012-Parleys.JPG"/></p>

<p>Et encore, cela ne semble pas tout, puisqu&#8217;ils utilisent également ElasticSearch&#8230;
Le but final est de proposer une application plus riche, et moins limitée pour les solutions mobiles. En effet, le lecteur actuel étant basé sur Flash, il n&#8217;est ainsi pas compatible avec les iPhones ou les iPads. L&#8217;utilisation d&#8217;HTML 5 semble avoir été poussée loin, en particulier pour la partie d&#8217;édition des vidéos. L&#8217;autre objectif de cette nouvelle version de Parleys est justement de simplifier l&#8217;édition de ces vidéos, afin de les rendre accessibles le plus rapidement possible après leur enregistrement. Pour Devoxx France, il avait fallu attendre plusieurs semaines pour voir les vidéos des sessions disponibles sur Parleys. L&#8217;équipe veut ainsi réduire ce délai à seulement quelques jours ! En plus de cela, si j&#8217;ai bien compris, il est envisagé que les personnes regardant les vidéos puissent les éditer, par exemple s&#8217;il y a un décalage entre la vidéo et les slides diffusés en parallèle.</p>

<p>Une session intéressante, où le choix techniques sont bien expliqués, et qui donne envie d&#8217;avoir en main cette nouvelle version de Parleys !</p>

<hr/>


<p>La deuxième journée de Devoxx 2012 se termine sur cette session, avant d&#8217;aller voir Skyfall, le dernier James Bond, dont la diffusion nous était offerte par Devoxx (ainsi que les popcorns :) ). D&#8217;ailleurs, j&#8217;ai vraiment beaucoup aimé ce James Bond. Beaucoup de personnes sont allés ensuite à la soirée au NoX, une boite de nuit proche du Métropolis. J&#8217;ai fait mon petit joueur en retournant à l&#8217;hôtel vers 23h30, encore un peu fatigué de la veille&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devoxx 2012 - Jour 1]]></title>
    <link href="http://linsolas.github.com/blog/2012/11/18/devoxx-2012-jour-1/"/>
    <updated>2012-11-18T14:14:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2012/11/18/devoxx-2012-jour-1</id>
    <content type="html"><![CDATA[<p><img src="http://linsolas.github.com/images/Devoxx2012_WeCodeInPeace.gif" alt="Devoxx 2012"/></p>

<p>2012 est une année très Devoxx pour moi : participation au Devoxx France pour sa première édition, et première participation pour moi au &#8220;Devoxx World&#8221;, pour sa 11e édition. Et pour courronner le tout, je suis orateur les 2 fois.</p>

<p>Si Devoxx World se déroule sur 5 jours, je ne suis présent qu&#8217;aux 3 derniers, journées des conférences, Quickies et autres BOF.
Mercredi matin, 6h. Les choses ne commencent pas bien. Une grève en Belgique (eh oui, ce n&#8217;est pas une spécificité française :) ) rend les choses plus compliquées que prévu et notre train, après avoir été retardé puis annulé, fini par partir quand même. Je passe toutefois un très bon moment dans le Thalys à parler avec David Pilato, directeur technique d&#8217;<a href="http://www.ideotechnologies.com/">Ideo Technologies</a>. Bref, nous arrivons finalement au Metropolis vers 11h30, ce qui nous a fait raté la Keynote. La principale annonce, c&#8217;est que la famille Devoxx s&#8217;agrandit ! En 2011, il y avait 1 Devoxx, à Anvers. 2012 a vu l&#8217;arrivée de Devoxx France en avril. 2013 sera donc l&#8217;année de la première session de Devoxx UK, qui se tiendra les 26 et 27 mars prochains, suivi par Devoxx France, qui se tiendra au même lieu et au même format (3 jours) qu&#8217;en 2012. Le mercredi 27 mars sera le dernier jour de Devoxx UK, mais aussi le premier de Devoxx France. Les organisateurs espèrent ainsi attirer à Paris des speakers américains, qui en profiteraient pour participer aux deux conférences. Espérons ainsi que les speakers de Google viendront présenter AngularJS à Devoxx France. Je reviendrais sur ce sujet plus tard&#8230;</p>

<p>En attendant, voyons les conférences auxquelles j&#8217;ai assisté pour ce premier jour de Devoxx&#8230;</p>

<!-- more -->


<h2><a href="http://www.devoxx.com/display/DV12/7+Things++How+to+make+good+teams+great">7 things: How to make good teams great</a></h2>

<p><img src="http://linsolas.github.com/images/Devoxx-2012-7thing.JPG" alt="7 things to make a good team great"/></p>

<p><a href="http://www.devoxx.com/display/DV12/Sven+Peters">Sven Peters</a>, d&#8217;Atlassian, nous donne 7 conseils pour qu&#8217;une bonne équipe devienne une excellente équipe. Pour chaque conseil, il donne également une note sur 5 pour la faisabilité, ainsi qu&#8217;une autre sur l&#8217;<em>awesomeness</em>.</p>

<p><strong>1. Flowtime</strong> : généralement, on dit que le bureau individuel est plus adapté à la performance, car on est ainsi moins sujet aux perturbations des autres personnes, qui nous dérange à tout moment. Pourtant, chez Atlassian, c&#8217;est bel et bien l&#8217;open space qui a été privilégié. Et ça marche. Il suffit d&#8217;y inclure quelques règles. Par exemple, durant les premières heures de l&#8217;après-midi, interdiction de déranger les gens. Si on a besoin d&#8217;aide sur un problème précis, alors une personne dédiée est chargée d&#8217;y répondre. Bien entendu, cette personne n&#8217;est jamais la même !
Note: <em>4/5</em> et <em>2/5</em>.</p>

<p><strong>2. Feed your brain</strong> : le développement informatique a cette particularité qu&#8217;il est <em>nécessaire</em> d&#8217;apprendre en permanence. Certes, on peut apprendre par soi-même, mais c&#8217;est quand même plus fun de le faire à plusieurs. Sven propose quelques idées à mettre en place durant ses pauses déjeuner : session de codage, histoire d&#8217;utiliser un nouveau langage, un nouveau framework, ou simplement apprendre à gérer telle ou telle situation. Le &#8221;<em>Brown Bag Lunch</em>&#8221; est aussi une idée intéressante, où les gens apportent à manger pour suivre une petite session présentée par quelqu&#8217;un. D&#8217;ailleurs <a href="http://blog.javabien.net/2012/11/05/bbl/">David Gageot se propose de le faire chez vous</a> ! Dernière idée : pourquoi ne pas regarder une conférence sur Parleys pendant l&#8217;heure du déjeuner ? Cela permettra peut-être aussi de faire connaître Devoxx à vos collègues !
Note: <em>5/5</em> et <em>2/5</em>.</p>

<p><strong>3. Say &#8220;well done&#8221;</strong> : savoir qu&#8217;on fait du bon boulot, c&#8217;est bien. Que d&#8217;autres nous le disent, c&#8217;est encore mieux. Il faut savoir (ré)apprendre à féliciter les gens pour leurs réalisations, mais il faut que cela se fasse facilement (nul besoin de faire une soirée pour fêter le million de revenu, ou ce genre de chose un peu pompeux et assez froid), n&#8217;importe quand, et par n&#8217;importe qui.
Note: <em>2/5</em> et <em>3/5</em>.</p>

<p><strong>4. Report robot</strong> : les données, on en a plein, de toutes sortes. Il faut savoir les agréger, mais aussi les analyser, en faire des rapports pertinents (tant qu&#8217;à faire dynamiques) et les rendre aussi facilement accessibles que possible. On rejoint ici les idées d&#8217;<em>Extreme Feedback</em>, où un écran va afficher par exemple l&#8217;état des builds dans l&#8217;usine logicielle, où encore le traffic en live de son site web.
Note: <em>2/5</em> et <em>4/5</em>.</p>

<p><strong>5. Eat your own dog food</strong> : quoi de mieux que de tester soi-même son application pour en connaître les forces et les faiblesses ? Être soi même les alpha-testeurs, il n&#8217;y a rien de mieux. Et tant qu&#8217;à faire, autant le faire tester par tout le monde : les développeurs, les chefs, les secretaires, etc. Bien entendu, la faisabilité d&#8217;une telle approche n&#8217;est pas toujours facile, selon le type de produits sur lesquels on travaille. C&#8217;est sans doute plus facile pour Atlassian, qui développe des outils utilisés - en partie - par des développeurs. Le contexte se prête donc parfaitement ici, ce qui n&#8217;est pas toujours le cas.
Note: <em>2/5</em> et <em>5/5</em>.</p>

<p><strong>6. Do a special day</strong> : il est évident que pour un développeur, écrire de la documentation, ce n&#8217;est pas sa tasse de thé (enfin, son mug de café dirais-je plutôt). Toutefois, on pourrait organiser des journées spéciales (ou des demi-journées, selon le thème) dédiées à une thématique donnée. Pour que cela marche, il faut bien entendu préparer le terrain, favoriser l&#8217;environnement à la tâche donnée. Pour reprendre l&#8217;idée de la journée dédiée à l&#8217;écriture de la documentation, on peut regrouper l&#8217;équipe dans une salle ou un open-space, donner des rôles de relecteurs, etc. pour améliorer l&#8217;efficacité de l&#8217;équipe. Il y a bien entendu d&#8217;autres thématiques envisageables, comme le &#8221;<em>Focus on one task</em>&#8221;, &#8221;<em>Blitz Testing</em>&#8221;, &#8221;<em>Clean up day</em>&#8221;, etc.
Note: <em>5/5</em> et <em>3/5</em>.</p>

<p><strong>7. Experimentation time</strong> : le fameux &#8221;<em>20% time</em>&#8221;, popularisé en son temps par Google. Le principe : laisser au développeur 20% de son temps à des sujets libres, pour développer ce qu&#8217;il veut, apprendre une nouvelle technologie, etc. On peut aussi imaginer laisser ce temps pour développer des fonctionnalités dont on a envie de voir sur l&#8217;application, ce qui profite à la fois au projet et au développeur. Toutefois, c&#8217;est souvent un principe difficile à mettre en place au sein d&#8217;une société, et souvent ce temps imparti est loin d&#8217;atteindre les 20%, à cause de différents types de conflits&#8230;
Note: <em>2-4/5</em> et <em>5/5</em>.</p>

<p>Voilà quelques conseils de bon sens, et comme le dit Sven, il <strong>faut</strong> essayer! Certes des fois on échouera, mais il ne faut pas être idiot, et anticiper tant que possible ces situations. Bref, <em>be different</em>.</p>

<p>A noter que sa présentation est <a href="http://fr.slideshare.net/svenpeters/how-to-make-good-teams-great">disponible sur SlideShare</a>.</p>

<hr/>


<h2><a href="http://www.devoxx.com/display/DV12/The+Future+of+Software+Development+Process+Methodology+Effectiveness+%28Part+1+2%29">The Future of Software Development Process Methodology Effectiveness</a></h2>

<p><img src="http://linsolas.github.com/images/Devoxx2012-Processes.JPG" alt="Future of processes"/></p>

<p><a href="http://www.devoxx.com/display/DV12/Chet+Haase">Chet Haase</a>, de Google, est un orateur formidable. Cette session (ainsi que les autres sur Android), le prouve bien. Ce double-quickie a tellement eu de succès que les organisateurs lui ont demandé de le rejouer jeudi soir, en le filmant pour qu&#8217;il soit disponible sur Parleys.
Durant son talk, il nous a présenté des &#8220;nouvelles&#8221; méthodologies de développement logicielles, basées sur des existantes. Difficile de retranscrire ici l&#8217;esprit de la session, mais en gros, voici quelques idées qu&#8217;il a présenté, ce qui devrait vous donner une idée du ton de son quickie :</p>

<ul>
<li><strong>MDD</strong> pour <em>Metrics Driven Development</em>, qui dit que plus nous avons de données, de métriques, plus la qualité est au rendez-vous.</li>
<li><strong>SELF</strong> pour <em>Somebody ELse&#8217;s Fault</em>, où l&#8217;important est avant tout de se dédouaner (hélas, je crains que certaines personnes dans ma boite appliquent effectivement cette méthodologie).</li>
<li><strong>EBN</strong> pour <em>Efficiency By Necessity</em>, l&#8217;efficacité par la nécessité. Autrement dit, plus on place de meetings dans la journée d&#8217;un développeur, moins il aura de temps pour coder, et sera donc plus efficace sur ce temps-là !</li>
<li><strong>MBH</strong>, <em>More Billable Hours</em>. Le titre en dit long !</li>
<li>L&#8217;<em>Agile Development</em> devient le <em>Fragile Development</em>, où il faut commiter le plus vite possible pour faire remonter les problèmes le plus rapidement possible.</li>
<li>Et ainsi de suite&#8230;</li>
</ul>


<p>Bref, une très bonne session, plein d&#8217;humour, de graphiques sans queue ni tête. Excellent !</p>

<hr/>


<p>Je passerais rapidement sur la session suivante à laquelle j&#8217;ai assisté, sur Java 8 et les closures. Le sujet a déjà été abordé plusieurs fois, le contenu n&#8217;était pas inintéressant, mais au bout de 50 slides de 20 lignes chacun, j&#8217;avais une certaine indigestion. Un conseil si vous voulez faire une présentation attractive : pensez <strong>Présentation Zen</strong> !</p>

<hr/>


<h2><a href="http://devoxx.com/display/DV12/Behaviour+Driven+Development+on+the+JVM+-+a+State+of+the+Union">BDD on the JVM, a state of the Union</a></h2>

<p><img src="http://linsolas.github.com/images/Devoxx2012-BDD.jpg" alt="BDD State of the union"/></p>

<p><a href="http://devoxx.com/display/DV12/John+Smart">John Smart</a> nous présente le BDD, <em>Behavior Driven Development</em>, et en particulier son intégration au sein de l&#8217;écosystème Java.
La première partie est un rappel de ce qu&#8217;est le BDD, dont le but principal est l&#8217;écriture dans un langage commun à toutes les parties d&#8217;un projet (développeurs, analystes, testeurs, etc.) de spéfications exécutables. L&#8217;idée étant d&#8217;écrire un scénario en partant d&#8217;un contexte (<em>Given</em>), d&#8217;une action (<em>When</em>), on s&#8217;attend à un résultat précis (<em>Then</em>).</p>

<p>La seconde partie concernait les outils, en particulier :</p>

<ul>
<li><a href="http://jbehave.org/">JBehave</a></li>
<li><a href="http://cukes.info/">Cucumber</a></li>
<li><a href="http://www.easyb.org/">EasyB</a></li>
<li><a href="http://java.net/projects/thucydides/">Thucydides</a></li>
<li><a href="http://code.google.com/p/spock/">Spock</a> qui utilise la syntaxe Groovy pour l&#8217;écriture des tests. Il s&#8217;agit toutefois là d&#8217;un outil plutôt destiné au BDD pour les développeurs.</li>
<li><a href="http://etorreborre.github.com/specs2/">Spec2</a>, ou le BDD pour Scala.</li>
<li><a href="http://pivotal.github.com/jasmine/">Jasmine</a>, dédié au langage JavaScript.</li>
</ul>


<p>A vrai dire, les syntaxes des solutions de BDD pour Java sont très similaires. Voyons par exemple celle de Cucumber :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Feature:
</span><span class='line'>In order to increase sales of advertised articles
</span><span class='line'>As a Seller
</span><span class='line'>I want buyers to be able to easily find ads for articles they want to buy
</span><span class='line'>
</span><span class='line'>Scenario: Search by keyword and location
</span><span class='line'>
</span><span class='line'>Given Sally wants to buy a "puppy" for her son
</span><span class='line'>When she looks for "puppy" in the "Pets and animals" category
</span><span class='line'>Then she should obtain a list of "puppy" ads</span></code></pre></td></tr></table></div></figure>


<p>Ces scénarios sont écrits en anglais (voire même en français) avec de <em>vraies phrases</em>, et donc sont accessibles aussi à des non techniciens (par exemple, les analystes business pourront eux mêmes écrire ces tests). Derrière cela, des classes JUnit seront écrites pour &#8220;traduire&#8221; le langage Cucumber en Java, pour initialiser le contexte (<code>Given</code>), réaliser des actions (<code>When</code>) et les vérifications (<code>Then</code>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SearchAdsSteps</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Steps</span>
</span><span class='line'>  <span class="n">BuyerSteps</span> <span class="n">buyer</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Given</span><span class="o">(</span><span class="s">&quot;^Sally wants to buy a \&quot;([^\&quot;]*)\&quot; for her son$&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">buyingAPresent</span><span class="o">(</span><span class="n">String</span> <span class="n">present</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">buyer</span><span class="o">.</span><span class="na">open_home_page</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@When</span><span class="o">(</span><span class="s">&quot;^she looks for \&quot;([^\&quot;]*)\&quot; in the \&quot;([^\&quot;]*)\&quot; category$&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addSearchCategoryAndKeyword</span><span class="o">(</span><span class="n">String</span> <span class="n">category</span><span class="o">,</span> <span class="n">String</span> <span class="n">keyword</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">buyer</span><span class="o">.</span><span class="na">choose_category_and_keyword</span><span class="o">(</span><span class="n">category</span><span class="o">,</span> <span class="n">keyword</span><span class="o">);</span>
</span><span class='line'>      <span class="n">buyer</span><span class="o">.</span><span class="na">perform_search</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Then</span><span class="o">(</span><span class="s">&quot;she should obtain a list of \&quot;([^\&quot;]*)\&quot; ads&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldOnlySeeAdsContainingKeyword</span><span class="o">(</span><span class="n">String</span> <span class="n">keyword</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">buyer</span><span class="o">.</span><span class="na">should_only_see_results_with_titles_containing</span><span class="o">(</span><span class="n">keyword</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cucumber JVM dispose donc d&#8217;annotations propres aux mots clés des <em>features</em> (comme <code>@When</code>), qui prend en argument la phrase du test lui-même, sous forme d&#8217;expression régulière. On voit également que les éléments variables de ces phrases sont directement passés en paramètre à la méthode de test.</p>

<p>Bref, une bonne session pour se familiariser avec le BDD, ou de connaitre un peu mieux les outils.</p>

<p>Retrouvez <a href="http://fr.slideshare.net/wakaleo/bdd-stateoftheunion">les slides sur SlideShare</a></p>

<hr/>


<h2><a href="http://devoxx.com/display/DV12/Code+Story">Code Story</a></h2>

<p>Je m&#8217;accorde ensuite une petite pause, pour discuter avec quelques personnes, visiter les stands, et assister un peu à <a href="http://code-story.net/">Code Story</a>. Les 4 compères français réédite leur performances de Devoxx France, à savoir de coder en <em>live</em> une application. Cette fois-ci, ils ont développé une application de &#8220;combat&#8221;, disponible <a href="http://fight.code-story.net/">ici</a>. Le principe : on rentre 2 mots clé (nom d&#8217;un speaker, d&#8217;une session, etc.), et l&#8217;application donne le résultat du combat. Ce score dépend - je crois - des votes que les internautes avaient préalablement donné sur les sessions. Le <a href="https://github.com/CodeStory/code-story-fight">code final est sur GitHub</a>.
Encore une fois, une très belle session, mais hélas pas aussi populaire qu&#8217;à Devoxx France. Le fait qu&#8217;ils n&#8217;aient pas eu une salle à eux, et qu&#8217;ils soient situés dans le grand hall, un peu trop bruyant, n&#8217;a sans doute pas aidé. Un manque de publicité lors de la keynote a pu aussi jouer en leur défaveur.</p>

<hr/>


<h2><a href="http://www.devoxx.com/display/DV12/The+Chrome+Dev+Tools+can+do+THAT">The Chrome Dev Tools can do THAT</a></h2>

<p><img src="http://linsolas.github.com/images/Devoxx2012-ChromDevTools.JPG" alt="Chrome can do THAT"/></p>

<p>Les speakers de Google présents à Devoxx sont des bons. Celui qui a présenté Chrome Dev Tools, <a href="http://www.devoxx.com/display/DV12/Ilya+Grigorik">Ilya Grigorik</a> ne déroge pas à la règle. Ce développeur Google nous présente donc <a href="https://developers.google.com/chrome-developer-tools/docs/overview">Chrome Dev Tools</a> et ses fonctionnalités.</p>

<p>On commence avec du classique, rien de super impressionnant, moi qui utilise fréquemment Firebug (je n&#8217;ai hélas pas accès à Chrome à mon boulot) : édition du HTML, CSS, JavaScript, etc. Quelques fonctionnalités intéressantes sont là, comme le glisser - déposer qui permet de modifier le DOM facilement.
Ilya passe ensuite sur la présentation du <em>Network Timeline</em>, qui nous montre où passe le temps quand on charge une page : le temps d&#8217;attente pour obtenir une ressoure, le temps de la télécharger, sa taille (compressée et totale). Chrome Dev Tools indique qui a demandé la ressource (ça peut être la page, un script, etc.). Ces données sont importantes, et permettent de mieux ordonner le chargement des ressources pour accélerer l&#8217;affichage de la page. Toutes ces informations sont également exportables sous un format HAR, ce qui permet par exemple d&#8217;attacher ces informations dans un ticket JIRA en cas de souci, d&#8217;analyser ces trames plus tard, etc.</p>

<p>Par la suite, Ilya nous explique que la fluidité de son site est aussi un critère extrêmement important pour l&#8217;utilisateur. Cela est particulièrement vrai dès que l&#8217;on intègre des animations (en JS ou CSS) dans sa page, et que l&#8217;utilisateur scrolle en même temps. Chrome Dev Tools dispose d&#8217;outils pour comprendre où le navigateur va passer son temps durant des animations, ce qui est très instructif, bien qu&#8217;il me semble qu&#8217;on arrive là à un niveau assez élevé d&#8217;optimisation&#8230; Ici aussi, les données sont exportables (sous format JSon) pour une analyse ultérieure.</p>

<p>Chrome Dev Tools a également un outil de profilage permettant de détecter des fuites mémoire, ainsi qu&#8217;un outil d&#8217;audit. Ce dernier va inspecter de très nombreux points sur votre site, permettant de gagner ci ou là quelques millisecondes. Ilya nous montre ainsi l&#8217;exemple du site de la CNN, où l&#8217;outil d&#8217;audit détecte que beaucoup d&#8217;images pourraient être allégées en utilisant un meilleur algorithme de compression. Chrome Dev Tools va même à montrer en exemple l&#8217;image ainsi compressée ! Je trouve ça excellent, et il manque juste à mon avis un bouton &#8221;<em>Ok, commit that to Git</em>&#8221; :)
Chrome Dev Tools est également compatible avec <a href="https://developers.google.com/speed/pagespeed/insights">PageSpeed Insight</a> qui liste différentes améliorations de performances.</p>

<p>Ilya nous montre ensuite l&#8217;extensibilité de Chrome Dev Tools, en détaillant le protocole utilisé par l&#8217;outil pour faire par exemple du débogage à distance. Ainsi, il devient facile de lancer un navigateur sur un téléphone Android, et de tout analyser dans un autre navigateur Chrome, installé par exemple sur son laptop. Comme Chrome expose toutes les données via un WebSocket, il est même possible d&#8217;interagir avec d&#8217;autres logiciels que Chrome. C&#8217;est ainsi qu&#8217;il est possible de débugguer une application iOS grâce à Chrome !</p>

<p>La présentation se termine par l&#8217;outil de <em>benchmark</em> grâce auquel il est possible d&#8217;analyser les performances de son site.</p>

<p>Au final, nous avons eu une conférence technique de haut niveau, avec des fonctionnalités vraiment épatantes de la part de Chrome, bien que certaines sont à mon avis bien trop précise pour être vraiment utile (sauf si on veut aussi débugguer Chrome lui-même :) ).</p>

<p>La présentation est <a href="http://www.igvita.com/slides/2012/devtools-tips-and-tricks/#1">visible en ligne</a>.</p>

<hr/>


<p>Voilà, c&#8217;est tout (!) pour une première journée déjà très chargée, bien qu&#8217;amputée d&#8217;une grosse partie de la matinée à cause des grèves. La soirée se terminera dans le bar / restaurant à côté du Métropolis, l&#8217;Axxis, où l&#8217;on a retrouvé une partie des développeurs Play! de Belgique (peu nombreux) ainsi que des frenchies (dont Nicolas Martignole). Retour à l&#8217;hôtel vers 23h / 23h30, presque prêt à attaquer la 2e journée !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devoxx 2012 - Présentation d'Hibernate Envers]]></title>
    <link href="http://linsolas.github.com/blog/2012/11/17/devoxx-2012-presentation-dhibernate-envers/"/>
    <updated>2012-11-17T23:07:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2012/11/17/devoxx-2012-presentation-dhibernate-envers</id>
    <content type="html"><![CDATA[<h2><a href="http://devoxx.com/display/DV12/Easy+Entity+Auditing+with+Hibernate+Envers">Hibernate Envers</a></h2>

<p><img src="http://linsolas.github.com/images/Devoxx2012-moi.jpg" alt="Moi, à Devoxx"/></p>

<p>Difficile de ne pas parler de la meilleure conférence à Devoxx celle présentée par <a href="">Romain Linsolas</a> sur Hibernate Envers. Bien entendu, le fait que ce soit moi n&#8217;a aucune incidence sur cette considération :)
Trève de plaisanterie. J&#8217;ai donc présenté un Quickie, à savoir 15 minutes, sur cette librairie d&#8217;Hibernate qui permet d&#8217;auditer ses entités (classes de persistence). Par audit on entend la conservation en base des enregistrements à chaque fois qu&#8217;une modification y est apportée. Voyez cela comme Subversion par exemple : si je commite une nouvelle version d&#8217;un fichier, alors SVN va conserver son historique, et permettre de &#8220;remonter&#8221; dans le temps et de voir les évolutions apportées à ce fichier.</p>

<p>Ma présentation s&#8217;est donc déroulée en 4 chapitres.</p>

<!-- more -->


<h3>Activer Envers</h3>

<p>Tout d&#8217;abord, le plus simple, consiste à activer Envers, ce qui se fait extrêmement facilement en ajoutant simplement la librairie dans le classpath (ajout de la dépendance <code>hibernate:hibernate-envers</code> dans son pom.xml par exemple). C&#8217;est tout. On notera toutefois qu&#8217;il est nécessaire d&#8217;utiliser une version 3 ou 4 d&#8217;Hibernate ainsi que d&#8217;<em>Hibernate Annotations</em>, Envers ne supportant pas (encore ?) la configuration par XML.</p>

<h3>Démarrer l&#8217;audit</h3>

<p>Ensuite, on passe à l&#8217;audit à proprement parlé. Du côté Java, c&#8217;est très simple, l&#8217;annotation principale étant <code>@Audited</code>, qui indiquera à Envers qu&#8217;il faudra auditer cette entité. Voilà un petit exemple d&#8217;entité auditée :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Audited</span>
</span><span class='line'><span class="nd">@Entity</span>
</span><span class='line'><span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;T_PERSON&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Id</span> <span class="nd">@GeneratedValue</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">surname</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@NotAudited</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">comments</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Getter, setter, etc.</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le <code>@NotAudited</code> permet d&#8217;exclure complètement le champ de l&#8217;audit : non seulement Envers ne conservera pas sa valeur dans la table d&#8217;audit, mais également si c&#8217;est la seule valeur qui est modifiée dans un update de l&#8217;enregistrement, alors Envers n&#8217;ira pas ajouter de nouvelle révision dans la piste d&#8217;audit.</p>

<p>Une nouveauté apparue <em>a priori</em> récemment (c&#8217;est d&#8217;ailleurs une fonctionnalité &#8220;expérimentale&#8221;) dans Envers est la possibilité de tracer quels champs ont été modifiés. Pour cela, on ajoutera au choix la propriété suivante :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;org.hibernate.envers.global_with_modified_flag&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>pour avoir la fonctionnalité globalement, ou alors on choisira au cas par cas les champs à suivre, comme ceci :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Audited</span><span class="o">(</span><span class="n">withModifiedFlag</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'><span class="kd">private</span> <span class="n">String</span> <span class="n">monChamp</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Du côté de la base de données, voilà comment ça se passe. Envers nécessite une table d&#8217;audit par entité auditée. Par exemple, si j&#8217;audite ma table <code>T_PERSON</code>, j&#8217;aurais alors besoin d&#8217;une table <code>T_PERSON_AUD</code> (par défaut, Envers ajoute <code>_AUD</code> à la fin du nom de la table). Cette table d&#8217;audit est un quasi-clône de la table originelle, à quelques exceptions près :</p>

<ul>
<li>Elle contient 2 champs supplémentaires, à savoir <code>REV</code>, qui est l&#8217;ID de la révision, et <code>REVTYPE</code> qui contient le type d&#8217;opération qui a créé la révision (0 pour une addition, 1 pour une modification, 2 pour une suppression).</li>
<li>Les contraintes ne sont plus les mêmes, parce que lorsque l&#8217;on supprime une donnée, on créera une révision avec tous les champs vides (à l&#8217;exception de la clé primaire de l&#8217;objet supprimé). Attention donc avec les <code>not null</code> !</li>
<li>La clé primaire de cette table d&#8217;audit sera la même clé primaire que celle d&#8217;origine, à laquelle on ajoutera le champ <code>REV</code>.</li>
<li>Dans le cas où l&#8217;on active la fonctionnalité du traçage des champs modifiés, il faudra ajouter pour chaque champ concerné (donc tous si la fonctionnalité est activée de façon globale) un champ <code>xxx_MOD</code> qui pourra valoir 0 (le champ n&#8217;a pas été modifié) ou 1 (le champ a été modifié).</li>
<li>Optionnellement, tout champ dont la propriété liée est marquée comme non auditée (<code>@NotAudited</code>) peut être supprimé de la table d&#8217;audit.</li>
</ul>


<p>Envers a également besoin d&#8217;une table globale pour stocker les informations de révision. Cette table, nommée <code>REVINFO</code>, ne contient initiallement que 2 champs : <code>REV</code> qui est l&#8217;ID de la révision (et que l&#8217;on retrouve dans toutes les tables d&#8217;audit), ainsi que <code>REVTSTMP</code>. Il est toutefois possible d&#8217;ajouter des informations pour cette table, voici comment y ajouter le nom de l&#8217;utilisateur connecté qui a déclenché la révision. Tout d&#8217;abord, il faut créer une entité pour cela, étendant simplement <code>DefaultRevisionEntity</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Entity</span>
</span><span class='line'><span class="nd">@RevisionEntity</span><span class="o">(</span><span class="n">UsernameRevisionListener</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyEntityRevision</span> <span class="kd">extends</span> <span class="n">DefaultRevisionEntity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span>  <span class="c1">// + getter / setter</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette entité est liée à un listener qui sera appelé à la création de chaque nouvelle révision. Le listener s&#8217;écrit ainsi (la méthode <code>getCurrentUsername()</code> est à écrire soi-même, mais généralement le container - comme Spring MVC - propose des fonctionnalités pour ça) :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UsernameRevisionListener</span> <span class="kd">implements</span> <span class="n">RevisionListener</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">newRevision</span><span class="o">(</span><span class="n">Object</span> <span class="n">revisionEntity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">theUser</span> <span class="o">=</span> <span class="n">getCurrentUsername</span><span class="o">();</span>
</span><span class='line'>      <span class="o">((</span><span class="n">MyEntityRevision</span><span class="o">)</span> <span class="n">revisionEntity</span><span class="o">).</span><span class="na">setUsername</span><span class="o">(</span><span class="n">theUser</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Requêter les données d&#8217;audit</h2>

<p>Créer les données d&#8217;audit c&#8217;est bien, les utiliser c&#8217;est encore mieux. Heureusement Envers dispose d&#8217;une API pour ça. Voyons ça avec quelques exemples. Tout d&#8217;abord, nous voulons récupérer la liste des révisions pour une entité donnée, puis on affichera l&#8217;historique de cette entité :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">personId</span> <span class="o">=</span> <span class="n">somePerson</span><span class="o">.</span><span class="na">getId</span><span class="o">();</span>
</span><span class='line'><span class="n">AuditReader</span> <span class="n">auditReader</span> <span class="o">=</span> <span class="n">AuditReaderFactory</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">entityManager</span><span class="o">);</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Number</span><span class="o">&gt;</span> <span class="n">allRevisions</span> <span class="o">=</span> <span class="n">auditReader</span><span class="o">.</span><span class="na">getRevisions</span><span class="o">(</span><span class="n">Person</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">personId</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">Number</span> <span class="nl">n:</span> <span class="n">allRevisions</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Person</span> <span class="n">p</span> <span class="o">=</span> <span class="n">auditReader</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">Person</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">personId</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
</span><span class='line'>   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;\t[Rev #%1$s] &gt; %2$s\n&quot;</span><span class="o">,</span> <span class="n">n</span><span class="o">,</span> <span class="n">p</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le résultat obtenu est le suivant :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span><span class="n">Rev</span> <span class="err">#</span><span class="mi">1</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">Person</span> <span class="o">{</span> <span class="n">id</span><span class="o">=</span><span class="mi">10</span><span class="o">,</span> <span class="n">name</span><span class="o">=</span><span class="err">&#39;</span><span class="n">Romain</span><span class="err">&#39;</span><span class="o">,</span> <span class="n">surname</span><span class="o">=</span><span class="err">&#39;&#39;</span><span class="o">,</span> <span class="n">comments</span><span class="o">=</span><span class="err">&#39;&#39;</span><span class="o">}</span>
</span><span class='line'><span class="o">[</span><span class="n">Rev</span> <span class="err">#</span><span class="mi">3</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">Person</span> <span class="o">{</span> <span class="n">id</span><span class="o">=</span><span class="mi">10</span><span class="o">,</span> <span class="n">name</span><span class="o">=</span><span class="err">&#39;</span><span class="n">Romain</span><span class="err">&#39;</span><span class="o">,</span> <span class="n">surname</span><span class="o">=</span><span class="err">&#39;</span><span class="n">Linsolas</span><span class="err">&#39;</span><span class="o">,</span> <span class="n">comments</span><span class="o">=</span><span class="err">&#39;&#39;</span><span class="o">}</span>
</span><span class='line'><span class="o">[</span><span class="n">Rev</span> <span class="err">#</span><span class="mi">4</span><span class="o">]</span> <span class="o">&gt;</span> <span class="kc">null</span>
</span></code></pre></td></tr></table></div></figure>


<p>On devine ainsi que l&#8217;on a créé l&#8217;entité &#8220;Romain&#8221;, puis qu&#8217;on lui a affecté une valeur pour le <em>surname</em>, pour enfin la supprimer (d&#8217;où le <code>null</code> lors de la 4e révision).
Envers propose également la classe <code>AuditQuery</code> qui permet de requêter plus précisément les données d&#8217;audit. Ici, nous allons récupérer toutes les entités modifiées lors d&#8217;une révision donnée (disons 42) :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">AuditQuery</span> <span class="n">query1</span> <span class="o">=</span> <span class="n">auditReader</span><span class="o">.</span><span class="na">createQuery</span><span class="o">().</span><span class="na">forEntitiesAtRevision</span><span class="o">(</span><span class="n">Person</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="mi">42</span><span class="o">);</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">persons</span> <span class="o">=</span> <span class="n">query1</span><span class="o">.</span><span class="na">getResultList</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le résultat :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Person</span> <span class="o">{</span> <span class="n">id</span><span class="o">=</span><span class="mi">11</span><span class="o">,</span> <span class="n">name</span><span class="o">=</span><span class="err">&#39;</span><span class="n">Chuck</span><span class="err">&#39;</span><span class="o">,</span> <span class="n">surname</span><span class="o">=</span><span class="err">&#39;</span><span class="n">Norris</span><span class="err">&#39;</span><span class="o">,</span> <span class="n">comments</span><span class="o">=</span><span class="err">&#39;&#39;</span><span class="o">}</span>
</span><span class='line'><span class="n">Person</span> <span class="o">{</span> <span class="n">id</span><span class="o">=</span><span class="mi">10</span><span class="o">,</span> <span class="n">name</span><span class="o">=</span><span class="err">&#39;</span><span class="n">Romain</span><span class="err">&#39;</span><span class="o">,</span> <span class="n">surname</span><span class="o">=</span><span class="err">&#39;</span><span class="n">Linsolas</span><span class="err">&#39;</span><span class="o">,</span> <span class="n">comments</span><span class="o">=</span><span class="err">&#39;&#39;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On voit que l&#8217;on a 2 entités qui ont été modifiées. Jusqu&#8217;à présent, nous avons utilisé l&#8217;API pour récupérer les entités telles qu&#8217;elle étaient à un moment donnée dans leur histoire. Mais nous n&#8217;avons pas d&#8217;informations quant à la modification qu&#8217;ils ont subi. C&#8217;est bien entendu possible :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">AuditQuery</span> <span class="n">query2</span> <span class="o">=</span> <span class="n">auditReader</span><span class="o">.</span><span class="na">createQuery</span><span class="o">().</span><span class="na">forRevisionsOfEntity</span><span class="o">(</span><span class="n">Person</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">[]&gt;</span> <span class="n">revisions</span> <span class="o">=</span> <span class="n">query2</span><span class="o">.</span><span class="na">getResultList</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le résultat sera donc une liste de tableaux d&#8217;objets. Chaque tableau contient 3 éléments : l&#8217;entité elle-même, l&#8217;objet représentant la révision (avec l&#8217;ID et le timestamp, ainsi que des informations additionnelles si cela avait été paramétré comme nous l&#8217;avons vu précédemment), et enfin le type de révision. Le retour du code ci-dessus sera celui-ci :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">|</span> <span class="n">Person</span> <span class="o">{</span> <span class="n">id</span><span class="o">=</span><span class="mi">10</span><span class="o">,</span> <span class="n">name</span><span class="o">=</span><span class="err">&#39;</span><span class="n">Romain</span><span class="err">&#39;</span><span class="o">,</span> <span class="n">surname</span><span class="o">=</span><span class="err">&#39;&#39;</span><span class="o">,</span> <span class="n">comments</span><span class="o">=</span><span class="err">&#39;&#39;</span> <span class="o">}</span>         <span class="o">|</span> <span class="n">EntityRevision</span> <span class="o">{</span><span class="n">id</span><span class="o">=</span><span class="mi">1</span><span class="o">,</span> <span class="n">timestamp</span><span class="o">=</span><span class="mi">1352936106653</span><span class="o">,</span> <span class="n">username</span><span class="o">=</span><span class="err">&#39;</span><span class="n">Devoxx</span><span class="err">&#39;</span><span class="o">}</span> <span class="o">|</span> <span class="n">ADD</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">Person</span> <span class="o">{</span> <span class="n">id</span><span class="o">=</span><span class="mi">11</span><span class="o">,</span> <span class="n">name</span><span class="o">=</span><span class="err">&#39;</span><span class="n">Chuck</span><span class="err">&#39;</span><span class="o">,</span> <span class="n">surname</span><span class="o">=</span><span class="err">&#39;</span><span class="n">Norris</span><span class="err">&#39;</span><span class="o">,</span> <span class="n">comments</span><span class="o">=</span><span class="err">&#39;&#39;</span> <span class="o">}</span>    <span class="o">|</span> <span class="n">EntityRevision</span> <span class="o">{</span><span class="n">id</span><span class="o">=</span><span class="mi">1</span><span class="o">,</span> <span class="n">timestamp</span><span class="o">=</span><span class="mi">1352936106669</span><span class="o">,</span> <span class="n">username</span><span class="o">=</span><span class="err">&#39;</span><span class="n">Devoxx</span><span class="err">&#39;</span><span class="o">}</span> <span class="o">|</span> <span class="n">ADD</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">Person</span> <span class="o">{</span> <span class="n">id</span><span class="o">=</span><span class="mi">10</span><span class="o">,</span> <span class="n">name</span><span class="o">=</span><span class="err">&#39;</span><span class="n">Romain</span><span class="err">&#39;</span><span class="o">,</span> <span class="n">surname</span><span class="o">=</span><span class="err">&#39;</span><span class="n">Linsolas</span><span class="err">&#39;</span><span class="o">,</span> <span class="n">comments</span><span class="o">=</span><span class="err">&#39;&#39;</span> <span class="o">}</span> <span class="o">|</span> <span class="n">EntityRevision</span> <span class="o">{</span><span class="n">id</span><span class="o">=</span><span class="mi">1</span><span class="o">,</span> <span class="n">timestamp</span><span class="o">=</span><span class="mi">1352936106687</span><span class="o">,</span> <span class="n">username</span><span class="o">=</span><span class="err">&#39;</span><span class="n">Devoxx</span><span class="err">&#39;</span><span class="o">}</span> <span class="o">|</span> <span class="n">MOD</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">Person</span> <span class="o">{</span> <span class="n">id</span><span class="o">=</span><span class="mi">10</span><span class="o">,</span> <span class="n">name</span><span class="o">=</span><span class="err">&#39;&#39;</span><span class="o">,</span> <span class="n">surname</span><span class="o">=</span><span class="err">&#39;&#39;</span><span class="o">,</span> <span class="n">comments</span><span class="o">=</span><span class="err">&#39;&#39;</span> <span class="o">}</span>               <span class="o">|</span> <span class="n">EntityRevision</span> <span class="o">{</span><span class="n">id</span><span class="o">=</span><span class="mi">1</span><span class="o">,</span> <span class="n">timestamp</span><span class="o">=</span><span class="mi">1352936106734</span><span class="o">,</span> <span class="n">username</span><span class="o">=</span><span class="err">&#39;</span><span class="n">Devoxx</span><span class="err">&#39;</span><span class="o">}</span> <span class="o">|</span> <span class="n">DEL</span> <span class="o">|</span>
</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;intérêt de la classe <code>AuditQuery</code> est qu&#8217;elle propose une API pour affiner sa requête. Par exemple :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">persons</span> <span class="o">=</span> <span class="n">auditReader</span><span class="o">.</span><span class="na">createQuery</span><span class="o">()</span>
</span><span class='line'>      <span class="o">.</span><span class="na">forEntitiesAtRevision</span><span class="o">(</span><span class="n">Person</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="mi">42</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">addOrder</span><span class="o">(</span><span class="n">AuditEntity</span><span class="o">.</span><span class="na">property</span><span class="o">(</span><span class="s">&quot;surname&quot;</span><span class="o">).</span><span class="na">desc</span><span class="o">())</span>
</span><span class='line'>      <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">AuditEntity</span><span class="o">.</span><span class="na">relatedId</span><span class="o">(</span><span class="s">&quot;address&quot;</span><span class="o">).</span><span class="na">eq</span><span class="o">(</span><span class="n">theAddressId</span><span class="o">))</span>
</span><span class='line'>      <span class="o">.</span><span class="na">setFirstResult</span><span class="o">(</span><span class="mi">4</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">setMaxResults</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">getResultList</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si vous connaissez Criteria, alors vous êtes en terrain connu. Bien entendu, cette API gère aussi la fonctionnalité de traçage des champs modifiés :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">AuditQuery</span> <span class="n">query</span> <span class="o">=</span> <span class="n">auditReader</span><span class="o">().</span><span class="na">createQuery</span><span class="o">()</span>
</span><span class='line'>      <span class="o">.</span><span class="na">forEntitiesAtRevision</span><span class="o">(</span><span class="n">Person</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="mi">42</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">AuditEntity</span><span class="o">.</span><span class="na">property</span><span class="o">(</span><span class="s">&quot;surname&quot;</span><span class="o">).</span><span class="na">hasChanged</span><span class="o">())</span>
</span><span class='line'>      <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">AuditEntity</span><span class="o">.</span><span class="na">property</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">).</span><span class="na">hasNotChanged</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Démonstration</h2>

<p>La dernière partie de ce Quickie est une courte démonstration. Le code est récupérable sur GitHub : https://github.com/linsolas/devoxx-envers
Dans ce petit projet, je démarre une base en mémoire (H2) contenant 3 tables (T_PERSON, T_PERSON_AUD et REVINFO), puis je réalise quelques opérations basiques de CRUD sur quelques entités. Entre chaque étape, j&#8217;affiche le contenu de la base. A noter que j&#8217;utilise le projet p6spy pour logguer les requêtes exactes envoyées à la base.</p>

<ul>
<li><a href="https://github.com/linsolas/devoxx-envers">La démo sur GitHub</a></li>
<li><a href="http://fr.slideshare.net/linsolas/devoxx-2012-hibernate-envers">Les slides de la présentation</a></li>
</ul>


<p><a href="http://www.flickr.com/photos/bejug/sets/72157632019400699/">Photo tirées des photos officielles de Devooxx</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I'm back]]></title>
    <link href="http://linsolas.github.com/blog/2012/11/17/im-back/"/>
    <updated>2012-11-17T22:28:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2012/11/17/im-back</id>
    <content type="html"><![CDATA[<p>Cette fois-ci, ce devrait être la bonne. Bye bye mon <a href="http://linsolas.free.fr/wordpress">ancien blog</a>, l&#8217;hébergement chez Free devenant trop contraignant. Welcome donc à GitHub pages, avec <a href="http://octopress.org/">Octopress</a> par dessus.</p>

<p>Maintenant que les fondations sont là, place au contenu !</p>
]]></content>
  </entry>
  
</feed>
