<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[fr.romain:blog:3.0]]></title>
  <link href="http://linsolas.github.com/atom.xml" rel="self"/>
  <link href="http://linsolas.github.com/"/>
  <updated>2013-11-15T12:40:42+01:00</updated>
  <id>http://linsolas.github.com/</id>
  <author>
    <name><![CDATA[Romain Linsolas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Devoxx 2013 - dernier jour et bilan]]></title>
    <link href="http://linsolas.github.com/blog/2013/11/15/devoxx-2013-dernier-jour-et-bilan/"/>
    <updated>2013-11-15T00:27:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2013/11/15/devoxx-2013-dernier-jour-et-bilan</id>
    <content type="html"><![CDATA[<p><img src="http://linsolas.github.com/images/devoxx_logo.gif" title="Devoxx 2013" alt="Devoxx 2013" /></p>

<p>La dernière journée à Devoxx est toujours un peu spéciale. Beaucoup moins de monde, moins de sessions aussi, on sent que la fin est là !
Pour cette dernière journée, comme habituellement pour chaque Devoxx (France ou Belgique), je termine par l&#8217;enregistrement du podcast des CastCodeurs.</p>

<!-- more -->


<p>J&#8217;ai commencé la journée avec <a href="http://devoxx.be/dv13-scott-kurz.html?presId=3728">Batch applications for the Java platform (JSR 352)</a>, mais entre la fatigue des deux derniers jours et les slides bien trop chargés, j&#8217;ai eu du mal à suivre. Donc si vous voulez en savoir plus, je vous invite à regarder la <a href="http://jcp.org/en/jsr/detail?id=352">JSR 352</a> :)</p>

<h2><a href="http://devoxx.be/dv13-vincent-massol.html?presId=3430">Enregistrement live des CastCodeurs</a></h2>

<p><img src="http://linsolas.github.com/images/note-4.png" title="4/5" alt="4/5" /></p>

<p>Ma seule et unique session en français (la seule de la conférence d&#8217;ailleurs) : l&#8217;enregistrement live du <a href="http://lescastcodeurs.com/">Podcast des CastCodeurs</a>. Une analyse toujours fine et délicate de la conférence qui est en train de s&#8217;achever.
Je vous laisserais écouter cet épisode qui sera bientôt disponible sur le site. D&#8217;ailleurs, bientôt la 100e. Ce sera d&#8217;ailleurs peut-être pour Devoxx Anvers 2014, qui sait.</p>

<p><img src="http://linsolas.github.com/images/devoxx2013-castcodeurs.jpg" title="Les CastCodeurs sur scène" alt="Les CastCodeurs sur scène" /></p>

<h2><a href="http://devoxx.be/dv13-jean-franois-denise.html?presId=3759">Avatar.js, Server-Side JavaScript on the Java Platform</a></h2>

<p><img src="http://linsolas.github.com/images/note-2.png" title="2/5" alt="2/5" /></p>

<p>Finissons ce Devoxx par la présentation de <a href="http://devoxx.be/dv13-jean-franois-denise.html">Jean-François Denise</a> sur <a href="https://avatar-js.java.net/">Avatar.js</a>.</p>

<p>Il s&#8217;agit d&#8217;un framework JavaScript côté serveur qui tourne sur la JVM et est une combinaison de :</p>

<ul>
<li>d&#8217;une inspiration de Node pour son modèle orienté événement, son système de modules et de son API.</li>
<li>utilisation du moteur JavaScript de Nashorn.</li>
<li>l&#8217;API de de la plateforme Java.</li>
</ul>


<p>Le but n&#8217;est pas de copier Node, mais plutôt d&#8217;en créer une compatible avec lui. Prendre le meilleure des deux mondes en quelque sorte.
La syntaxe s&#8217;approche de celle de Node, comme par exemple :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">fs</span><span class="p">.</span><span class="nx">readdir</span><span class="p">(</span><span class="s1">&#39;/Documents/images&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">files</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">files</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">imgFile</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">file</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">java</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">File</span><span class="p">(</span><span class="nx">imgFile</span><span class="p">);</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">img</span> <span class="o">=</span> <span class="nx">javax</span><span class="p">.</span><span class="nx">imageio</span><span class="p">.</span><span class="nx">ImageIO</span><span class="p">.</span><span class="nx">read</span><span class="p">(</span><span class="nx">file</span><span class="p">);</span>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Démarrer un serveur peut se faire directement en ligne de commandes, ou encore via quelques lignes de code :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span><span class="o">[]</span> <span class="n">args</span> <span class="o">=</span> <span class="o">{</span> <span class="s">&quot;./myscript.js&quot;</span> <span class="o">};</span>
</span><span class='line'><span class="n">Server</span> <span class="n">server</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Server</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
</span><span class='line'><span class="n">server</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Avatar.js vient aussi avec Avatar EE. Et là, je commence à me poser des questions.
Il faut noter qu&#8217;Avatar.js n&#8217;est pas encore finalisé, et son API peut également être amenée à changer&#8230;</p>

<p>Jean-Baptiste passe ensuite à une démo d&#8217;application d&#8217;upload de photos en Avatar.js, avec l&#8217;aide d&#8217;Express, des WebSocket, de java.sql et de javax.imageio. Ah non, en fait de démo, il s&#8217;agit de slides qui montrent du code. Argh</p>

<p>J&#8217;avoue ne pas être vraiment emballé par ce projet, bien qu&#8217;avoir une passerelle entre Node.js et Java peut être intéressant. De plus ne pas voir une <em>vraie</em> démo m&#8217;a quand même déçu !</p>

<h2>Bilan</h2>

<p>Pour ma deuxième année à Anvers, la magie est toujours là. Cela reste l&#8217;une des meilleures conférences du monde sur le domaine du Java, avec des stars et des présentations de qualité.
Je dirais quand même que j&#8217;ai préféré Devoxx 2012 à la version 2013, mais cela est peut-être aussi lié au fait que l&#8217;année dernière, il y avait en plus l&#8217;excitation de découvrir cette conférence pour de vrai.</p>

<p>Bref, je reviendrais à Anvers en 2014 si j&#8217;en ai la possibilité, et ce sera peut-être pour faire une conférence, qui sait.</p>

<p>Donc les aspects positifs :</p>

<ul>
<li>La qualité des présentations et des orateurs.</li>
<li>Une organisation au poil, et c&#8217;est du sacré boulot !</li>
<li>Les gens, les amis que l&#8217;on revoit ou que l&#8217;on se fait. Les rencontres donc.</li>
<li>Les stands, il y en a pas mal, ils sont plutôt bien achalandés, et certains offrent des goodies sympas.</li>
<li>A boire. On peut toujours boire, c&#8217;est toujours bien fourni, et parfois de la bière est offerte par un stand ou Atlassian.</li>
<li>Le bracelet, toujours aussi pratique.</li>
<li>Le système de vote à la sortie des salles (comme en 2012).</li>
<li>Le film du jeudi soir (avec les popcorns), même si je ne l&#8217;ai pas tellement apprécié (&#8221;<em>Le Cartel</em>&#8221; ou &#8221;<em>The Counselor</em>&#8221; en VO), je trouve que c&#8217;est quand même top comme idée.</li>
<li>Le site <a href="http://www.parleys.com">Parleys</a> qui héberge(ra) les sessions, toutes filmées (sauf, hélas, les Quickies et donc le mien)</li>
</ul>


<p>Les moins, ou les points d&#8217;amélioration :</p>

<ul>
<li>La nourriture. Je ne me souviens pas d&#8217;avoir super bien mangé à Devoxx 2012, mais j&#8217;ai vraiment l&#8217;impression que cette année c&#8217;était pire. Le mercredi midi c&#8217;était juste un sandwich, rien de folichon. Le lendemain, c&#8217;était une salade assez étrange (en gros, un sacré mélange), ce qui m&#8217;a fait finir au Quick. En dehors de ça, point de salut. Quelques gâteaux ont été jetés en pature à la foule affamée vers 16h, mais franchement, il y a un très gros axe d&#8217;amélioration sur ce point-là !</li>
<li>Le système de vote qui mériterait d&#8217;être mieux utilisé. En gros, il ne sert qu&#8217;à faire un &#8220;Top 3&#8221; des meilleures sessions du jour ou de la conférence entière. Il serait bien de fournir le score au speaker à la fin de la conférence, pour avoir une évaluation directe du ressenti des spectateurs.</li>
<li>Contrairement à l&#8217;année passée où j&#8217;avais eu la &#8220;révélation Angular&#8221;, cette année pas de &#8221;<em>Kick-ass</em>&#8221; présentations. Mais le niveau reste élevé, ne me faites pas dire ce que je ne dis pas :)</li>
</ul>


<p>Vivement 2014 :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devoxx 2013 - deuxième jour]]></title>
    <link href="http://linsolas.github.com/blog/2013/11/14/devoxx-2013-deuxieme-jour/"/>
    <updated>2013-11-14T09:50:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2013/11/14/devoxx-2013-deuxieme-jour</id>
    <content type="html"><![CDATA[<p><img src="http://linsolas.github.com/images/devoxx_logo.gif" title="Devoxx 2013" alt="Devoxx 2013" /></p>

<p>Voici la deuxième journée à Devoxx version 2013.
Pour commencer la journée, la Keynote de Google annonce la sortie de la version 1.0 du langage <a href="https://www.dartlang.org/">Dart</a>.
Dart est le langage créé par Google au dessus de JavaScript afin de rendre ce dernier plus utilisable, en offrant pas mal de choses des langages Java ou C# comme les classes, un vrai développement orienté objet, etc.</p>

<p>Il a aussi été question du projet <a href="https://github.com/angular/angular.dart">Angular Dart</a>, une implémentation d&#8217;<a href="http://angularjs.org/">Angular</a> sur le language Dart.</p>

<!-- more -->


<h2><a href="http://devoxx.be/dv13-francesc-campoy-flores.html?presId=3493">Go see all the ships in the world</a></h2>

<p><img src="http://linsolas.github.com/images/note-3.5.png" title="3.5/5" alt="3.5/5" /></p>

<p>On parle beaucoup du Big Data. C&#8217;est souvent théorique, ou à des exemples qui ne semblent pas très parlants.
<a href="https://twitter.com/@francesc">Francesc Campoy Flores</a> nous propose une session où nous devrions avoir au final une visualisation dynamique de la position et trajectoires de tous les bateaux du monde ! Cela s&#8217;annonce intéressant d&#8217;un point de vue technique, et quelque peu exotique quant au contenu.</p>

<p>Parlons tout d&#8217;abord des données. Nous avons 75,000 bateaux (en éliminant les petits bateaux). Il faut donc d&#8217;abord récupérer ces données.
Les bateaux disposent d&#8217;un système appelé <a href="http://en.wikipedia.org/wiki/Automatic_Identification_System">AIS</a> (<em>Automatic Identification System</em>), une sorte de GPS avant l&#8217;heure pour les navires. Toutefois, ce type de protocole est peu fiable, et difficile à gérer.</p>

<p>Il faut donc stocker toutes ces données. Bien entendu, il fait appel au cloud de Google pour cela.
Le problème qui se pose aussi est la tête des données AIS, qui ne ressemble à pas grand chose :</p>

<p><img src="http://linsolas.github.com/images/devoxx2013-boats1.jpg" title="Les données AIS" alt="Les données AIS" /></p>

<p>Il existe toutefois une librairie en C++ qui permet d&#8217;interpréter ces données. Le seul hic, c&#8217;est que le cloud de Google ne permet pas d&#8217;exécuter du C++. Il faut donc écrire un traducteur vers du CSV pour finalement restocker ces informations dans ce format plus pratique.</p>

<p><a href="https://developers.google.com/bigquery/">BigQuery</a> est ensuite utilisé pour extraire les informations de toutes ces données. Une requête assez basique pour récupérer les positions moyennes des bateaux prend 5.8s sur 14Go de données.</p>

<p>Il faut maintenant servir ces données, de façon rapide et dynamique. Pour cela, Fransesc utilise l&#8217;API REST de BigQuery depuis du JavaScript. Toutefois, il inclut une application herbergée sur AppEngine entre le browser et le serveur BigQuery. En effet, on risque sinon de trop faire jouer le cache de ce dernier et du coup ne pas avoir les dernières données disponibles.
Cette application va matérialiser les requêtes, ainsi qu&#8217;une gestion du cache (memcache). Cette application est développée avec le langage Go, pour ses performances.</p>

<p>Voilà l&#8217;architecture finale du système. Pas si simple !</p>

<p><img src="http://linsolas.github.com/images/devoxx2013-boats2.jpg" title="L'architecture pour voir les bateaux" alt="L'architecture pour voir les bateaux" /></p>

<p>Et le résultat, basée sur Google Maps API, WebGL et CanvasLayer montre tout d&#8217;abord une floppée de points sur une carte (75,000 quand même). Puis, en utilisant les données disponibles, ces points sont colorés en fonctin de leur vitesse. Ce calcul est fait par le GPU. On laisse le CPU - peu utilisé autrement - calculer l&#8217;histogramme donnant la répartition des vitesses :</p>

<p><img src="http://linsolas.github.com/images/devoxx2013-boats3.jpg" title="Coloration en fonction de la vitesse" alt="Coloration en fonction de la vitesse" /></p>

<p>Une coloration en fonction de l&#8217;orientation du bateau montre très bien les différents canaux de navigation, comme par exemple autour de l&#8217;Espagne.</p>

<p><img src="http://linsolas.github.com/images/devoxx2013-boats4.jpg" title="Coloration en fonction de l'orientation" alt="Coloration en fonction de l'orientation" /></p>

<p>Et au final :</p>

<p><img src="http://linsolas.github.com/images/devoxx2013-boats5.jpg" title="La représentation des bateaux sur une carte" alt="La représentation des bateaux sur une carte" /></p>

<p>Une présentation tout à fait intéressante pour comprendre la démarche du traitement de ces données. Seul bémol, je m&#8217;attendais à un peu de live coding ou tout du moins une démo du résultat (plutôt qu&#8217;une vidéo). Mais il est vrai que le nombre de données assez important ainsi qu&#8217;un WIFI un peu à la ramasse aurait risqué de casser un peu l&#8217;expérience.</p>

<h2><a href="http://devoxx.be/dv13-igor-minar.html?presId=3468">What is in store for the future of Angular</a></h2>

<p><img src="http://linsolas.github.com/images/note-4.png" title="4/5" alt="4/5" /></p>

<p>AngularJS avait été <a href="">ma claque et ma découverte</a> de Devoxx 2012. Depuis, le framework est devenu très populaire, et plusieurs sessions ont déjà eu lieu à Devoxx 2013, toutes blindées.
<a href="https://twitter.com/@IgorMinar">Igor Minar</a> et <a href="https://twitter.com/@mhevery">Misko Hevery</a>, deux des principaux membres du projet, viennent nous parler de ce qui attend Angular pour l&#8217;année 2014.</p>

<p>La première chose de prévue pour Angular, c&#8217;est de se baser encore plus sur les standards, en particulier les <em>web components</em>, qui inclut :</p>

<ul>
<li>Shadow DOM</li>
<li>Custom elements, <code>document.register()</code></li>
<li>Templates</li>
<li>Scoped CSS</li>
</ul>


<p>Autre point, c&#8217;est l&#8217;utilisation du <code>Object.observe</code> qui permettra de meilleures performances que le <em>dirty checking</em> d&#8217;Angular. L&#8217;autre avantage de cette méthode est qu&#8217;elle est asynchrone.</p>

<p>Asynchrone DI (<em>Dependency Injection</em>) vs AMD (<a href="http://en.wikipedia.org/wiki/Asynchronous_module_definition">Asynchronous Module Definition</a>).</p>

<p>L&#8217;introduction des <strong>zones</strong> va permettre de supprimer <code>$apply</code> et <code>$digest</code>.</p>

<p><img src="http://linsolas.github.com/images/devoxx2013-angularjs-zones.jpg" title="Les zones d'Angular" alt="Les zones d'Angular" /></p>

<ul>
<li><code>DefaultZone</code> se comporte comme le navigateur.</li>
<li><code>StackTraceZone</code> permet des stacktraces plus longues.</li>
<li><code>AngularZone</code> applique le data-binding.</li>
<li><code>MockZone</code> pour faciliter les tests.</li>
</ul>


<p>Angular va également profiter des nouveautés d&#8217;EcmaScript 6, en particulier les classes et les modules.
Il sera également possible d&#8217;utiliser des annotations dans le code Angular.</p>

<p><img src="http://linsolas.github.com/images/devoxx2013-angularjs-annotations.jpg" title="Les annotations en Angular" alt="Les annotations en Angular" /></p>

<p>Les <strong>contrats</strong> font également leur apparition dans Angular :</p>

<p><img src="http://linsolas.github.com/images/devoxx2013-angularjs-contracts.jpg" title="Les contrats en Angular" alt="Les contrats en Angular" /></p>

<p>Bref, je laisse les présentateurs résumer à ma place :</p>

<p><img src="http://linsolas.github.com/images/devoxx2013-angularjs-summary.jpg" title="Résumé des nouveautés d'Angular" alt="Résumé des nouveautés d'Angular" /></p>

<p>La présentation était moins éclatante que l&#8217;année passée, mais forcément le sujet s&#8217;y prétait moins. Toutefois, cela montre qu&#8217;Angular a encore de beaux jours devant lui !</p>

<h2><a href="http://devoxx.be/dv13-romain-linsolas.html?presId=3545">The ingredients for a perfect JavaScript Software Factory</a></h2>

<p><img src="http://linsolas.github.com/images/note-5.png" title="5/5" alt="5/5" /></p>

<p>(vous vous doutez bien que la note est ici tout à fait objective)
Là, c&#8217;est mon Quickie !
J&#8217;y parle de JavaScript et d&#8217;usine logicielle, en particulier d&#8217;outils.
Ma présentation est essentiellement divisée en trois parties. Compte tenu du temps imparti - à peine 15 minutes - il ne m&#8217;est pas possible d&#8217;aller pleinement dans les détails, mais l&#8217;idée est d&#8217;aborder les points principaux du sujet:</p>

<ul>
<li>Tout d&#8217;abord, j&#8217;insiste sur le fait qu&#8217;il faut réutiliser ce que l&#8217;on a déjà sous la main, selon le bon vieux principe du <em>Don&#8217;t Repeat Yourself</em> (DRY). En effet, nous sommes généralement des développeurs Java, et disposons à ce titre d&#8217;une usine logicielle déjà performante. Réutilisons donc Jenkins, SonarQube, et consorts !</li>
<li>Ensuite, intéressons nous aux outils propres à JavaScript. Là, je m&#8217;arrêtre surtout sur <a href="http://yeoman.io/">Yeoman</a>, c&#8217;est-à-dire <a href="https://github.com/yeoman/yo">Yo</a> pour créer des squelettes d&#8217;applications, <a href="http://bower.io/">Bower</a> pour gérer les dépendances et le packaging et enfin <a href="http://gruntjs.com/">Grunt</a>, un exécuteur de tâches (une sorte de Ant pour JavaScript, pour faire simple).</li>
<li>La dernière partie insiste sur le fait qu&#8217;une bonne usine logicielle n&#8217;est pas qu&#8217;une questions d&#8217;outils, mais aussi de bonnes pratiques. Et en terme de bonnes pratiques, les <em>tests</em> sont en première place. Je montre donc qu&#8217;il existe toutes sortes de librairies de tests en JavaScript, pour faire du test unitaire, du test fonctionnel, du BDD ou encore du test <em>front-end</em>.</li>
</ul>


<h2><a href="http://devoxx.be/dv13-dick-wall.html?presId=3713">Enregistrement live de JavaPosse</a></h2>

<p><img src="http://linsolas.github.com/images/note-4.png" title="4/5" alt="4/5" /></p>

<p>Le podcast de <a href="http://javaposse.com/">JavaPosse</a> est très connu et réputé. Comme chaque année, ils font un enregistrement live à Devoxx, à la manière des CastCodeurs.</p>

<p>Cette année, seule la moitié de l&#8217;équipe était présente, à savoir Chet Haase et Dick Wall. Du coup, la moitié des Cast Codeurs, avec Guillaume Laforge et Emmanuel Bernard est venue en renfort.</p>

<p><img src="http://linsolas.github.com/images/devoxx2013-javaposse.jpg" title="JavaPosse et les Cast Codeurs" alt="JavaPosse et les Cast Codeurs" /></p>

<p>Une session agréable, avec une session  avec de la bière offerte par Atlassian. Une fois de plus, merci à eux.</p>

<h2><a href="http://devoxx.be/dv13-andrzej-grzesik.html?presId=3500">Continuous Delivery antipatterns</a></h2>

<p><img src="http://linsolas.github.com/images/note-3.5.png" title="3.5/5" alt="3.5/5" /></p>

<p>A la SGCIB, nous sommes en plein dans le <em>Continuous Delivery</em>. Il me paraissait donc important de recueillir quelques nouveaux avis et de bons conseils. C&#8217;est dans ce but que j&#8217;assiste à la conférence de  <a href="http://devoxx.be/dv13-andrzej-grzesik.html">Andrzej Grzesik</a>.</p>

<p>Le problème est avant tout un problème de personnes, de process.
Il faut des dashboards, pour savoir qui (a) fait quoi.
Releases = risques. Il faut donc savoir les éviter (les risques, pas les releases !)</p>

<p>Paralléliser les releases. Mais quoi paralléliser ? A priori, tout est parallélisable. Le mieux est de voir ce qui est le plus pénible, le plus long à s&#8217;exécuter dans une release, et voir comment on peut le paralléliser.</p>

<p>Autre problème fréquent : des équipes indépendantes, qui ne se parlent pas (devs contre ops par exemple). Il faut restaurer un canal de discussion, de communication.</p>

<p>L&#8217;infrastructure manuelle.
Il faut tester aussi son infrastructure. Avec <a href="http://www.opscode.com/chef/">Chef</a> par exemple, il est possible de faire une sorte de TDD. <a href="http://acrmp.github.io/foodcritic/">Food critic</a> ou <a href="http://www.vagrantup.com/">Vagrant</a> peuvent également être utiles.</p>

<h2><a href="http://devoxx.be/dv13-shaun-smith.html?presId=3568">Practical RESTful persistence</a></h2>

<p><img src="http://linsolas.github.com/images/note-2.5.png" title="2.5/5" alt="2.5/5" /></p>

<p>Finalement, on change de sujet, pour aller voir <a href="https://twitter.com/@shaunmsmith">Shaun Smith</a> parler de la nouvelle fonctionnalité d&#8217;<a href="http://www.eclipse.org/eclipselink/">EclipseLink</a> de <a href="http://wiki.eclipse.org/EclipseLink/Development/2.4.0/JPA-RS">JPA-RS</a>, qui intgère JAX-RS, JAXB et JPA.
L&#8217;idée est ici de réaliser un binding entre des entités et du JSON entre autres via des annotations dans les entités.</p>

<p>Bon, j&#8217;avoue être passé à côté de cette session, je n&#8217;ai pas trop compris le pourquoi de tout ça.</p>

<p>Voilà, la deuxième journée s&#8217;achève avec encore de belles expériences (sauf gastronomiques !).
Demain sera plus calme, avec seulement une demi-journée de travail.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devoxx 2013 - premier jour]]></title>
    <link href="http://linsolas.github.com/blog/2013/11/13/devoxx-2013-premier-jour/"/>
    <updated>2013-11-13T08:56:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2013/11/13/devoxx-2013-premier-jour</id>
    <content type="html"><![CDATA[<p><img src="http://linsolas.github.com/images/devoxx_logo.gif" title="Devoxx 2013" alt="Devoxx 2013" /></p>

<p>Et voilà, ma deuxième expérience belge de Devoxx est entamée.</p>

<!-- more -->


<h2><a href="http://devoxx.be/dv13-sven-peters.html?presId=3143">How To Do Kick-Ass Software Development</a></h2>

<p><img src="http://linsolas.github.com/images/note-4.png" title="4/5" alt="4/5" /></p>

<p><img src="http://linsolas.github.com/images/devoxx-2013-kickass.jpg" title="Kick-ass development" alt="Kick-ass Development" /></p>

<p>J&#8217;ai choisi cette présentation de <a href="https://twitter.com/@svenpet">Sven Peters</a> d&#8217;Atlassian, car j&#8217;avais beaucoup apprécié sa présentation l&#8217;année passée sur <a href="http://linsolas.github.io/blog/2012/11/18/devoxx-2012-jour-1/">7 things to make a good team great</a>. Il y présentait 7 trucs pour rendre une bonne équipe encore meilleure. C&#8217;est d&#8217;ailleurs lors de cette présentation qu&#8217;il m&#8217;est venue l&#8217;idée de mettre les <a href="http://www.brownbaglunch.fr">Brown Bag Lunch</a> à la SGCIB (via l&#8217;idée &#8221;<em>Feed you brain</em>&#8221;), peu de temps avant que ce mouvement ne prenne de l&#8217;ampleur en France.</p>

<p>Sven s&#8217;est intéressé au film <a href="http://www.imdb.com/title/tt1250777/">Kick-Ass</a>, où une personne quelconque souhaite devenir un super-héros, juste en portant un costume. Forcément, au début il se fait dérouiller, mais persiste. Et c&#8217;est le message de Sven : se prendre des gamèles, mais toujours se relever.</p>

<p>Mais que souhaite t-on atteindre avec son équipe ?</p>

<ul>
<li>un meilleur software ;</li>
<li>moins d&#8217;<em>overhead</em> ;</li>
<li>un développement plus rapide ;</li>
<li>des clients heureux ;</li>
<li>des développeurs heureux.</li>
</ul>


<p>Il y a quelques temps, la solution à tous les problèmes était l&#8217;agilité. Mais qu&#8217;en est-il en 2013 ?
Le problème de toute méthodologie ou technologie c&#8217;est qu&#8217;au début c&#8217;est super, mais très vite les soucis commencent à surgir, jusqu&#8217;à s&#8217;apercevoir que cette solution ne résoud pas tous les problèmes (voir la <a href="http://en.wikipedia.org/wiki/Hype_cycle">Gartner Hype Curve</a>).</p>

<p>Il faut toujours garder à l&#8217;esprit de construire la bonne chose (&#8221;<em>Building the right thing</em>&#8221;).
Une idée est le &#8221;<em>Fake it til you make it</em>&#8221;.
Sven nous montre l&#8217;exemple à ne pas suivre avec le <a href="http://en.wikipedia.org/wiki/Microsoft_Kin">téléphone Kin</a> de Microsoft. Censé être très adapté à la nouvelle génération, il fut un échec très retentissant, sorti de la vente à peine au bout de deux semaines, et aura fait perder plus d&#8217;un milliard de dollars à la firme !</p>

<p><img src="http://www.digitaltrends.com/wp-content/uploads/2010/06/043775-microsoft-kin.jpg" title="Microsoft Kin" alt="Image Microsoft Kin" /></p>

<p>A l&#8217;opposé, IBM a voulu tester une application de reconnaissance vocale.
Plutôt que de développer un système complexe, ils ont triché en mettant une personne réelle dont le rôle était d&#8217;exécuter les tâches dictées par un cobaye. L&#8217;expérimentation n&#8217;ayant pas convaincue, il fut décidé que l&#8217;application réelle ne serait pas développée.</p>

<p>Passons à l&#8217;importance du feedback. Celui-ci doit répondre à trois critères :</p>

<ul>
<li>facile à trouver ;</li>
<li>simple ;</li>
<li>rapide à soumettre.</li>
</ul>


<p>Il ne faut pas embêter directement les développeurs avec les feedbacks. Par exemple, pour l&#8217;équipe GMail, il y a 100 développeurs pour 425M utilisateurs. Imaginer que ce soit les développeurs qui traitent directement les feedbacks des utilisateurs. Le développement de l&#8217;application n&#8217;avancerait jamais.
Cependant, tous doivent être conscients de ce qui ne va pas.</p>

<p>Chaque jour, l&#8217;équipe d&#8217;Atlassian se réunit 45 minutes pour revoir ces feedbacks et en faire quelque chose de personnel.
De plus, chaque développeur passe une semaine par an au support de premier niveau, pour être en contact directement avec les problèmes des utilisateurs.</p>

<p>Autre point, ce qu&#8217;ils appellent le <em>Developer on Test</em>. Il s&#8217;agit de faire remplir le rôle de testeur aux développeurs.
Pour cela, six astuces :</p>

<ul>
<li>Le training. Comment penser comme un testeur ?</li>
<li>Faire du <em>pairing</em> entre un testeur et un développeur.</li>
<li><em>Blitz Test</em> : durant une journée, toute la compagnie - et pas seulement les développeurs et les testeurs - teste une nouvelle vesion.</li>
<li>Définir des recettes de tests.</li>
<li>Instaurere des sessions séparées : pendant une heure, deux équipes testent les mêmes choses, puis comparent leurs résultats.</li>
<li>La chasse aux bugs : pendant une semaine, un développeur est dédié à la chasse aux bugs sur tous les éléments marqués comme Terminés.</li>
</ul>


<p>Sven nous rappelle alors que &#8220;La qualité est la responsabilité de chacun&#8221;.</p>

<p>Sven passe ensuite sur le design. A Atlassian, les développeurs font aussi du design.
Ils n&#8217;étaient pas forcément mauvais, mais cela avait tendance à partir dans tous les sens.
Ce dont ils ont besoin, c&#8217;est de lignes directrices, de <em>design guidances</em> (<a href="https://developer.atlassian.com/design">les guidlines de design d&#8217;Atlassian</a>).</p>

<p>Ils organisent également des workshops pour les développeurs.</p>

<p>Comme un développement complet requiert la collaboration de plusieurs départements, il est important de supprimer les frictions qui peuvent apparaitre entre eux.</p>

<p>Atlassian définit également des <em>guidelines</em> pour le développement. Ainsi, pour chaque tâche une branche est créée sur Git.
Leur durée de vie est ainsi très courte (environ 2 jours).
Puis, pour merger le code, ils passent par des <em>push requests</em>, ce qui fait que le nouveau code est revu et validé par ses pairs. Ce nouveau code n&#8217;est donc plus de la responsabilité d&#8217;un seul développeur.</p>

<p>Dernier point : l&#8217;automatisation. Le principe est d&#8217;échouer rapidement (<em>Fail fast</em>). 4 choses à retenir :</p>

<ul>
<li>Mettre à disposition les artifacts générés.</li>
<li>Paralleliser les tests pour les accélérer.</li>
<li>Avoir une stratégie de builds. Créer des couches de tests selon leur catégorie, leur intérêt.</li>
<li>Toujours avoir un oeil sur les statistiques. Savoir par exemple ce qui prend du temps sur un build, pour être en mesure de l&#8217;accélérer.</li>
</ul>


<p>Encore une belle présentation de Sven Peters.</p>

<h2><a href="http://devoxx.be/dv13-chet-haase.html?presId=3193">Patterns, Shmatterns</a></h2>

<p><img src="http://linsolas.github.com/images/note-4.png" title="4/5" alt="4/5" /></p>

<p>Pourquoi cette présentation ? Tout simplement pour son orateur, <a href="https://twitter.com/@chethaase">Chet Haase</a>. L&#8217;année passée, il avait aussi présenté un Quickie (<a href="">The Future of Software Development Process Methodology Effectiveness</a>) qui avait été un beau succès.</p>

<p>Encore une fois, la salle était comble. Chet Haase a cette fois-ci passé en revue un certain nombre de patterns et les a comparé avec ses propres patterns, ce qui en faisait quelque chose d&#8217;assez drôle.</p>

<p><img src="http://linsolas.github.com/images/devoxx-2013-chethaase.jpg" title="Le design pattern Refactory" alt="Le design pattern Refactory" /></p>

<h2><a href="http://devoxx.be/dv13-sven-peters.html?presId=3144">Don&#8217;t use Git</a></h2>

<p><img src="http://linsolas.github.com/images/note-4.png" title="4/5" alt="4/5" /></p>

<p>A nouveau, <a href="https://twitter.com/@svenpet">Sven Peters</a> sur la scène. Le titre de la conférence peut paraître provocateur, tant Git est utilisé partout (Atlassian a même Stash dans son catalogue, un gestionnaire de repositories Git).
Mais cela est en fait une façon de promouvoir ce système de gestion de sources.</p>

<p>Sous le ton de l&#8217;ironie, Sven essaie de démonter les arguments qui font de Git un vrai succès. Git permet de travailler en mode déconnecté ? Mais c&#8217;est la fin du travail collaboratif ! Git rend les merges faciles et presque automatiques ? Mais le travail de merge sur SVN est une ôde à la cohésion d&#8217;équipe&#8230;</p>

<p>Bien entendu, tout cela n&#8217;est que prétexte pour montrer en quoi Git est supérieur aux anciens gestionnaires de sources comme SVN.</p>

<h2><a href="http://devoxx.be/dv13-nikolay-chashnikov.html?presId=3772">Efficient coding in IntelliJ IDEA</a></h2>

<p><img src="http://linsolas.github.com/images/note-2.png" title="2/5" alt="2/5" /></p>

<p><a href="http://devoxx.be/dv13-nikolay-chashnikov.html?presId=3772">Nikolay Chashnikov</a> est aux commandes pour nous montrer comment bien maitriser son IDE IntelliJ IDEA de JetBrains.
Après pas mal d&#8217;essais ratés, je suis finalement passé définitivement sur cet IDE depuis un an, et clairement, je ne reviendrais pas en arrière. Mais je suis conscient de n&#8217;utiliser qu&#8217;une toute petite partie des capacités de l&#8217;outil. J&#8217;attends donc de cette session qu&#8217;elle me donne plein de bons conseils.</p>

<p>Hélas, je resterais sur ma faim. Une bonne première partie de la session montre surtout les capacités d&#8217;autocomplétion proposées par IntelliJ. Le reste est avant tout la découverte (ou non) d&#8217;un certain nombre de raccourcis claviers. Bref, pas grand chose à se mettre sous la dent, si ce n&#8217;est 2 ou 3 nouveaux raccourcis. C&#8217;est chez payé pour une conférence d&#8217;une heure !</p>

<p>Je pense que cette session peut être intéressante pour une personne utilisant Eclipse et souhaitant comprendre pourquoi IntelliJ est si puissant. Mais pour un utilisateur d&#8217;IntelliJ, même un non expert comme moi, peu d&#8217;informations à en tirer. Dommage.</p>

<h2><a href="http://devoxx.be/dv13-tugdual-grall.html?presId=3281">Elastify your app: from SQL to NoSQL in less than one hour!</a></h2>

<p><img src="http://linsolas.github.com/images/note-4.png" title="4/5" alt="4/5" /></p>

<p>J&#8217;avais déjà assisté à cette présentation <a href="">lors de Devoxx France 2013</a>, toujours faite par <a href="https://twitter.com/@tgrall">Tugdual Grall</a> et <a href="https://twitter.com/@dadoonet">David Pilato</a>.
Je me suis dit que j&#8217;allais quand même y jeter un oeil pour mieux l&#8217;apprécier.</p>

<p><img src="http://linsolas.github.com/images/devoxx-2013-elastify.jpg" title="Elastify your application" alt="Elastify your application" /></p>

<p>N&#8217;hésitez pas à relire <a href="http://linsolas.github.io/blog/2013/03/28/devoxx-france-2013-jour-2/">mon résumé lors de Devoxx France 2013</a>.</p>

<h2><a href="http://devoxx.be/dv13-attila-szegedi.html?presId=3732">The Curious Case of JavaScript on the JVM</a></h2>

<p><img src="http://linsolas.github.com/images/note-3.png" title="3/5" alt="3/5" /></p>

<p>J&#8217;aime Java, j&#8217;aime le JavaScript. Je me dis qu&#8217;une session mélangeant les deux pourrait être intéressante.
Je me décide donc d&#8217;aller voir ce qu&#8217;en dit <a href="https://twitter.com/@szegedi">Attila Szegedi</a>.
Il y était question de <a href="http://openjdk.java.net/projects/nashorn/">Nashorn</a>, qui est l&#8217;implémentation d&#8217;un <em>runtime</em> JavaScript hautes performances sur la JVM.</p>

<p>En gros, on écrit du JavaScript mélangé à du Java - à moins que ce ne soit l&#8217;inverse ? A noter que Nashorn devrait être <em>normalement</em> inclus dans le JDK 1.8.</p>

<p>J&#8217;ai un peu de mal à voir l&#8217;intérêt de ce mélange, mais pourquoi pas. C&#8217;est aussi ce genre de chose qui fait la richesse de la plateforme de la JVM :)</p>

<p>Voilà une première journée déjà bien intéressante, j&#8217;attends avec impatience la deuxième fournée de conférences, qui s&#8217;annonce de belle qualité.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mon programme pour Devoxx 2013]]></title>
    <link href="http://linsolas.github.com/blog/2013/11/12/mon-programme-pour-devoxx-2013/"/>
    <updated>2013-11-12T19:35:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2013/11/12/mon-programme-pour-devoxx-2013</id>
    <content type="html"><![CDATA[<p><img src="http://linsolas.github.com/images/devoxx_logo.gif" title="Devoxx 2013" alt="Devoxx 2013" /></p>

<p>Et c&#8217;est parti mon Kiki !</p>

<p>LA conférence de l&#8217;année a débuté ce lundi 11 novembre, je veux bien sûr parler de <a href="http://devoxx.be/">Devoxx</a> !
Pour la 4e fois d&#8217;affilée, et la 2e en ce qui concerne la version &#8220;World&#8221; en Belgique, j&#8217;y serais à partir de demain mercredi.</p>

<p>Mon programme n&#8217;est bien sûr pas encore défini, mais j&#8217;ai noté quelques sessions qui m&#8217;intéressent déjà.</p>

<!-- more -->


<ul>
<li>Je commencerais sans doute par <a href="http://devoxx.be/dv13-sven-peters.html?presId=3143">How To Do Kick-Ass Software Development</a> de <a href="https://twitter.com/@svenpet">Sven Peters</a>. J&#8217;avais assisté à sa conférence l&#8217;année passée <a href="http://linsolas.github.io/blog/2012/11/18/devoxx-2012-jour-1/">7 things: How to make good teams great</a> que j&#8217;avais beaucoup apprécié. Je ne sais pas s&#8217;il y aura beaucoup de nouveautés, mais je pense que ça vaut quand même le coup d&#8217;oeil. Il y a également <a href="http://devoxx.be/dv13-dierk-knig.html?presId=3563">UI Engineer - the missing profession</a> par <a href="https://twitter.com/@mittie">Dierk König</a>, qui pourra être ma session de backup.</li>
<li>Pour entamer les Quickies, j&#8217;opterais pour <a href="http://devoxx.be/dv13-chet-haase.html?presId=3193">Patterns, Shmatterns</a>, une présentation par <a href="https://twitter.com/@chethaase">Chet Haase</a> qui devrait être du même niveau que sa présentation <a href="http://linsolas.github.io/blog/2012/11/18/devoxx-2012-jour-1/">The Future of Software Development Process Methodology Effectiveness</a> faite l&#8217;année dernière : complètement décalée et très drôle.</li>
<li>Pour le Quickie suivant, ce sera peut-être encore Sven Peters avec <a href="http://devoxx.be/dv13-sven-peters.html?presId=3144">Don&#8217;t use Git</a> ou <a href="http://devoxx.be/dv13-xavier-coulon.html?presId=3586">HTTP caching in practice</a>.</li>
<li>Pour la digestion, je me laisserais bien tenté par un <a href="http://devoxx.be/dv13-nikolay-chashnikov.html?presId=3772">Efficient coding in IntelliJ IDEA</a> par <a href="http://devoxx.be/dv13-nikolay-chashnikov.html?presId=3772">Nikolay Chashnikov</a>, parce qu&#8217;on ne connait pas assez son IDE. Au cas où, il y a bien une session avec un robot avec <a href="http://devoxx.be/dv13-tobias-antonsson.html?presId=3730">The Crazyflie Nano Quadcopter development platform</a> par <a href="http://devoxx.be/dv13-tobias-antonsson.html">Tobias Antonsson</a>.</li>
<li>Puis, un petit <a href="http://devoxx.be/dv13-tugdual-grall.html?presId=3281">Elastify your app: from SQL to NoSQL in less than one hour!</a> par mes amis <a href="https://twitter.com/@tgrall">Tugdual Grall</a> et <a href="https://twitter.com/@dadoonet">David Pilato</a>, qui montrent qu&#8217;il est possible d&#8217;intégrer facilement du NoSQL dans une application Legacy. Je me dis d&#8217;ailleurs qu&#8217;avec leurs bons conseils et ceux de <a href="http://devoxx.be/dv13-david-gageot.html?presId=3108">David Gageot</a>, on pourrait faire passer une application Legacy dans le cloud avec NoSQL en 120 minutes chrono :o)</li>
<li>Pour continuer, j&#8217;hésite entre <a href="http://devoxx.be/dv13-luke-daley.html?presId=3680">Taming Functional Web Testing (with Spock &amp; Geb)</a> par <a href="https://twitter.com/@ldaley">Luke Daley</a> et <a href="http://devoxx.be/dv13-attila-szegedi.html?presId=3732">The Curious Case of JavaScript on the JVM</a> par <a href="https://twitter.com/@szegedi">Attila Szegedi</a>.</li>
</ul>


<p>Je ne sais pas encore comment je finirais ma première journée, mais elle aura déjà été bien remplie !
Pour le jeudi, quelques idées :</p>

<ul>
<li><a href="http://devoxx.be/dv13-francesc-campoy-flores.html?presId=3493">Go see all the ships in the world</a> par <a href="https://twitter.com/@francesc">Francesc Campoy Flores</a> qui se propose de construire une visualisation dynamique de la position et trajectoire de tous les bateaux du monde ! Un vaste programme&#8230;</li>
<li>Pour la suite, j&#8217;aimerais bien assister à <a href="http://devoxx.be/dv13-igor-minar.html?presId=3468">What is in store for the future of Angular</a> par <a href="https://twitter.com/@IgorMinar">Igor Minar</a> et <a href="https://twitter.com/@mhevery">Misko Hevery</a>, mais je pense que ce sera l&#8217;une des sessions les plus blindées, tant AngularJS est populaire en ce moment !</li>
<li>Mon premier Quickie aurait bien été <a href="http://devoxx.be/dv13-david-pilato.html?presId=3282">Make sense of your (BIG) data!</a> par <a href="https://twitter.com/@dadoonet">David Pilato</a>, mais il se trouve que je passe à la même heure que lui ! Ce sera donc <a href="http://devoxx.be/dv13-romain-linsolas.html?presId=3545">The ingredients for a perfect JavaScript Software Factory</a> par <a href="https://twitter.com/@romaintaz">moi-même</a> !</li>
<li>Pour la suite, ce sera peut-être <a href="http://devoxx.be/dv13-sam-brannen.html?presId=3235">Spring Framework 4.0 - The Next Generation</a> par <a href="https://twitter.com/@sam_brannen">Sam Brannen</a>, ou l&#8217;enregistrement du PodCast <a href="http://devoxx.be/dv13-dick-wall.html?presId=3713">JavaPosse</a>.</li>
<li>Je continuerais par du Continuous Delivery avec <a href="http://devoxx.be/dv13-andrzej-grzesik.html?presId=3500">Continuous Delivery antipatterns</a> par <a href="http://devoxx.be/dv13-andrzej-grzesik.html">Andrzej Grzesik</a> puis <a href="http://devoxx.be/dv13-hans-dockter.html?presId=3604">Continuous Delivery Patterns for Large Software Stacks</a> de <a href="https://twitter.com/@gradleware">Hans Dockter</a>.</li>
</ul>


<p>Je crois bien que ma journée de jeudi s&#8217;achèvera par le film proposé par Devoxx, <a href="http://www.allocine.fr/film/fichefilm_gen_cfilm=202971.html">The Counselor, Le Cartel</a> de Ridley Scott.
Pour la dernière journée (enfin, demi-journée), mon programme :</p>

<ul>
<li>Je commencerais peut-être par <a href="http://devoxx.be/dv13-scott-kurz.html?presId=3728">Batch Applications for the Java Platform (JSR 352)</a> de <a href="http://devoxx.be/dv13-scott-kurz.html">Scott Kurz</a>.</li>
<li>Bien évidemment, un Devoxx ne serait rien sans son enregistrement live des <a href="http://devoxx.be/dv13-vincent-massol.html?presId=3430">CastCodeurs</a>. Ma place y est donc déjà réservée :o)</li>
<li>Pour terminer cette conférence, je me laisserais bien tenté par <a href="http://devoxx.be/dv13-jean-franois-denise.html?presId=3759">Avatar.js, Server-Side JavaScript on the Java Platform</a> par <a href="http://devoxx.be/dv13-jean-franois-denise.html">Jean-François Denise</a>.</li>
</ul>


<p>Voilà, mon programme est établi. Bien entendu, celui-ci va sans aucun doute beaucoup évoluer quand je serais sur place. On verra vendredi après-midi si j&#8217;avais bien jugé ou pas&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SoftShake 2013 - facilitation graphique]]></title>
    <link href="http://linsolas.github.com/blog/2013/10/29/softshake-2013-facilitation-graphique/"/>
    <updated>2013-10-29T18:31:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2013/10/29/softshake-2013-facilitation-graphique</id>
    <content type="html"><![CDATA[<p>Les organisateurs de la conférence SoftShake ont eu la très bonne idée d&#8217;inviter Elizabeth Auzan et Sébastien Gerbier des &#8221;<em>Visual Thinkers</em>&#8221;, ou <em>Facilitateus Visuels</em>, de la société <a href="http://www.lowtech-hitouch.com/">Lowtech Hitouch</a>.</p>

<p>L&#8217;idée est simple : ils se présentent à différentes sessions et illustrent graphiquement ce qu&#8217;ils entendent, ce qu&#8217;ils comprennent.
Je n&#8217;ai pas eu la chance qu&#8217;ils viennent à ma session, mais je partage quand même les très jolies planches que voici (désolé pour la 4e qui est un peu floue) :</p>

<p><img src="http://linsolas.github.com/images/softshake-2013-dessin1.jpg" title="Première image" alt="Priemère image" /></p>

<!-- more -->


<p><img src="http://linsolas.github.com/images/softshake-2013-dessin2.jpg" title="Deuxième image" alt="Deuxième image" />
<img src="http://linsolas.github.com/images/softshake-2013-dessin3.jpg" title="Troisième image" alt="Troisième image" />
<img src="http://linsolas.github.com/images/softshake-2013-dessin4.jpg" title="Quatrième image" alt="Quatrième image" />
<img src="http://linsolas.github.com/images/softshake-2013-dessin5.jpg" title="Cinquième image" alt="Cinquième image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SoftShake 2013 - deuxième jour]]></title>
    <link href="http://linsolas.github.com/blog/2013/10/25/softshake-2013-deuxieme-jour/"/>
    <updated>2013-10-25T16:19:00+02:00</updated>
    <id>http://linsolas.github.com/blog/2013/10/25/softshake-2013-deuxieme-jour</id>
    <content type="html"><![CDATA[<p><img src="http://linsolas.github.com/images/soft-shake-2013.png" title="Soft Shake 2013" alt="Soft Shake 2013" /></p>

<p>Et c&#8217;est parti pour le second jour de la conférence <strong>Soft-Shake</strong>.</p>

<!-- more -->


<h2>Keynote collaborative</h2>

<p>La première keynote de la journée était une keynote &#8220;collaborative&#8221;.
Chaque responsable d&#8217;un track de sessions avait la parole pendant 4 minutes pour nous exposer sa vision à moyen terme (entre 2 et 5 ans) concernant sa technologie. Par exemple, le responsable de la partie &#8220;web&#8221; nous a dit que le JavaScript sera encore plus présent qu&#8217;aujourd&#8217;hui, en particulier du côté serveur.</p>

<h2>Keynote Programatoo</h2>

<p><img src="http://linsolas.github.com/images/note-4.5.png" title="4.5/5" alt="4.5/5" /></p>

<p>La seconde keynote parlait de &#8221;<strong>Programatoo</strong>&#8221;, un projet lancé par Audrey Neveu (<a href="https://twitter.com/Audrey_Neveu">@Audrey_Neveu</a>) et Aline Paponaud (<a href="https://twitter.com/bootis">@bootis</a>) de <a href="http://www.sfeir.fr">SFEIR</a>.
Qu&#8217;est-ce que Programatoo ?
Il s&#8217;agit d&#8217;apprendre à coder à nos enfants, n&#8217;y plus n&#8217;y moins.</p>

<p><img src="http://linsolas.github.com/images/programatoo.jpg" title="Programatoo" alt="Programatoo" /></p>

<p>Revenons 20 ans en arrière pour comprendre la génèse de cette idée.
Au milieu des années 80, Aline et Audrey sont des petites filles (très sages, forcément) déjà attirées par les mystères de l&#8217;informatique et des ordinateurs. Elles veulent comprendre comment ça marche. 10 ans plus tard, leur intérêt est toujours intact, mais hélas elles se heurtent souvent à des stéréotypes (&#8221;<em>ce n&#8217;est pas pour les filles !</em>&#8221;) ou l&#8217;incompréhension du milieu scolaire pour ce domaine.
Audrey apprend avec joie qu&#8217;il y a des cours d&#8217;informatique dans son lycée. Elle s&#8217;y inscrit, mais cela se résumera à apprendre à utiliser Word ou Excel. C&#8217;est la déception.
De son côté, Aline n&#8217;a guère plus de succès.
Fort heureusement, elles ne baissent pas les bras, et embrassent le métier de programmeuse.</p>

<p>En 2012, Aline va trouver Audrey pour proposer une idée géniale : et si on apprenait à coder à nos enfants ! C&#8217;est ainsi qu&#8217;en mars 2012 nait la première session &#8220;Programatoo&#8221;, avec les enfants des employés de SFEIR. Et c&#8217;est un succès.</p>

<p>Les choses ne sont pas pour autant parfaites.
Elles font un constat navrant. Parmi les participants, il y avait deux adolescentes. Celles-ci sont parfaitement à l&#8217;aise avec les ordinateurs, du moins quand il s&#8217;agit d&#8217;utiliser Facebook, YouTube et autres services du genre. Mais elles sont incapables de vraiment utiliser un ordinateur, de comprendre comment cela fonctionne, ni même voir en cette machine un merveilleux outil de créativité !</p>

<p>On dit que la jeune génération est une génération &#8220;digitale&#8221;, qu&#8217;elle est née avec un smartphone dans les mains. Je le constate aussi, mon fils de 6 ans maitrise depuis un moment l&#8217;iPad, qui n&#8217;a plus de secret pour lui.
Mais en réalité, nos enfants sont conditionnés pour &#8221;<strong>consommer</strong>&#8221; de l&#8217;informatique. Il faut les aider à en devenir des acteurs, des vrais utilisateurs.
Finalement, c&#8217;est un peu comme une carte et un GPS : aujourd&#8217;hui, l&#8217;utilisation d&#8217;un GPS est plutôt intuitive et il nous mâche tout le travail, on n&#8217;a plus qu&#8217;à suivre bêtement ses instructions. Du coup, il devient obsolète de savoir lire une carte papier classique, et pourtant cela reste la base pour savoir se positionner quelque part&#8230;</p>

<p>En tant qu&#8217;informaticien, il ne tient qu&#8217;à nous de changer la donne. Nous avons beaucoup d&#8217;outils, de langages destinés à l&#8217;aprentissage de la programmation, y compris destinés à de jeunes enfants.
Ayant discuté ensuite avec Audrey, je vais sans doute essayer de mettre mon fils à la programmation.
Bien entendu, point de Scala :) mais plutôt du <a href="http://scratch.mit.edu">Scratch</a> qui a l&#8217;avantage d&#8217;être très visuel et ludique.</p>

<p>Il faut noter que le projet Programatoo n&#8217;est pas unique en son genre. Les conférences &#8220;Devoxx 4 Kids&#8221; s&#8217;organisent par-ci, par-là. Il y en avait justement une à Genève le samedi qui a suivi la conférence Soft-Shake.</p>

<p>Programatoo a également gagné le &#8220;Duke Choice Awards 2013&#8221; à la conférence Java One. Une très belle consécration amplement méritée.
Bravo Audrey et Aline !</p>

<h2><a href="http://soft-shake.ch/2013/program/sessions/13_ruby/2013/10/25/01-speedup-your-web-app.html">Speed-up your webapp</a></h2>

<p><a href="http://soft-shake.ch/2013/program/authors/2013/10/24/alexis-bernard.html">Alexis Bernard</a> (<a href="https://twitter.com/alexis_bernard">@alexis_bernard</a>)</p>

<p><img src="http://linsolas.github.com/images/note-2.png" title="2/5" alt="2/5" /></p>

<p>Je suis ouvert d&#8217;esprit, je vais donc dans le track &#8220;Ruby&#8221; pour la première session de la journée.
Alexis nous parle d&#8217;optimisation quand on veut accélérer son site web.</p>

<p>Première question : pourquoi le faire ?
A cela, Alexis nous donne les exemples de Amazon et Yahoo! : pour le premier, diminuer le temps de réponse de 100ms, c&#8217;est un gain de revenu de l&#8217;ordre d&#8217;1%, ce qui n&#8217;est pas négligeable quand on voit leurs revenus&#8230;
Pour le second, une diminution de 400ms de ce temps de réponse, et c&#8217;est 9% de traffic gagnés !
Tout le monde n&#8217;est pas Amazon ou Yahoo! mais cela reste intéressant.</p>

<p>La technique d&#8217;Alexis est simple : mesurer, optimiser et mesurer encore.</p>

<p>Donc il faut mesurer. Pour cela, Alexis nous parle de quelques outils :</p>

<ul>
<li><a href="http://www.newrelic.com/">New Relic</a>, une solution SAAS visiblement assez poussée, qui historise en plus les mesures. Pratique pour comparer dans le temps. Mais c&#8217;est une solution assez chère visiblement (de l&#8217;ordre de 150€ par mois et par serveur).</li>
<li><a href="https://github.com/MiniProfiler/rack-mini-profiler">Rack Mini Profiler</a>, un outil Ruby, un peu dans la même idée que New Relic, mais avec moins de fonctionnalités, et pas d&#8217;historisation.</li>
<li><a href="https://www.pingdom.com/">Pingdom</a> dont l&#8217;une des fonctionnalités est de vérifier que les recommandations standard d&#8217;optimisations des sites-web sont bien respectées.</li>
<li><a href="http://www.webpagetest.org/">WebPageTest</a>, qui a l&#8217;astuce de tester chaque requête 2 fois de suite. Cela permet ainsi de vérifier l&#8217;efficacité du système de cache des ressources.</li>
<li>Chrome Dev Tools peut aussi être mis à profit pour mesurer les performances de l&#8217;application.</li>
</ul>


<p>Une fois les mesures faites, il faut corriger les problèmes. Alexis nous dit qu&#8217;il faut toujours optimser le <em>back-end</em> dans un premier temps. La plupart du temps cela va se résumer à optimiser la base de données, les requêtes, les indexes, etc.
Une fois ceci fait, on peut s&#8217;intéresser à l&#8217;optimisation <em>front-end</em>. Là aussi des outils peuvent nous aider, Chrome Dev Tools par exemple, ou imageoptim.com, pour améliorer la compression des images.</p>

<p>Une session intéressante, mais qui ne va pas à mon goût assez loin dans les détails. Les solutions proposées restent assez basiques au final.</p>

<h2><a href="http://soft-shake.ch/2013/program/sessions/13_java/2013/10/25/02-Golo.html">Golo, le langage qui donne des super-pouvoirs</a></h2>

<p><a href="http://soft-shake.ch/2013/program/authors/2013/10/24/philippe-charriere.html">Philippe Charrière</a> (<a href="https://twitter.com/k33g_org">@k33g_org</a>)</p>

<p><img src="http://linsolas.github.com/images/note-3.5.png" title="3.5/5" alt="3.5/5" /></p>

<p>Mais qu&#8217;est-ce que <strong>Golo</strong>, ce langage au nom rigolo ?
C&#8217;est un langage créé par Julien Ponge (@jponge) qui tourne sur la JVM, avec Java 7 ou 8 (pas avant, car Golo nécessite <code>invokedynamic</code> pour tourner, introduit en Java 7).
Ses principales forces sont sa simplicité, sa légèreté ainsi que la facilité d&#8217;étendre le langage.</p>

<p>Philippe nous montre quelques exemples de code, la syntaxe reste assez compréhensible pour un développeur Java.
Les lambdas, qui se font toujours attendre dans Java, sont là, tout comme les structures, des objets créés dynamiquement (<code>ObjectDynamic</code>) ou encore la possibilité d&#8217;étendre (<code>augment</code>) des classes existantes pour leur ajouter des fonctionnalités.</p>

<p>Je vous invite à aller jeter un oeil sur le site du langage - <a href="http://golo-lang.org">http://golo-lang.org</a> - pour vous rendre compte de ce qu&#8217;offre ce langage, et voir quelques exemples concrets de code. Voilà un basique <em>Hello World</em> :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>module EchoArgs
</span><span class='line'>
</span><span class='line'>function main = |args| {
</span><span class='line'>    println("Hello World...")
</span><span class='line'>    foreach arg in args {
</span><span class='line'>      println("-&gt;  " + arg)
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;ai aimé cette présentation, qui nous a donné un bon aperçu de ce qu&#8217;est Golo.
Toutefois, cela reste un langage dont le but m&#8217;échappe un peu - hormis le côté &#8220;fun&#8221; d&#8217;avoir créer son propre langage !</p>

<h2><a href="http://soft-shake.ch/2013/program/sessions/13_mobile/2013/10/25/3-Mobile-troll-party.html">Mobile Troll Party</a></h2>

<p><a href="http://soft-shake.ch/2013/program/authors/2013/10/24/xavier-bourguignon.html">Xavier Bourguignon</a> (<a href="https://twitter.com/xbourguignon">@xbourguignon</a>)</p>

<p><img src="http://linsolas.github.com/images/note-3.png" title="3/5" alt="3/5" /></p>

<p><img src="http://linsolas.github.com/images/softshake-2013-mobile-troll-party.jpg" title="Une session pleine de violences" alt="Une session pleine de violences" /></p>

<p>Une session pour le fun. Le but ici est de troller sévèrement sur iOS et Android.
Je m&#8217;attendait à un peu plus de trash, un peu plus de sujets polémiques. Le jeu des deux présentateurs n&#8217;était peut-être pas assez rodé je pense, mais d&#8217;après ce que j&#8217;ai compris, Xavier devait la faire seul jusqu&#8217;à la veille au soir où il a réussi à convaincre son partenaire de venir aussi.
Malgré tout, c&#8217;était une bonne ambiance, et les trolls étaient effectivement nombreux !</p>

<h2><a href="http://soft-shake.ch/2013/program/sessions/13_agile/2013/10/25/4-5-ans-et-500-releases-en-50-minutes.html">5 ans, 500 releases en 50 minutes</a></h2>

<p><a href="http://soft-shake.ch/2013/program/authors/2013/10/25/freddy-mallet.html">Freddy Mallet</a> (<a href="https://twitter.com/FreddyMallet">@FreddyMallet</a>) et <a href="http://soft-shake.ch/2013/program/authors/2013/10/24/olivier-gaudin.html">Olivier Gaudin</a> (<a href="https://twitter.com/gaudol">@gaudol</a>)</p>

<p><img src="http://linsolas.github.com/images/note-4.png" title="4/5" alt="4/5" /></p>

<p>Compte tenu du temps imparti (45 minutes), cette session a été renommée &#8221;<em>4 ans, 400 releases en 40 minutes</em>&#8221; :)
Cette session raconte la vie de la société SonarSource, éditeur de l&#8217;outil d&#8217;analyse de code SonarQube (connu anciennement simplement sous le nom Sonar).</p>

<p>Lorsque SonarSource a été créée, il y a 5 ans, c&#8217;était une petite startup lancée par trois personnes (en particulier Olivier et Freddy), sur leurs fonds propres. La société marche bien aujourd&#8217;hui, et a bien grossi (une 20aine de personnes d&#8217;ici la fin de l&#8217;anée), mais il y a eu beaucoup de problèmes, de &#8220;douleurs&#8221;. En particulier 5 :</p>

<ul>
<li>Les tests.</li>
<li>L&#8217;architecture.</li>
<li>L&#8217;infrastructure.</li>
<li>L&#8217;organisation.</li>
<li>Sonar on Sonar.</li>
</ul>


<p>Un gros travail a été fait sur les tests. Les tests unitaires d&#8217;abord, mais aussi les tests d&#8217;intégration. Le fait que Sonar supporte 5 bases de données différentes, qu&#8217;il existe une soixante de plugins ne rend pas les choses simples. Toutefois, ils arrivent à tout tester de façon assez efficace.</p>

<p>Initialement, HibernateORM et GWT avaient été choisis. Le premier car gérer 5 bases de données et autant de spécificités n&#8217;est jamais aisé. Le second, car à l&#8217;époque cela répondait bien aux besoins de l&#8217;équipe. Mais ces choix se sont finalement avérés être des maillons faibles, et progressivement ont été remplacés.</p>

<p>Les développeurs ne font pas que des développements, il a fallu embaucher une personne dédiée à part entière pour gérer l&#8217;infrastructure et les releases. Mais un tel cloisonnement n&#8217;est jamais très efficace, et SonarSource a ainsi créer une équipe de &#8220;DevOps&#8221;.</p>

<p>Afin de ne pas être désynchroniser avec les utilisateurs de l&#8217;outil, l&#8217;équipe de SonarSource utilise SonarQube directement. Le fameux principe du &#8221;<em>Eat your own dog food</em>&#8221; en somme. Ils ont ainsi une instance de &#8220;production&#8221; interne pour laquelle ils font des releases toutes les semaines. Cela implique donc d&#8217;être capable de faire des releases presque tous les jours, les développements de type &#8220;big bang&#8221; sont donc exclus.</p>

<p>Un dernier point abordé par Freddy et Olivier concerne le <em>Quality Gate</em> (un sujet qui mériterait sans doute une session à part entière). Il s&#8217;agit d&#8217;une sorte de contrat de qualité pour pouvoir faire une release. En gros, il faut respecter certaines règles, atteindre certains objectifs pour engager la release : par exemple, avoir clos tous les tickets JIRA, avoir une note SQALE de A (la meilleure), ne pas avoir de violations bloquantes ou critiques, ou même de violations non revues par l&#8217;équipe.</p>

<h2>Bilan</h2>

<p>Au final, ce sont deux très belles journées qui viennent de s&#8217;écouler.
La qualité des présentations et le niveau des speakers sont très bons.</p>

<p>Les plus :</p>

<ul>
<li>Du beau monde. C&#8217;est toujours un plaisir de revoir des gens qu&#8217;on apprécie, et de rencontrer physiquement des personnes que l&#8217;on ne connait que par Twitter.</li>
<li>De bons sujets.</li>
<li>Des tracks très variés : Java, agilité, web, mobile, IA/Robotique, BigData et NoSQL, Microsoft, Ruby on Rails.</li>
<li>Le repas des speakers (miam miam la fondue !)</li>
<li>Genève, très jolie ville.</li>
<li>Les organisateurs, très accueillants et toujours disponibles.</li>
<li>Les dessins en live des sessions (voir prochain billet).</li>
</ul>


<p>Les moins :</p>

<ul>
<li>La séparation des salles. Elles se trouvaient soit au 1e étage, soit au 5e. Changer de salle pouvait ainsi demander un peu de gymnastique !</li>
<li>A peu de choses près, les mêmes repas le midi sur les deux jours. Un peu plus de variété aurait été appréciable. Pas de problème au niveau de la quantité toutefois.</li>
<li>J&#8217;aurais bien aimé que SoftShake se tienne en hiver, Genève sous la neige doit être très agréable.</li>
</ul>


<p>Pour résumer, Soft Shake est une très belle conférence, dans l&#8217;esprit de Devoxx ou Mix-IT. J&#8217;y retournerais avec grand plaisir !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SoftShake 2013 - premier jour]]></title>
    <link href="http://linsolas.github.com/blog/2013/10/24/softshake-2013-premier-jour/"/>
    <updated>2013-10-24T11:39:00+02:00</updated>
    <id>http://linsolas.github.com/blog/2013/10/24/softshake-2013-premier-jour</id>
    <content type="html"><![CDATA[<p><img src="http://linsolas.github.com/images/soft-shake-2013.png" title="Soft Shake 2013" alt="Soft Shake 2013" /></p>

<p>Jacques Couvreur nous accueille pour <a href="http://soft-shake.ch/2013/fr/">cette session 2013 de la conférence Soft-Shake</a>. Ce sont 2 jours de conférences, neuf tracks en parallèle, une centaine d&#8217;orateurs, et 300 participants. A noter qu&#8217;environ un tiers des présentations se fait en anglais.
Une bonne petite conférence donc !</p>

<!-- more -->


<p><img src="http://linsolas.github.com/images/softshake-2013-Geneve.jpg" title="Le fameux Jet d'Eau de Genève" alt="Le fameux Jet d'Eau de Genève" /></p>

<p>Je vais <a href="http://www.touilleur-express.fr/2013/10/18/codeurs-en-seine-2013/">faire comme Nicolas Martignole</a> (a.k.a. le touilleur express), à savoir que je vais donner pour chaque session mon ROTI, le Retour sur le Temps Investi, autrement dit une note de 0 à 5 qui dénote l&#8217;intérêt que j&#8217;ai eu à suivre la présentation.</p>

<h2>Keynote</h2>

<p>Robin Cornelius</p>

<p><img src="http://linsolas.github.com/images/note-3.5.png" title="3.5/5" alt="3.5/5" /></p>

<p>Difficile de résumer cette keynote. C&#8217;était plus un discours de Robin Cornelius sur sa vie et celle de sa société, <a href="http://www.switcher">Switcher</a>.
Mais c&#8217;était tout de même agréable de l&#8217;écouter parler. Robin fait partie des gens passionnés par son travail, sa société, et que l&#8217;on pourrait écouter pendant des heures.
Bon démarrage donc&#8230;</p>

<h2><a href="http://soft-shake.ch/2013/program/sessions/13_mobile/2013/10/24/1-votre-premiere-application-ios.html">Votre première application iOS</a></h2>

<p><a href="http://soft-shake.ch/2013/program/authors/2013/10/24/marc-henri-primault.html">Marc-Henri Primault</a></p>

<p><img src="http://linsolas.github.com/images/note-2.png" title="2/5" alt="2/5" /></p>

<p>Présenter un langage en l&#8217;espace de 45 minutes, c&#8217;est compliqué, il y a forcément beaucoup de concepts à montrer.
Je pense que Marc-Henri a bien montré les bases, mais il est vrai que la lisibilité du code dans les slides n&#8217;était pas extraordinaire. La coloration de certains mots clés en violet sur fond noir n&#8217;est jamais bien rendue par un vidéoprojecteur.</p>

<p>Personnellement, j&#8217;ai eu du mal à accrocher car malheureusement le format de présentation ne se prête pas très bien à un tel apprentissage, en particulier pour des personnes comme moi qui n&#8217;y connaissent pas grand chose en développement iOS. Un &#8221;<em>Hands On</em>&#8221; s&#8217;y prêterait tellement mieux !</p>

<h2><a href="http://soft-shake.ch/2013/program/sessions/13_web_dev/2013/10/24/2-Generating_tests_from_code_or_how_to_test_better_and_faster.html">Generating tests from code, or how to test better and faster</a></h2>

<p><a href="http://soft-shake.ch/2013/program/authors/2013/10/24/renault-john-lecoultre.html">Renault John Lecoultre</a> (<a href="https://twitter.com/renajohn">@renajohn</a>)</p>

<p><img src="http://linsolas.github.com/images/note-4.png" title="4/5" alt="4/5" /></p>

<p>Tester une application JavaScript, c&#8217;est compliqué.
Il existe deux types d&#8217;analyse de code : l&#8217;analyse statique et dynamique.</p>

<p>La première se concentre à vérifier syntaxiquement si le code est correct.
On détectera ici l&#8217;utilisation de mauvais patterns, ou du code qui peut présenter un risque fort de bug, comme par exemple l&#8217;utilisation du <code>==</code> au lieu du <code>===</code> en JavaScript. Des outils comme <a href="http://www.jslint.com/">JSLint</a>, <a href="http://www.jshint.com/">JSHint</a> ou encore <a href="http://www.sonarqube.org/">SonarQube</a> sont tout à fait adaptés pour ce type d&#8217;analyse. Mais cela a quand même des limites.</p>

<p>L&#8217;analyse dynamique va exécuter le code pour en vérifier certaines règles, le cas le plus courant étant l&#8217;exécution de tests (unitaires, fonctionnels, etc.).</p>

<p>Renault nous parle toutefois d&#8217;un troisième type d&#8217;analyse, à savoir <strong>l&#8217;analyse symbolique</strong>.
Une rapide recherche sur Google me dit que &#8221;<em>L&#8217;analyse symbolique de données consiste en un mode d&#8217;analyse de tableaux de données statistiques arbitraires par perception cognitive de la surface expressionnelle du médium.</em>&#8221;
Bon, je crois qu&#8217;on va laisser tomber la définition et voir directement comment Renault l&#8217;illustre dans sa démonstration.</p>

<p>Il nous parle de l&#8217;outil <a href="https://unite.bugbuster.com/">Unite</a> de sa société <a href="http://bugbuster.com/">BugBuster</a>.
L&#8217;idée derrière cet outil est de lui fournir une fonction en entrée, et lui va essayer de trouver un jeu d&#8217;entrées (<em>inputs</em>) afin de pouvoir tester tous les chemins possibles dans la fonction.
Prenons l&#8217;exemple suivant :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// params : {x: Number}</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">puzzle</span><span class="p">(</span><span class="nx">x</span><span class="p">){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On le voit, pour parcourir les deux branches de cette fonction, nous devons faire en sorte d&#8217;évaluer à <code>true</code> la condition <code>if</code>, puis également à <code>false</code>. C&#8217;est là qu&#8217;intervient Unite. Il va analyser le code de la fonction pour nous trouver les deux valeurs d&#8217;entrée, ici <code>x = 0</code> puis <code>x = 1</code>.
Là où l&#8217;outil devient plus intéressant, c&#8217;est quand on a du code plus complexe. Prenons un nouvel exemple, avec une fonction de validation d&#8217;email (avec une expression régulière simple) :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// params : {email: String}</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">puzzle</span><span class="p">(</span><span class="nx">email</span><span class="p">){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">email</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/^\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$/</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unite va nous trouver deux entrées possibles : <code>`email = "a"</code> pour l&#8217;évaluation négative de la condition, et <code>email = "9@B.PH"</code> pour son évaluation positive.</p>

<p>Je dois dire que l&#8217;outil s&#8217;avère très intéressant, bien qu&#8217;encore à l&#8217;état de bêta. Reste la question de l&#8217;industrialisation d&#8217;un tel outil. Pour le moment, je le vois bien comme utilisation <em>one shot</em> pour trouver un bon ensemble de jeux de données pour tester une fonction.
En tout cas, c&#8217;est un outil à suivre de près&#8230;</p>

<h2><a href="http://soft-shake.ch/2013/program/sessions/13_web_dev/2013/10/24/3-Backbone_et_marionette_le_dev_js_simplifie.html">Backbone.js et Marionette, le développement JavaScript simplifié</a></h2>

<p><a href="http://soft-shake.ch/2013/program/authors/2013/10/24/xavier-bourguignon.html">Xavier Bourguignon</a> (<a href="https://twitter.com/xbourguignon">@xbourguignon</a>) et <a href="http://soft-shake.ch/2013/program/authors/2013/10/24/philippe-charriere.html">Philippe Charrière</a> (<a href="https://twitter.com/k33g_org">@k33g_org</a>)</p>

<p><img src="http://linsolas.github.com/images/note-4.png" title="4/5" alt="4/5" /></p>

<p>Backbone est une librairie légère pour faire du single page application (&#8220;MVC&#8221; / &#8220;MVP&#8221; côté client). Il se base sur la librarie <a href="http://underscorejs.org/">underscore</a>, pour le templating par exemple.
Backbone dispose d&#8217;un modèle objet. Son intérêt réside également dans sa facilité d&#8217;extension.</p>

<p>Philippe commence à nous montrer des exemples de code avec Backbone. Mais de l&#8217;avis de Xavier, &#8221;<em>Backbone c&#8217;est bien, sauf la partie vue</em>&#8221;.
Et c&#8217;est vrai que je trouve le code côté vue assez verbeux. C&#8217;est pour cela qu&#8217;il introduit la librairie <a href="http://marionettejs.com/">Marionette.js</a>, qui joue ainsi le rôle de surcouche à BackBone pour gérer la partie Vue. Ainsi, Marionette permet de faire du vrai <em>Single Page Application</em> avec BackBone.</p>

<p>Xavier et Philippe nous offrent ainsi une vision assez claire de ce framework, en montrant ses atouts mais aussi ses limites. J&#8217;avoue que je préfère toujours AngularJS, bien que ce dernier ait un côté un peu plus &#8220;magique&#8221; que Backbone qui semble plus accessible et plus compréhensible.</p>

<h2><a href="http://soft-shake.ch/2013/program/sessions/13_web_dev/2013/10/24/4-Web_Components_lavenir_des_developpeurs_web.html">Web Components, l&#8217;avenir des développeurs web</a></h2>

<p><a href="http://soft-shake.ch/2013/program/authors/2013/10/24/julien-vey.html">Julien Vey</a> (<a href="https://twitter.com/julienvey">@julienvey</a>)</p>

<p><img src="http://linsolas.github.com/images/note-4.png" title="4/5" alt="4/5" /></p>

<p>Les applications web sont aujourd&#8217;hui de plus en plus riches, et le langage HTML atteint vite ses limites.
C&#8217;est pour cela que le concept de <strong>composants web</strong> est arrivé.
Il s&#8217;agit d&#8217;un standard W3C en cours de rédaction, partiellement implémenté par les navigateurs (particulièrement Chrome).</p>

<p>L&#8217;idée est de créer des &#8220;éléments customs&#8221;. Imaginons le bouton &#8220;Twitter&#8221; que l&#8217;on peut ajouter sur son site, afin de permettre au visiteur du site de suivre votre compte Twitter.
Si vous regardez le code de ce bouton, vous verrez un truc illisible fait de HTML et JavaScript. Ne serait-ce pas plus simple d&#8217;avoir un tag <code>&lt;twitter user="romaintaz"/&gt;</code> par exemple ? De même, un composant pour noter un article n&#8217;aurait-il pas plus de sens sous la forme <code>&lt;ranking note="3"/&gt;</code> ?</p>

<p>Eh bien c&#8217;est (à peu près) possible aujourd&#8217;hui !</p>

<h3>Les templates</h3>

<p>La première brique à connaître, ce sont les templates. Ils permettent la séparation du fond et de la forme <em>via</em> l&#8217;utilisation de <code>&lt;template&gt;</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;template</span> <span class="na">id=</span><span class="s">&quot;monTemplate&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  // code HTML du template.
</span><span class='line'>  <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;comment&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/template&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce template est parsé, mais pas affiché. Les balises <code>&lt;script/&gt;</code> ne sont pas exécutées, et les images ne sont pas chargées. Le code ci-dessus est donc parfaitement valide. Pour l&#8217;instancier, il suffit d&#8217;un peu de code JavaScript :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#monTemplate&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">t</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;img&#39;</span><span class="p">).</span><span class="nx">src</span> <span class="o">=</span> <span class="s2">&quot;...&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">cloneNode</span><span class="p">(</span><span class="kc">true</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>A ce moment-là, les scripts sont exécutés, les images chargées et le DOM affiché.</p>

<h3>Encapsulation</h3>

<p>Passons à la deuxième brique : l&#8217;encapsulation.
Aujourd&#8217;hui, on utiliserait des <code>&lt;iframe&gt;</code>. Mais pouah !
Avec les web components, on utilise le principe du &#8221;<strong>shadow DOM</strong>&#8221;, c&#8217;est-à-dire du DOM masqué du reste de l&#8217;application. Exemple :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;video</span> <span class="na">controls</span> <span class="na">src=</span><span class="s">&quot;/ma/video&quot;</span><span class="nt">&gt;&lt;/video&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Avec Chrome Tools, on peut faire afficher le shadow DOM pour cette balise vidéo, sous un &#8220;tag&#8221; <code>#document-fragment</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;host&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">host</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#monTemplate&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">show</span> <span class="o">=</span> <span class="nx">host</span><span class="p">.</span><span class="nx">createShadowRoot</span><span class="p">();</span>
</span><span class='line'><span class="nx">shadow</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&lt;h2&gt;Hello&lt;/h2&gt;&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>On peut aussi passer par des templates :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">shadow</span><span class="p">.</span><span class="nx">webkitCreateShadowRoot</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il existe aussi le concept d&#8217;<em>Insertion point</em>, avec utilisation de <code>&lt;content&gt;&lt;/content&gt;</code> dans le shadow DOM. Le contenu de la balise du web component est injecté à la place du <code>&lt;content&gt;&lt;/content&gt;</code> défini dans le shadow DOM.</p>

<p>On peut aussi utiliser des sélecteurs pour ne récupérer qu&#8217;une partie du code HTML du composant web : <code>&lt;content select="h2"&gt;&lt;/content&gt;</code> qui récupèrera uniquement le code du <code>h2</code>, <code>&lt;content select="h1:first-child"&gt;&lt;/content&gt;</code> pour le premier élément de <code>h1</code> ou <code>&lt;content select="*"&gt;&lt;/content&gt;</code> pour récupérer le reste.</p>

<h3>Externalisation</h3>

<p>Comment peut-on créer des composants web et les utiliser ailleurs ? Cela se fait grâce à la balise <code>&lt;element&gt;</code> qui permet de créer ces nouveaux éléments :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;element</span> <span class="na">name=</span><span class="s">&quot;megabutton&quot;</span> <span class="na">extends=</span><span class="s">&quot;button&quot;</span> <span class="na">constructor=</span><span class="s">&quot;MegaButton&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;template&gt;</span>
</span><span class='line'>      ...
</span><span class='line'>  <span class="nt">&lt;/template&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script&gt;</span>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>  <span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/element&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et pour l&#8217;utiliser dans une autre page :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">rek=</span><span class="s">&quot;component&quot;</span> <span class="na">href=</span><span class="s">&quot;megabutton.html&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>...
</span><span class='line'><span class="nt">&lt;megabutton&gt;</span>Clique ici<span class="nt">&lt;/megabutton&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ces éléments ont également un cycle de vie sur lequel il est possible d&#8217;intéragir grâce à des fonctions JavaScript : <code>created</code>, <code>attributeChanged</code>, <code>inserted</code> ou <code>removed</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">lifecycle</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">inserted</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="p">...</span> <span class="p">},</span>
</span><span class='line'>  <span class="nx">removed</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Mutation Observer</h3>

<p>Ces éléments sont utilisés pour détecter des modifications dans le code JavaScript.</p>

<h3>Object.observe()</h3>

<p>Il s&#8217;agit ici du monitoring des modifications des objects JS, bien plus performante que tout autre solution existante aujourd&#8217;hui.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">observeChanges</span><span class="p">(</span><span class="nx">changes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">changes</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">change</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">change</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>                  <span class="c1">// Name</span>
</span><span class='line'>      <span class="nx">change</span><span class="p">.</span><span class="nx">type</span><span class="p">;</span>                  <span class="c1">// Type</span>
</span><span class='line'>      <span class="nx">change</span><span class="p">.</span><span class="nx">oldValue</span><span class="p">;</span>          <span class="c1">// Ancienne valeur</span>
</span><span class='line'>      <span class="nx">change</span><span class="p">.</span><span class="nx">object</span><span class="p">[</span><span class="nx">change</span><span class="p">.</span><span class="nx">name</span><span class="p">];</span> <span class="c1">// Nouvelle valeur</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ainsi, entre le <em>Dirty checking</em> et le <em>Object.observe()</em>, le gain de performances peut être de l&#8217;ordre de 20 fois !</p>

<h3>Etat actuel</h3>

<p>AngularJS apporte sa philosophie, déclaratif plutôt qu&#8217;impératif.
Les directives d&#8217;Angular sont un peu les customs éléments.</p>

<p>Le projet &#8221;<a href="http://www.polymer-project.org/polymer.html">polymer.js</a>&#8221; vise à intégrer ces nouveautés dans les navigateurs.</p>

<p>Il existe aussi le projet Polymer.Dart pour le langage Dart.</p>

<p>Le site &#8221;<a href="http://jonrimmer.github.io/are-we-componentized-yet/">Are we componentized yet?</a>&#8221;, montre l&#8217;état actuel de l&#8217;implémentation dans Chrome.
Du côté de Firefox, il existe des projets similaires Brick, X-Tag&#8230;</p>

<h3>Mon avis</h3>

<p>Une excellente session où j&#8217;ai appris pas mal de choses que je ne connaissais pas !</p>

<h2><a href="http://soft-shake.ch/2013/program/sessions/13_web_dev/2013/10/24/5-Du_Javascript_propre_Challenge_Accepted.html">Du JavaScript propre ? Challenge Accepted!</a></h2>

<p><a href="http://soft-shake.ch/2013/program/authors/2013/10/24/romain-linsolas.html">Romain Linsolas</a> (<a href="https://twitter.com/romaintaz">@romaintaz</a>) et <a href="http://soft-shake.ch/2013/program/authors/2013/10/25/julien-jakubowski.html">Julien Jakubowski</a> (<a href="https://twitter.com/jak78">@jak78</a>)</p>

<p><img src="http://linsolas.github.com/images/note-5.png" title="5/5" alt="5/5" /></p>

<p>Présentation tout simplement parfaite, sur un sujet somptueux. Du grand art !
Comment ça, je ne suis pas objectif ?</p>

<p>Bon, si vous voulez en savoir plus, revenez un peu en arrière sur mon blog, j&#8217;ai déjà parlé de cette présentation faite avec Julien à Devoxx.
Elle a encore plu, ça nous a fait très plaisir !</p>

<h2><a href="http://soft-shake.ch/2013/program/sessions/13_bigdata/2013/10/24/07-make-sense-of-your-big-data.html">Make sense of your (Big) Data</a></h2>

<p><a href="http://soft-shake.ch/2013/program/authors/2013/10/24/david-pilato.html">David Pilato</a> (<a href="https://twitter.com/dadoonet">@dadoonet</a>)</p>

<p><img src="http://linsolas.github.com/images/note-4.png" title="4/5" alt="4/5" /></p>

<p>David Pilato est &#8220;évangeliste&#8221; (à ne pas confondre avec Eve Angeli !) pour <a href="http://www.elasticsearch.org/">ElasticSearch</a>, un outil très puissant et très sympathique pour faire de la recherche.
Associé avec <a href="http://www.elasticsearch.org/overview/kibana/">Kibana</a>, David nous montre comment il est possible pratiquement en temps réel de construire un dashboard très complet sur un grand jeu de données - stockées dans des noeuds ElasticSearch. Autrement dit, <em>comment donner du sens à ses données</em>.</p>

<p>J&#8217;essaierais de faire un billet dédié, je trouve que cette session est très intéressante car la solution mise en place est fichtrement simple pour un résultat franchement étonnant !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Et quatre à la suite]]></title>
    <link href="http://linsolas.github.com/blog/2013/10/23/et-quatre-a-la-suite/"/>
    <updated>2013-10-23T19:05:00+02:00</updated>
    <id>http://linsolas.github.com/blog/2013/10/23/et-quatre-a-la-suite</id>
    <content type="html"><![CDATA[<p>Quatre à la suite ? Ai-je participé à Questions pour un Champion ? Non !</p>

<p>Bon, je n&#8217;ai pas blogué à ce sujet, mais j&#8217;aurais la chance dans trois semaines, d&#8217;assister à mon quatrième Devoxx. Et pour ne pas changer les bonnes habitudes, je me retrouve une nouvelle fois orateur !</p>

<p>Le sujet, c&#8217;est &#8221;<em>The perfect ingredients for a JavaScript Software Factory</em>&#8221;. Oui, encore du JavaScript dans une conférence pourtant orientée Java. Cela prouve bien notre ouverture d&#8217;esprit, à nous autres Javaïstes !</p>

<p>Bref, de quoi ça va parler ? En gros, de tout ce qu&#8217;il faut pour &#8220;industrialiser&#8221; son développement JavaScript. Un développeur Java dispose déjà de toute une panoplie d&#8217;outils et de pratiques pour développer correctement ses applications. Mais qu&#8217;en est-il pour un développeur JavaScript ? L&#8217;écosystème est-il désert ou au contraire fourmille-t-il de petites perles ?</p>

<p>Hélas, il s&#8217;agit d&#8217;un <strong>Quickie</strong>, ce qui veut dire que je n&#8217;aurais que 15 minutes pour aborder ce sujet tellement vaste. Je serais donc amené à surtout éfleurer ce sujet, mais cela me semble une bonne approche pour un développeur qui souhaite s&#8217;intéresser vraiment à faire du JavaScript propre !</p>

<p>Bref, si vous êtes à Anvers la semaine du 11 novembre, n&#8217;hésitez pas à venir jeter un oeil à ma présentation&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Oyez oyez amis suisses]]></title>
    <link href="http://linsolas.github.com/blog/2013/08/19/oyez-oyez-amis-suisses/"/>
    <updated>2013-08-19T21:46:00+02:00</updated>
    <id>http://linsolas.github.com/blog/2013/08/19/oyez-oyez-amis-suisses</id>
    <content type="html"><![CDATA[<p><a href="http://soft-shake.ch/2013/program/authors/2013/10/24/romain-linsolas.html"><img src="http://linsolas.github.com/images/soft-shake-2013.png" title="Soft Shake 2013" alt="Soft Shake 2013" /></a></p>

<p>Super nouvelle, la présentation &#8221;<a href="http://soft-shake.ch/2013/program/sessions/13_web_dev/2013/10/24/5-Du_Javascript_propre_Challenge_Accepted.html">Du Javascript propre? Challenge Accepted!</a>&#8221; a été retenue pour la conférence <a href="http://soft-shake.ch/2013/fr/">Soft Shake 2013</a> à Genève en Suisse, du 23 au 24 octobre.
La présentation sera sensiblement la même que celle faite à Devoxx avec <a href="http://soft-shake.ch/2013/program/authors/2013/10/25/julien-jakubowski.html">Julien Jakubowski</a>, mais on essaiera de mettre à jour certaines parties.</p>

<p>Si vous venez à la conférence, venez nous voir !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scrum Day 2013]]></title>
    <link href="http://linsolas.github.com/blog/2013/04/15/scrum-day-2013/"/>
    <updated>2013-04-15T22:10:00+02:00</updated>
    <id>http://linsolas.github.com/blog/2013/04/15/scrum-day-2013</id>
    <content type="html"><![CDATA[<p><img src="http://linsolas.github.com/images/Scrum-Day-2013.png" title="Scrum Day 2013" alt="Scrum Day 2013" /></p>

<p>Le jeudi 11 avril s&#8217;est tenue la troisième édition du <a href="http://www.scrumday.fr/">Scrum Day</a>, un événement organisé par le <a href="http://www.frenchsug.org/">French Scrum User Group</a> (ou <em>FSUG</em>) autour de l&#8217;agilité.</p>

<p>Avant d&#8217;aborder mon compte rendu, je tiens à remercier chaudement la société <a href="http://www.zenika.com/">Zenika</a> qui m&#8217;a permis d&#8217;assister à cette conférence. En tant que sponsor de l&#8217;événement, elle a proposé de gagner une place avec un peu jeu concours sur Twitter. Et c&#8217;est moi qui ai gagné \o/ Donc <strong>merci</strong> à eux.</p>

<p>Pour nous accueillir, Xavier Warzee débute avec <a href="http://agenda2013.scrumday.fr/event/94">un discours d&#8217;ouverture</a> où il rappelle ce qu&#8217;est le FSUG, ses activités, son bilan. Il fait également venir les sponsors sur scène, pour une courte présentation. Puis il laisse la main à Robert Richman&#8230;</p>

<!-- more -->


<p><img src="http://linsolas.github.com/images/ScrumDay2013-Xavier.JPG" title="Xavier sur scène" alt="Xavier sur scène" /></p>

<h2><a href="http://agenda2013.scrumday.fr/event/95">Keynote &#8220;Culture Hacking&#8221;</a></h2>

<p>La journée commence vraiment avec la keynote de <a href="http://agenda2013.scrumday.fr/speakers/201">Robert Richman</a>. Il travaille dans le département <a href="http://www.zapposinsights.com/">Zappos Insights</a> de la société <a href="http://www.zappos.com/">Zappos</a>, l&#8217;un des leaders de la vente de chaussures sur Internet (eh oui), aujourd&#8217;hui rachetée par Amazon.</p>

<p>Il se définit comme un <em>Culture Hacker</em>, il est également l&#8217;auteur du livre <a href="http://www.cultureblueprint.com/">Culture Blueprint</a>. Il nous incite ainsi à comprendre comment fonctionne une culture d&#8217;entreprise, de groupe, etc. Il débute en nous racontant une petite histoire à propos du <a href="http://www.burningman.com">Burning Man</a>. Il s&#8217;agit d&#8217;un rassemblement culturel et artistique qui a lieu chaque année dans le désert du Nevada, où se cotoient plusieurs dizaines de milliers de personnes. Cette rencontre pourrait s&#8217;apparenter à un chaos total, pourtant les gens s&#8217;y retrouvent avec bonne humeur, et une harmonie certaine. Le succès tient entre autres à un <a href="http://www.burningman.com/whatisburningman/about_burningman/principles.html">ensemble de règles régissant la communauté</a> :</p>

<ul>
<li><strong>Inclusion radicale</strong> : tout le monde est le bienvenu.</li>
<li><strong>Pratique du don</strong> : pas d&#8217;argent, tout se fait par des cadeaux, des prestations, des dons.</li>
<li><strong>Décommercialisation</strong> : pas de publicité, pratiquement aucune transaction financière.</li>
<li><strong>Auto-suffisance médicale</strong>.</li>
<li><strong>Expression de soi radicale</strong>, poussant ainsi les participants à s&#8217;exprimer sous des formes variées, en particulier à travers des oeuvres artistiques.</li>
<li><strong>Effort en commun</strong>, où l&#8217;on favorise le travail d&#8217;équipe.</li>
<li><strong>Responsabilité civique</strong>.</li>
<li><strong>Pas de trace</strong> : malgré le grand nombre de participants et des manifestations, l&#8217;endroit doit être rendu tel qu&#8217;à l&#8217;origine. Le respect de l&#8217;environnement est omniprésent.</li>
<li><strong>Participation</strong>.</li>
<li><strong>Culture du moment présent</strong>.</li>
</ul>


<p>Robert Richman parle également de l&#8217;ouvrage &#8221;<a href="http://www.amazon.fr/Tribal-Leadership-Leveraging-Thriving-Organization/dp/0061251321/ref=sr_1_1?ie=UTF8&amp;qid=1365426131&amp;sr=8-1&amp;keywords=Tribal+Leadership">Tribal leadership</a>&#8221;, de Dave Logan, où il est montré l&#8217;importance d&#8217;avoir une liste de règles pour qu&#8217;une communauté - ou une tribu - puisse fonctionner. Il nous montre qu&#8217;à Zappos, où il travaille, il est également établi <a href="http://about.zappos.com/our-unique-culture/zappos-core-values">une liste de règles</a>, définissant les valeurs communes de leur &#8220;famille&#8221; :</p>

<ul>
<li><em>Deliver WOW Through Service</em></li>
<li><em>Embrace and Drive Change</em></li>
<li><em>Create Fun and A Little Weirdness</em></li>
<li><em>Be Adventurous, Creative, and Open-Minded</em></li>
<li><em>Pursue Growth and Learning</em></li>
<li><em>Build Open and Honest Relationships With Communication</em></li>
<li><em>Build a Positive Team and Family Spirit</em></li>
<li><em>Do More With Less</em></li>
<li><em>Be Passionate and Determined</em></li>
<li><em>Be Humble</em></li>
</ul>


<p><img src="http://linsolas.github.com/images/ScrumDay2013-Zappos.JPG" title="L'ambiance à Zappos" alt="L'ambiance à Zappos" /> <br> <small>L&#8217;ambiance à Zappos transparait dans l&#8217;excentricité des open spaces</small></p>

<p>Robert Richman nous pose une question. Ne pourrait-on pas considérer qu&#8217;une culture est aussi un <strong>produit</strong> ? C&#8217;est un peu pour cela qu&#8217;à Zappos, ils créent des événements pour &#8220;promouvoir&#8221; leur propre culture. Il ajoute quelque chose qui est tout à fait vrai : parfois, lors de ce genre d&#8217;événement, on est satisfait par l&#8217;information que l&#8217;on en tire, mais c&#8217;est avant tout l&#8217;<strong>expérience</strong> que l&#8217;on vit qui est fantastique (<em>Information is OK, but experience is amazing</em>). Quand il a dit ça, j&#8217;ai tout de suite pensé à ma propre expérience à <a href="http://www.devoxx.com">Devoxx</a> : j&#8217;en tire beaucoup d&#8217;informations intéressantes, mais c&#8217;est vraiment l&#8217;expérience de la conférence elle-même qui reste un souvenir fantastique.</p>

<p>Robert Richman nous fait maintenant une petite liste de <em>Culture Hacks</em> :</p>

<ul>
<li><em>How to walk into a room can shift a culture</em>. Lorsque l&#8217;on entre dans une pièce, il faut montrer son assurance, son énergie de façon à pouvoir faire la différence, créer une synergie.</li>
<li><em>Destroy something</em>. Détruire est tellement plus puissant que créer, et cela apporte de l&#8217;énergie. Il faut détruire quelque chose d&#8217;inutile ou qui ne marche pas.</li>
<li><em>Frustration is gold</em>. La frustration n&#8217;est jamais que de l&#8217;énergie bloquée.</li>
<li><em>Use ritual for energy</em>. Robert Richman nous explique que des petits rituels peuvent créer de l&#8217;énergie au sein d&#8217;une équipe. Il nous explique qu&#8217;à Zappos chaque jeudi à 15h, tout le monde arrête de travailler pendant 10 minutes&#8230; pour danser ! C&#8217;est la <em>3PM Thursday Dance Party</em>.</li>
</ul>


<p>Pour finir, il nous rappelle que Scrum lui-même a ses propres valeurs :</p>

<ul>
<li><strong>Focus</strong></li>
<li><strong>Engagement</strong></li>
<li><strong>Respect</strong></li>
<li><strong>Courage</strong></li>
<li><strong>Ouverture</strong></li>
</ul>


<p>J&#8217;ai adoté cette keynote pour son côté énergique et rafraichissant. De façon générale, les orateurs américains ont un vrai sens du show, et ce n&#8217;est pas Robert Richman qui me fera penser le contraire. J&#8217;ai aussi beaucoup aimé la façon dont il a pu nous transmettre l&#8217;ambiance qui règne chez Zappos.</p>

<hr>


<h2><a href="http://agenda2013.scrumday.fr/event/57">Introduction au leadership tribal</a></h2>

<p><a href="http://agenda2013.scrumday.fr/speakers/65">Florent Lothon</a> est coach agile pour CSC (<a href="http://www.agiliste.fr/">site agiliste.fr</a>). Il nous parle du <em>Leadership Tribal</em>, <a href="http://www.amazon.fr/Tribal-Leadership-Leveraging-Thriving-Organization/dp/0061251321/ref=sr_1_1?ie=UTF8&amp;qid=1365426131&amp;sr=8-1&amp;keywords=Tribal+Leadership">tiré d&#8217;un livre éponyme</a>. Cela fait une bonne transition avec la keynote précédente.</p>

<p><img src="http://linsolas.github.com/images/Tribal-Leadership.jpg" title="Leadership Tribal" alt="Leadership Tribal" /></p>

<p>A l&#8217;origine, il y a une étude, menée pendant 10 ans sur un panel d&#8217;environ 24,000 personnes. Cette étude s&#8217;est concentrée uniquement sur deux aspects : le <strong>langage</strong> et le <strong>comportement</strong> des personnes étudiées, considérant que les mots que l&#8217;on utilise influencent directement notre comportement. Cette étude a permis d&#8217;établir <strong>cinq</strong> stades, et donc cinq discours associés, au sein d&#8217;une <strong>tribu</strong>. Mais avant d&#8217;aller plus loin, il est nécessaire de définir ce qu&#8217;est une tribu.</p>

<blockquote><p>Une tribu est un groupe, une organisation de 20 à 150 personnes qui se connaissent suffisament pour se saluer quand elles se croisent.
Une petite entreprise est une tribu, tandis qu&#8217;une société de taille plus importante est une tribu de tribus.</p></blockquote>

<h3>Les cinq stades</h3>

<ol>
<li><strong>La vie est nulle</strong> (~ 2%). Ces persones vont avoir un comportement de <em>sabotage</em> et un type de relation d&#8217;<em>exclusion</em>.</li>
<li><strong>Ma vie est nulle</strong> (25%). Ces personnes, plutôt <em>isolées</em> se posent en <em>victimes passives</em>. Florent cite la bande dessinée <a href="http://www.dilbert.com">Dilbert</a> comme exemple.</li>
<li><strong>Je suis génial</strong> (sous entendu &#8220;pas les autres&#8221;) (49%). À ce stade, on rencontre plutôt des <em>guerriers solitaires</em> ayant une tendance à la <em>domination personnelle</em>.</li>
<li><strong>Nous sommes géniaux</strong> (mais &#8220;pas les autres&#8221;) (22%). À ce stade déjà très élevé, les membres ont une <em>fierté tribale</em>, et établissent des <em>partenariats stables</em>.</li>
<li><strong>La vie est géniale</strong> (&lt; 2%). Le comportement de ces personnes est un <em>émerveillement innoncent</em>, et forme une véritable <em>équipe</em>. À un tel niveau, l&#8217;énergie de la tribu rayonne au delà de leur cercle, et &#8220;contamine&#8221; les personnes alentours. Florent nous cite l&#8217;histoire de <a href="http://www.wherethehellismatt.com/">Matt</a>, un anonyme qui a filmé ses scènes de danse au quatre coins du monde. Florent rebondit aussi sur la keynote précédente en citant Zappos comme exemple de société de niveau #5.</li>
</ol>


<h3>Les leviers d&#8217;évolution</h3>

<p>Au delà de ce constat, la question que tout le monde se pose est de savoir comment on peut passer d&#8217;un niveau à l&#8217;autre ? Une chose importante est de savoir qu&#8217;il ne faut pas sauter des étapes. On ne pourra pas passer du stade #1 au stade #3 sans passer par le deuxième stade, car chaque stade se base sur les acquis du précédent.</p>

<ol>
<li><strong>Du Stade #1 au stade #2</strong>. Les principaux leviers à ce stade sont les suivants :</li>
<li>Il faut aller là où est l&#8217;action : participer à des réunions, des conférences, ou simplement aller déjeuner avec les gens.</li>
<li>Se convaincre que la vie peut fonctionner, même pour soi.</li>
<li>Se couper des autres personnes qui stagnent à ce stade #1.</li>
<li><strong>Du Stade #2 au stade #3</strong>, les leviers sont :</li>
<li>La création des relations dyadiques (2 personnes).</li>
<li>Souligner les compétences et les forces des personnes.</li>
<li>Proposer des projets à court terme avec une forte probabilité de succès, et qui nécessite peu de suivi.</li>
<li><strong>Du Stade #3 au stade #4</strong>. À ce niveau-là, les personnes ont appris à se faire confiance, mais ils ont tendance à vouloir conserver un certain nombre d&#8217;informations pour eux, pour garder une sorte de <strong>pouvoir</strong>. On pourra tenter de les élever au stade supérieur ainsi :</li>
<li>Encourager des relations triadiques (3 personnes), et dont le succès nécessite un partenariat fort.</li>
<li>Faire comprendre que le vrai pouvoir n&#8217;est pas dans les connaissances, mais dans les <strong>réseaux</strong>.</li>
<li>Forcer la transparence grâce à une communication à outrance, plutôt que de n&#8217;y avoir recours qu&#8217;au besoin, en se limitant au strict nécessaire.</li>
<li><strong>Du Stade #4 au stade #5</strong>. Au stade #4, le niveau est déjà élevé. Pour atteindre le nirvana, le stade #5, des leviers ne suffisent plus, il faut mettre en place une <strong>stratégie</strong>. Celle-ci doit résulter de la tribu dans son ensemble, selon le contexte, et non seulement d&#8217;une personne, d&#8217;un leader. La stratégie est celle-ci :</li>
<li>Définir les <strong>valeurs fondamentales</strong> de la tribu. Ce sera la moteur de la stratégie.</li>
<li>Les <strong>résultats</strong> : que voulons-nous atteindre ?</li>
<li>Les <strong>actifs</strong> : qu&#8217;avons-nous ?</li>
<li>Les <strong>actions</strong> : qu&#8217;allons nous faire ?</li>
</ol>


<p><img src="http://linsolas.github.com/images/strategie-leadership-tribal.png" title="La stratégie pour atteindre le niveau 5" alt="La stratégie pour atteindre le niveau 5" /> <br> <small>Image de Florent Lothon, http://www.agiliste.fr</small></p>

<p>Florent termine la présentation par une citation tirée du livre de Dave Logan :</p>

<blockquote><p>Alors que les leaders tribaux travaillent pour le bien du groupe, non pas pour eux même, ils sont récompensés par la loyauté, le travail acharné, l’innovation et la collaboration. La tribu produit un travail de la plus grande qualité en moins de temps. [&#8230;] L’avenir de l’entreprise est le stade 5.</p></blockquote>

<p>Juste avant de nous laisser, il nous parle du <a href="http://www.culturesync.net/21days/">21 days challenge</a>, une sorte de challenge à réaliser en 3 semaines. L&#8217;idée est de regarder une petite vidéo chaque matin, qui va nous lancer une sorte de défi dont le but final est de faire de nous un meilleur leader. Il cite un exemple de défi : aller voir 3 personnes dans son entourage professionnel, et demander ce qu&#8217;ils pensent de nous, de notre réputation.</p>

<p>A lire, <a href="http://www.agiliste.fr/items/introduction-au-leadership-tribal/">le billet sur son blog retraçant cette présentation</a> et sa <a href="http://prezi.com/0sz0zvudacdg/introduction-au-leadership-tribal/">présentation sous Prezi</a></p>

<hr>


<h2><a href="http://agenda2013.scrumday.fr/event/51">Transition agile dans une grande banque européenne à l&#8217;aide des Innovation Games</a></h2>

<p><a href="http://agenda2013.scrumday.fr/speakers/58">Catherine Boudlal</a> et <a href="http://agenda2013.scrumday.fr/speakers/57">Xavier Warzee</a> de Palo-IT nous raconte comment ils ont mis en place l&#8217;agilité d&#8217;une grande banque (non, ce n&#8217;est pas la mienne ;o)) grâce aux <strong>Innovation Games</strong>. La situation est simple lorsqu&#8217;ils arrivent chez le client : l&#8217;agilité est totalement absente, mais ils veulent la mettre en place afin de pallier à leurs problèmes récurrents sur les développements, les mises en production, etc. Hélas, cela doit se faire en peu de temps (quelques semaines tout au plus). Xavier et Catherine décident donc d&#8217;opter pour les Innovation Games afin d&#8217;engager le processus de transformation agile. Les étapes sont les suivantes :</p>

<ul>
<li>Collecter des informations sur la situation actuelle, sur les blocages.</li>
<li>Démarrer la transformation agile.</li>
<li>Faire émerger de nouvelles organisations agiles.</li>
</ul>


<p><img src="http://linsolas.github.com/images/ScrumDay2013-Xavier_Catherine.JPG" title="Xavier et Catherine sur scène" alt="Xavier et Catherine sur scène" /></p>

<p>Les jeux (qui sont appelés &#8220;ateliers&#8221; auprès du management, ça passe mieux !), sont les suivants :</p>

<ul>
<li><a href="http://innovationgames.com/swot-analysis-game/">SWOT</a>. Le principe de SWOT est l&#8217;identification des forces, des faiblesses, des opportunités et des risques. Ils ont ainsi pu collecter des informations sur les pratiques, identifier les problèmes et processus des développements. De ces informations sortent des recommandations, telles que la mise en place de l&#8217;intégration continue et d&#8217;autres outils, de la réorganisation des équipes et des espaces de travail, la définition de KPI simples, etc.</li>
<li><a href="http://innovationgames.com/2020-vision/">20/20 vision</a>. Le but est d&#8217;apprendre à prioriser des fonctionnalités. Ainsi, on peut définir des sortes de <em>lois</em>, qui établiront un chemin commun vers l&#8217;agilité (cf http://guide.agilealliance.org/subway.html).</li>
<li><a href="http://innovationgames.com/buy-a-feature/">$100 test</a>. Grâce à ce jeu, Xavier et Catherine ont pu mettre en place la transformation agile d&#8217;<em>une</em> équipe, et améliorer le fonctionnement de cette équipe en tant qu&#8217;équipe, et non plus en fonction d&#8217;individualité ou de coeur de métier.</li>
<li><a href="http://www.gogamestorm.com/?p=636">Graphic Gameplan</a>. Ici, l&#8217;intérêt est de trouver les blocages, et de définir les étapes qui permettent de les résoudre.</li>
</ul>


<p>Xavier et Catherine nous ont aussi parlé de la façon dont les participants ont réagi par rapport à cette approche &#8220;ludique&#8221; de l&#8217;agilité. À part une poignée d&#8217;irreductibles, il semble que la grande majorité des personnes présentes lors de ces &#8220;ateliers&#8221; a apprécié la démarche et a joué le jeu.</p>

<p>Au final, cette session était un retour intéressant, mais avec un bémol. Ils nous expliquent qu&#8217;une fois ce stade des IG terminée, ils ne sont pas restés dans la société (une autre entreprise a pris la suite). Du coup, nous n&#8217;avons pas pu savoir si cela a vraiment porté ses fruits, si l&#8217;agile a bien été adopté, et quel niveau de maturité pouvaient avoir les équipes aujourd&#8217;hui.</p>

<hr>


<h2><a href="http://agenda2013.scrumday.fr/event/46">Transformation à grande échelle, 18 mois plus tard&#8230; (SGCIB)</a></h2>

<p>J&#8217;assiste donc à un retour d&#8217;expérience sur la transformation agile à la SGCIB, société que je connais plutôt bien :) Celle-ci nous est racontée par <a href="http://agenda2013.scrumday.fr/speakers/48">Clémo Charnay</a> et <a href="http://agenda2013.scrumday.fr/speakers/49">Myriam Roux</a> de la SGCIB ainsi que de <a href="http://agenda2013.scrumday.fr/speakers/50">Céline Stauder</a>, coach agile chez Coactiv.</p>

<p>Ils nous présentent donc l&#8217;histoire de la transformation agile qu&#8217;ils ont initiée à la SGCIB pendant plus d&#8217;une année dans un service gérant environ 70 applications. Tout commence par un constat : le service informatique est en perte de contrôle du SI. Les mises en production sont sans cesse décalées, la qualité n&#8217;est pas au rendez-vous, et la complexité omniprésente. Ainsi, une demande peut faire intervenir jusqu&#8217;à 7 équipes différentes !</p>

<p>Ils commencent par mettre en place 2 <em>PoC</em> :</p>

<ul>
<li>Le premier se fait dans un contexte favorable, où le projet démarre de rien, et où il est ainsi beaucoup plus facile d&#8217;y intégrer des notions d&#8217;agilité (TDD, intégration continue, etc.). Le succès est au rendez-vous.</li>
<li>Dans la deuxième équipe, les choses sont plus compliquées, car le contexte est une application <em>legacy</em> - essentiellement de la maintenance ou du catalogue. Ici, le succès est plus mitigé, comme on pouvait s&#8217;y attendre.</li>
</ul>


<p>La mise en place de l&#8217;agilité permet de passer d&#8217;un rythme de 4 releases par an à une presque tous les mois. Toutefois, si cela peut paraitre une bonne chose, elle est aussi un défaut. En effet, cela implique une plus forte charge pour les équipes, et cela implique une certaine fatigue.</p>

<p>Les trois présentateurs soulèvent 4 points importants à prendre en considération durant une transformation agile :</p>

<ul>
<li>Il faut savoir gérer les demandes du support. Le &#8221;<em>Production first</em>&#8221; ne doit absolument pas devenir le &#8221;<em>Production only</em>&#8221;. Il faut savoir faire la part des choses.</li>
<li>Faire attention aux process de release, parfois (souvent ?) trop lours.</li>
<li>Le découpage d&#8217;un projet est souvent orienté coûts plutôt que valeurs.</li>
<li>Il faut savoir prendre du recul, et se demander pourquoi on fait certaines choses.</li>
</ul>


<p>Au final, il y a une vraie prise de conscience que l&#8217;agilité est un plus. Mais il faut savoir comment la mettre en place. L&#8217;un des avantages de l&#8217;agilité, qui pourrait être vu comme un défaut par certains, est qu&#8217;elle a tendance à mettre en lumière des problèmes.</p>

<p>Les orateurs finissent par citer quelques problèmes rencontrés lors de cette transformation :</p>

<ul>
<li>L&#8217;organisation même d&#8217;ITEC, qui impose certaines limites, en particulier au niveau des budgets.</li>
<li>Pas de reconnaissance ni de valorisation des profils agiles par les Ressources Humaines (peut être anxiogène pour certains).</li>
<li>La mise en place de beaucoup de chantiers dont beaucoup ne sont pas terminés est un processus épuisants.</li>
</ul>


<p>Voilà un retour d&#8217;expérience assez classique, rien de bien nouveau sous le soleil au final.</p>

<hr>


<h2><a href="http://agenda2013.scrumday.fr/event/47">Mon DSI veut un indicateur sur l&#8217;agilité : Cadeau ou Poison ? (REX Total)</a></h2>

<p><a href="http://agenda2013.scrumday.fr/speakers/51">Yann Poles</a> travaille pour Total, et nous raconte son expérience sur la mise en place de l&#8217;agilité chez eux. La DSI y est assez importante, puisqu&#8217;elle concerne un millier de personnes pour environ 200 projets par an.</p>

<p>En 2011, c&#8217;est le début de l&#8217;agilité chez Total, avec une vingtaine d&#8217;expériences plutôt concluantes. Toutefois, on reste dans une situation où le management laisse faire.</p>

<p>En 2012, suite à une réorganisation importante, de nouvelles ambitions sont présentées. Parmi elles, il y a ce chiffre de <strong>50% de projets agiles</strong> d&#8217;ici 2017. Très bien, mais ce chiffre, que veut-il dire ? Que mesure-t-il ? Le souci est là justement : avec un tel indicateur, il n&#8217;est pas possible d&#8217;évaluer le degré de <strong>maturité</strong> de chaque équipe, leur niveau d&#8217;efficacité, de vélocité.</p>

<p>Chez Total aussi la transformation agile pose une question importante : comment faire ? Les équipes sont perplexes, les managers, qui ne trouvent pas leur place dans l&#8217;agilité, sont bousculés.</p>

<p>Les changements apportés par l&#8217;agilité vus par l&#8217;équipe :</p>

<ul>
<li>Travailler en équipe.</li>
<li>Prendre des risques.</li>
<li>S&#8217;engager.</li>
<li>Être visible.</li>
<li>Être autonome dans la prise de décision.</li>
<li>Savoir se remettre en question.</li>
</ul>


<p>Du côté des managers :</p>

<ul>
<li>Accompagner le changement.</li>
<li>Déléguer, donner de l&#8217;autonomie.</li>
<li>Avoir une posture de <a href="http://en.wikipedia.org/wiki/Servant_leadership">Servant Leader</a>.</li>
</ul>


<p>Rendre visible cette transformation, c&#8217;est :</p>

<ul>
<li>Être plus exposé (dans ses réussites mais aussi dans ses échecs).</li>
<li>Crainte de la course au label &#8220;Agile&#8221; (que le projet ait à tout prix le tampon &#8221;<em>Ici on est agile</em>&#8221; sans forcément faire de l&#8217;agilité).</li>
<li>L&#8217;échelle n&#8217;est plus la même : on touche de plus grande équipe.</li>
</ul>


<p>Dernière question que pose Yann Poles : comment péréniser l&#8217;agilité, ancrer la transformation ?</p>

<ul>
<li>Du côté de l&#8217;individu, il faut recourir à un <strong>accompagnement</strong>, éventuellement des formations.</li>
<li>Du côté de l&#8217;équipe, il faut investir dans la communauté IT. Savoir aussi mesurer et soutenir la vélocité, la fluidité, la réactivé, le moral des équipes, la satisfaction du client.</li>
</ul>


<p>Il termine par une citation de Gandhi :</p>

<blockquote><p>Vous devez être le changement que vous voulez dans ce monde.</p></blockquote>

<p>Un dernier point, en résonance à la mesure du nombre de projets qui sont agiles chez Total. Yann, ainsi qu&#8217;une partie de l&#8217;assistance, pense qu&#8217;il serait plus pertinent de mesure non pas le nombre de <strong>projets</strong>, mais d&#8217;<strong>équipes</strong> agiles.</p>

<p>Un nouveau retour d&#8217;expérience. Je ne sais pas si c&#8217;est exactement ce que je m&#8217;attendais à avoir en venant dans cette salle, mais c&#8217;était tout de même intéressant.</p>

<hr>


<h2>L&#8217;organisation et bilan</h2>

<p>C&#8217;était ma première participation au Scrum Day (c&#8217;était la 3<sup>ème</sup> édition), et je dois dire que cela m&#8217;a plu, j&#8217;ai eu toutefois une préférence sur mes sessions du matin, en particulier de l&#8217;excellente keynote de Robert Richman. J&#8217;ai vu plusieurs retour d&#8217;expérience sur des transformations agiles au sein de grandes sociétés (dont la mienne !) et j&#8217;ai quand même un peu l&#8217;impression d&#8217;entendre toujours les mêmes discours. Tant pis.</p>

<p>Dans l&#8217;ensemble, l&#8217;organisation s&#8217;est bien déroulée, mais j&#8217;ai quand même 2 critiques à formuler. Premièrement, les locaux (merci à IBM pour les avoir fournis) n&#8217;étaient pas toujours adaptés, car certaines salles étaient trop petites pour profiter de certaines sessions, en particulier les ateliers. J&#8217;ai ainsi dû passer mon tour pour la session <a href="http://agenda2013.scrumday.fr/event/84">L&#8217;agilité selon Starcraft 2</a> à 12h45. L&#8217;autre reproche c&#8217;est peut-être un manque d&#8217;accompagnement des speakers et du cadrage des sessions. Certaines ont un peu débordé, ce qui fait que le timing n&#8217;était pas toujours respecté. Cela n&#8217;enlève en rien toutefois le travail formidable des organisateurs, et de leur travail bénévole.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Faire du CasperJS en CoffeeScript sur Windows]]></title>
    <link href="http://linsolas.github.com/blog/2013/04/09/faire-du-casperjs-en-coffeescript-sur-windows/"/>
    <updated>2013-04-09T21:07:00+02:00</updated>
    <id>http://linsolas.github.com/blog/2013/04/09/faire-du-casperjs-en-coffeescript-sur-windows</id>
    <content type="html"><![CDATA[<h1><img src="http://linsolas.github.com/images/logo_windows.png" title="Windows" alt="Windows" /> + <img src="http://linsolas.github.com/images/casperjs_mini.jpg" title="CasperJS" alt="CasperJS" /> = <img src="http://linsolas.github.com/images/icon_love.png" title="Loooove" alt="Loooove" /></h1>

<p>Je suis revenu de Devoxx France avec quelques idées en tête, dont celle de mettre du <a href="http://casperjs.org/">CasperJS</a> dans des applications (merci <a href="http://linsolas.github.io/blog/2013/03/27/devoxx-france-2013-jour-1/">Jean-Laurent et Pierre</a>). Pour faciliter les choses, ma machine tourne sur du Windows (version 7 en l&#8217;occurrence), ce qui n&#8217;est pas forcément le meilleur environnement pour ce type de chose. Mais on ne va pas se décourager si vite, hein ?</p>

<!-- more -->


<p>Commençons petit, et essayons de faire marcher un test simple en JavaScript sur CasperJS.</p>

<h2>Installation des outils</h2>

<p>La première chose à faire, c&#8217;est d&#8217;installer CasperJS sur la machine Windows. Mais avant cela, il est nécessaire de disposer d&#8217;une version assez récente de <a href="http://phantomjs.org">PhantomJS</a> (CasperJS utilise PhantomJS pour s&#8217;exécuter). Donc on <a href="http://phantomjs.org/download.html">télécharge PhantomJS</a> et on l&#8217;installe (enfin on décompresse le ZIP). Dans mon cas, il s&#8217;agit de la version <strong>1.9</strong>. Même chose ensuite, je dézippe le ZIP de CasperJS (v<strong>1.0.2</strong>), et je finis par ajouter dans mon <code>PATH</code> les chemins vers les exécutables. Voyons si ça marche bien :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>D:\dev&gt;phantomjs -v
</span><span class='line'>1.9.0
</span><span class='line'>D:\dev&gt;casperjs --version
</span><span class='line'>1.0.2</span></code></pre></td></tr></table></div></figure>


<p>Les choses s&#8217;annoncent bien ! Exécutons un test maintenant. Prennons celui-ci, assez simple :</p>

<figure class='code'><figcaption><span>Le code en version JavaScript</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">casper</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;casper&#39;</span><span class="p">).</span><span class="nx">create</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">verbose</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">logLevel</span><span class="o">:</span> <span class="s1">&#39;debug&#39;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">casper</span><span class="p">.</span><span class="nx">start</span><span class="p">(</span><span class="s1">&#39;https://mon-application:8080/login/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">echo</span><span class="p">(</span><span class="s1">&#39;Log in&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">test</span><span class="p">.</span><span class="nx">assertTitle</span><span class="p">(</span><span class="s1">&#39;Sign in&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">test</span><span class="p">.</span><span class="nx">assertNotVisible</span><span class="p">(</span><span class="s1">&#39;label#error&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">fill</span><span class="p">(</span><span class="s1">&#39;form#loginForm&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;j_username&#39;</span><span class="o">:</span> <span class="s1">&#39;romain.linsolas&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;j_password&#39;</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>    <span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="s2">&quot;form#loginForm input.button&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">test</span><span class="p">.</span><span class="nx">assertVisible</span><span class="p">(</span><span class="s1">&#39;label.error&#39;</span><span class="p">);</span> <span class="c1">// Une boite d&#39;erreur doit apparaitre</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">fill</span><span class="p">(</span><span class="s1">&#39;form#loginForm&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;j_username&#39;</span><span class="o">:</span> <span class="s1">&#39;romain.linsolas&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;j_password&#39;</span><span class="o">:</span> <span class="s1">&#39;abc123&#39;</span>
</span><span class='line'>    <span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="s2">&quot;form#loginForm input.button&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">casper</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">capture</span><span class="p">(</span><span class="s1">&#39;test-screen.png&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">test</span><span class="p">.</span><span class="nx">assertTitle</span><span class="p">(</span><span class="s1">&#39;Hello World&#39;</span><span class="p">);</span> <span class="c1">// Nous sommes loggués</span>
</span><span class='line'>    <span class="c1">// Suite du test</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">casper</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">test</span><span class="p">.</span><span class="nx">renderResults</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>En gros, il se divise ainsi :</p>

<ul>
<li>J&#8217;initialise un contexte <code>casper</code> (dans mon cas, je lui demande d&#8217;être un peu pipelette, ça facilitera les choses en cas de problème).</li>
<li>Ensuite, je démarre un test où il va exécuter certaines tâches :

<ul>
<li>se connecter à une application ;</li>
<li>vérifier le titre de la page ;</li>
<li>remplir un formulaire de login sans le mot de passe ;</li>
<li>cliquer sur un lien, et vérifier qu&#8217;un message d&#8217;erreur apparait ;</li>
<li>retester en saisissant un mot de passe.</li>
</ul>
</li>
<li>Enfin, je vérifie que je suis bien connecté (le titre de la page a changé) et pour le fun, je fais une capture d&#8217;écran de la page telle qu&#8217;elle est à ce moment-là.</li>
</ul>


<p>Allez zou, il est temps de tester. Le verdict va tomber très vite, il suffit d&#8217;écrire <code>casperjs [mon fichier].js</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>D:\dev&gt;casperjs test-casper.js
</span><span class='line'>[info] [phantom] Starting...
</span><span class='line'>[info] [phantom] Running suite: 3 steps
</span><span class='line'>[debug] [phantom] opening url: https://mon-application:8080/login/, HTTP GET
</span><span class='line'>[debug] [phantom] Navigation requested: url=https://mon-application:8080/login/, type=Other, lock=true, isMainFrame=true
</span><span class='line'>[debug] [phantom] url changed to &quot;https://mon-application:8080/login/&quot;
</span><span class='line'>[debug] [phantom] Successfully injected Casper client-side utilities
</span><span class='line'>[info] [phantom] Step 2/3 https://mon-application:8080/login/ (HTTP 200)
</span><span class='line'>Log in
</span><span class='line'>PASS Page title is: &quot;Sign in&quot;
</span><span class='line'>PASS Selector is not visible
</span><span class='line'>[info] [remote] attempting to fetch form element from selector: &#39;form#loginForm&#39;
</span><span class='line'>[debug] [remote] Set &quot;j_username&quot; field value to romain.linsolas
</span><span class='line'>[debug] [remote] Set &quot;j_password&quot; field value to
</span><span class='line'>[debug] [phantom] Mouse event &#39;click&#39; on selector: form#loginForm input.button
</span><span class='line'>PASS Selector is visible
</span><span class='line'>[info] [remote] attempting to fetch form element from selector: &#39;form#loginForm&#39;
</span><span class='line'>[debug] [remote] Set &quot;j_username&quot; field value to romain.linsolas
</span><span class='line'>[debug] [remote] Set &quot;j_password&quot; field value to ******
</span><span class='line'>[debug] [phantom] Mouse event &#39;click&#39; on selector: form#loginForm input.button
</span><span class='line'>[info] [phantom] Step 2/3: done in 718ms.
</span><span class='line'>[debug] [phantom] Navigation requested: url=https://mon-application:8080/logincheck;jsessionid=808FD9D0EDD9D9C5CCAE7F11F4AE05DE, type=FormSubmitted, lock=true, isMainFrame=true
</span><span class='line'>[debug] [phantom] Navigation requested: url=https://mon-application:8080/, type=FormSubmitted, lock=true, isMainFrame=true
</span><span class='line'>[debug] [phantom] url changed to &quot;https://mon-application:8080/&quot;
</span><span class='line'>[debug] [phantom] Successfully injected Casper client-side utilities
</span><span class='line'>[info] [phantom] Step 3/3 https://mon-application:8080/ (HTTP 200)
</span><span class='line'>[debug] [phantom] Capturing page to D:/dev/test-screen.png
</span><span class='line'>[info] [phantom] Capture saved to D:/dev/.png
</span><span class='line'>PASS Page title is: &quot;Hello World&quot;
</span><span class='line'>[info] [phantom] Step 3/3: done in 1224ms.
</span><span class='line'>[info] [phantom] Done 3 steps in 1226ms
</span></code></pre></td></tr></table></div></figure>


<p>Cool, ça marche !</p>

<h2>Passons au CoffeeScript</h2>

<p><img src="http://linsolas.github.com/images/CoffeeScript.png" title="CoffeeScript" alt="CoffeeScript" /></p>

<p>Le JavaScript c&#8217;est bien, mais c&#8217;est un peu verbeux, surtout quand le code des tests va grandissant. Tentons maintenant de passer à <a href="http://coffeescript.org/">CoffeeScript</a>. CasperJS est l&#8217;ami de CoffeeScript et accepte très bien que les scripts à exécuter soient écrits avec. D&#8217;après la documentation, il est écrit qu&#8217;il suffit de lancer simplement la commande <code>casperjs [mon fichier].coffee</code>. Ca a l&#8217;air pas mal. Ecrivons tout d&#8217;abord le même code de test, mais cette fois-ci en CoffeeScript. Cela nous donne quelque chose comme ça :</p>

<figure class='code'><figcaption><span>Le code en version CoffeeScript</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">casper = </span><span class="nx">require</span><span class="p">(</span><span class="s">&#39;casper&#39;</span><span class="p">).</span><span class="nx">create</span><span class="p">(</span>
</span><span class='line'>    <span class="nv">verbose: </span><span class="kc">true</span>
</span><span class='line'>    <span class="nv">logLevel: </span><span class="s">&#39;debug&#39;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">casper</span><span class="p">.</span><span class="nx">start</span> <span class="s">&#39;https://mon-application:8080/login/&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">@echo</span> <span class="s">&#39;Log in&#39;</span>
</span><span class='line'>    <span class="nx">@test</span><span class="p">.</span><span class="nx">assertTitle</span> <span class="s">&#39;Sign in&#39;</span>
</span><span class='line'>    <span class="nx">@test</span><span class="p">.</span><span class="nx">assertNotVisible</span> <span class="s">&#39;label#error&#39;</span>
</span><span class='line'>    <span class="nx">@fill</span> <span class="s">&#39;form#loginForm&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">j_username: </span><span class="s">&#39;romain.linsolas&#39;</span>
</span><span class='line'>        <span class="nv">j_password: </span><span class="s">&#39;&#39;</span>
</span><span class='line'>    <span class="p">},</span> <span class="kc">false</span>
</span><span class='line'>    <span class="nx">@click</span> <span class="s">&quot;form</span><span class="err">#</span><span class="s">loginForm input.button&quot;</span>
</span><span class='line'>    <span class="nx">@test</span><span class="p">.</span><span class="nx">assertVisible</span><span class="p">(</span><span class="s">&#39;label.error&#39;</span><span class="p">)</span> <span class="c1">## Error box is displayed</span>
</span><span class='line'>    <span class="nx">@fill</span> <span class="s">&#39;form#loginForm&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">j_username: </span><span class="s">&#39;romain.linsolas&#39;</span>
</span><span class='line'>        <span class="nv">j_password: </span><span class="s">&#39;abc123&#39;</span>
</span><span class='line'>    <span class="p">},</span> <span class="kc">false</span>
</span><span class='line'>    <span class="nx">@click</span> <span class="s">&quot;form</span><span class="err">#</span><span class="s">loginForm input.button&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">casper</span><span class="p">.</span><span class="k">then</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">@capture</span> <span class="s">&#39;test-screen.png&#39;</span>
</span><span class='line'>    <span class="nx">@test</span><span class="p">.</span><span class="nx">assertTitle</span> <span class="s">&#39;Hello World&#39;</span> <span class="c1">## Now we are logged</span>
</span><span class='line'>    <span class="c1">## Suite du test</span>
</span><span class='line'>
</span><span class='line'><span class="nx">casper</span><span class="p">.</span><span class="nx">run</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">@test</span><span class="p">.</span><span class="nx">renderResults</span> <span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Allez, maintenant on exécute tout ça :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>D:\dev\&gt;casperjs test-casper.coffee
</span><span class='line'>[info] [phantom] Starting...
</span><span class='line'>[info] [phantom] Running suite: 3 steps
</span><span class='line'>[debug] [phantom] opening url: https://mon-application:8080/login/, HTTP GET
</span><span class='line'>[debug] [phantom] Navigation requested: url=https://mon-application:8080/login/, type=Other, lock=true, isMainFrame=true
</span><span class='line'>[debug] [phantom] url changed to &quot;https://mon-application:8080/login/&quot;
</span><span class='line'>[debug] [phantom] Successfully injected Casper client-side utilities
</span><span class='line'>[info] [phantom] Step 2/3 https://mon-application:8080/login/ (HTTP 200)
</span><span class='line'>Log in
</span><span class='line'>PASS Page title is: &quot;Sign in&quot;
</span><span class='line'>PASS Selector is not visible
</span><span class='line'>[info] [remote] attempting to fetch form element from selector: &#39;form#loginForm&#39;
</span><span class='line'>[debug] [remote] Set &quot;j_username&quot; field value to romain.linsolas
</span><span class='line'>[debug] [remote] Set &quot;j_password&quot; field value to
</span><span class='line'>[debug] [phantom] Mouse event &#39;click&#39; on selector: form#loginForm input.button
</span><span class='line'>PASS Selector is visible
</span><span class='line'>[info] [remote] attempting to fetch form element from selector: &#39;form#loginForm&#39;
</span><span class='line'>[debug] [remote] Set &quot;j_username&quot; field value to romain.linsolas
</span><span class='line'>[debug] [remote] Set &quot;j_password&quot; field value to ******
</span><span class='line'>[debug] [phantom] Mouse event &#39;click&#39; on selector: form#loginForm input.button
</span><span class='line'>[info] [phantom] Step 2/3: done in 1099ms.
</span><span class='line'>[debug] [phantom] Navigation requested: url=https://mon-application:8080/logincheck;jsessionid=0A26317CDA05D97D63D6538EE4212B07, type=FormSubmitted, lock=true, isMainFrame=true
</span><span class='line'>[debug] [phantom] Navigation requested: url=https://mon-application:8080/, type=FormSubmitted, lock=true, isMainFrame=true
</span><span class='line'>[debug] [phantom] url changed to &quot;https://mon-application:8080/&quot;
</span><span class='line'>[debug] [phantom] Successfully injected Casper client-side utilities
</span><span class='line'>[info] [phantom] Step 3/3 https://mon-application:8080/ (HTTP 200)
</span><span class='line'>PASS Page title is: &quot;Hello World&quot;
</span><span class='line'>[debug] [phantom] Mouse event &#39;click&#39; on selector: xpath selector: //*[text()=&quot;Administration&quot;]
</span><span class='line'>[debug] [phantom] Navigation requested: url=https://mon-application:8080/domain/account/index, type=LinkClicked, lock=true, isMainFrame=true
</span><span class='line'>[info] [phantom] Step 3/3: done in 1389ms.
</span><span class='line'>[debug] [phantom] url changed to &quot;https://mon-application:8080/domain/account/index&quot;
</span><span class='line'>[debug] [phantom] Successfully injected Casper client-side utilities
</span><span class='line'>[info] [phantom] Done 3 steps in 1749ms
</span></code></pre></td></tr></table></div></figure>


<p>Voilà qui est génial, CasperJS gère nativement le CoffeeScript sans avoir besoin de l&#8217;installer séparément. Mais on va quand même procéder à son installation, comme ça on disposera d&#8217;un compilateur CoffeeScript.</p>

<p>La première étape, c&#8217;est l&#8217;installation de <a href="http://nodejs.org/">NodeJS</a>. Les choses se font assez simplement, il y a un <code>.msi</code> <a href="http://nodejs.org/download/">à télécharger</a>. Il me faudra juste ajouter le chemin d&#8217;installation de NodeJS dans mon <code>PATH</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>D:\dev&gt;node -v
</span><span class='line'>v0.10.3
</span><span class='line'>D:\dev&gt;npm -v
</span><span class='line'>1.2.17
</span></code></pre></td></tr></table></div></figure>


<p>Maintenant, installons CoffeeScript grâce à la commande <code>npm install -g coffee-script</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>D:\dev\nodejs&gt;npm install -g coffee-script
</span><span class='line'>npm http GET https://registry.npmjs.org/coffee-script
</span><span class='line'>npm http GET https://registry.npmjs.org/coffee-script
</span><span class='line'>npm http GET https://registry.npmjs.org/coffee-script
</span><span class='line'>npm ERR! Error: getaddrinfo ENOTFOUND
</span><span class='line'>npm ERR!     at errnoException (dns.js:37:11)
</span><span class='line'>npm ERR!     at Object.onanswer [as oncomplete] (dns.js:124:16)
</span><span class='line'>npm ERR! If you need help, you may report this log at:
</span><span class='line'>npm ERR!     &lt;http://github.com/isaacs/npm/issues&gt;
</span><span class='line'>npm ERR! or email it to:
</span><span class='line'>npm ERR!     &lt;npm-@googlegroups.com&gt;
</span><span class='line'>npm ERR! System Windows_NT 6.1.7601
</span><span class='line'>npm ERR! command &quot;D:\\dev\\nodejs\\\\node.exe&quot; &quot;D:\\dev\\nodejs\\node_modules\\npm\\bin\\npm-cli.js&quot; &quot;install&quot; &quot;-g&quot; &quot;coffee-script&quot;
</span><span class='line'>npm ERR! cwd D:\dev\nodejs
</span><span class='line'>npm ERR! node -v v0.10.3
</span><span class='line'>npm ERR! npm -v 1.2.17
</span><span class='line'>npm ERR! syscall getaddrinfo
</span><span class='line'>npm ERR! code ENOTFOUND
</span><span class='line'>npm ERR! errno ENOTFOUND
</span><span class='line'>npm ERR!
</span><span class='line'>npm ERR! Additional logging details can be found in:
</span><span class='line'>npm ERR!     D:\dev\nodejs\npm-debug.log
</span><span class='line'>npm ERR! not ok code 0
</span></code></pre></td></tr></table></div></figure>


<p>Comme les choses ne sont pas simples chez moi, je suis derrière un proxy :) Il faut donc donner les informations de connexion à npm pour se connecter à Internet. Cela se fait dans le fichier <code>&lt;répertoire home&gt;\.npmrc</code> (par exemple <code>C:\Users\chuck.norris\.npmrc</code>). Dans ce fichier, on définit l&#8217;adresse des proxies ainsi que le registre npm :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>proxy = http://[user]:[mot de passe]@[url proxy]:[port]/
</span><span class='line'>https-proxy = http://[user]:[mot de passe]@[url proxy]:[port]/
</span><span class='line'>registry = http://registry.npmjs.org
</span></code></pre></td></tr></table></div></figure>


<p>On relance la même commande, et cette fois-ci ça marche mieux :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>D:\dev\nodejs&gt;npm install -g coffee-script
</span><span class='line'>npm http GET http://registry.npmjs.org/coffee-script
</span><span class='line'>npm http 200 http://registry.npmjs.org/coffee-script
</span><span class='line'>npm http GET http://registry.npmjs.org/coffee-script/-/coffee-script-1.6.2.tgz
</span><span class='line'>npm http 200 http://registry.npmjs.org/coffee-script/-/coffee-script-1.6.2.tgz
</span><span class='line'>C:\Users\chuck.norris\AppData\Roaming\npm\cake -&gt; C:\Users\chuck.norris\AppData\Roaming\npm\node_modules\coffee-script\bin\cake
</span><span class='line'>C:\Users\chuck.norris\AppData\Roaming\npm\coffee -&gt; C:\Users\chuck.norris\AppData\Roaming\npm\node_modules\coffee-script\bin\coffee
</span><span class='line'>coffee-script@1.6.2 C:\Users\chuck.norris\AppData\Roaming\npm\node_modules\coffee-script
</span></code></pre></td></tr></table></div></figure>


<p>Cool ! Voyons maintenant s&#8217;il est possible de lancer la commande <code>coffee</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>D:\dev&gt;coffee -v
</span><span class='line'>CoffeeScript version 1.6.2
</span></code></pre></td></tr></table></div></figure>


<p>Houra !</p>

<h2>Intégration au build</h2>

<p>Dernière étape de ce petit tutoriel : comment allons-nous faire pour exécuter automatiquement les tests CoffeeScript, pour les intégrer par exemple dans notre <em>build</em> continu sur Jenkins ? On pourrait effectivement ajouter une étape dans la configuration Jenkins qui irait lancer un script, mais ce n&#8217;est pas très propre.</p>

<p>J&#8217;ai trouvé quelques plugins Maven, mais rien de folichon. J&#8217;ai donc décidé <a href="https://github.com/linsolas/casperjs-runner-maven-plugin">d&#8217;en créer un moi-même</a>, mais il n&#8217;est pas encore stabilisé.</p>

<p>En attendant, je vais passer par un test <strong>JUnit</strong>, qui aura pour tâche de lister les <code>*.js</code> et <code>*.coffee</code> d&#8217;un répertoire donné. C&#8217;est une version très simple, elle ne gère que les cas standards (j&#8217;essaierais de faire les choses plus proprement dans mon plugin Maven). Elle ne supporte pas non plus les options de la commande <code>casperjs</code> (comme par exemple les <code>--pre</code> ou <code>--post</code>), mais c&#8217;est un premier pas et surtout, ça marche :)</p>

<figure class='code'><figcaption><span>Classe JUnit d&#8217;exécution des fichiers JavaScript et CoffeeScript</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">fr</span><span class="o">.</span><span class="na">linsolas</span><span class="o">.</span><span class="na">javascript</span><span class="o">.</span><span class="na">casperjs</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.commons.exec.CommandLine</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.commons.exec.DefaultExecutor</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.commons.lang.StringUtils</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.BeforeClass</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FilenameFilter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">fest</span><span class="o">.</span><span class="na">assertions</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Run CasperJS on any *.js or *.coffee files found in a specific folder.</span>
</span><span class='line'><span class="cm"> * @author Romain Linsolas</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RunCasperJSTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="n">casperFound</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">CASPER_JS</span> <span class="o">=</span> <span class="s">&quot;casperjs.bat %s&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TESTS_DIR</span> <span class="o">=</span> <span class="s">&quot;D:\\dev\\mon-application\\src\\test\\javascript\\casperjs&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@BeforeClass</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">checkEnvironment</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Vérification que l&#39;on a bien CasperJS installé.</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="n">execute</span><span class="o">(</span><span class="n">CASPER_JS</span><span class="o">,</span> <span class="s">&quot;--version&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">res</span><span class="o">).</span><span class="na">isNotEqualTo</span><span class="o">(-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="n">casperFound</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">runJavaScriptTests</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">File</span><span class="o">[]</span> <span class="n">files</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">TESTS_DIR</span><span class="o">).</span><span class="na">listFiles</span><span class="o">(</span><span class="k">new</span> <span class="n">FilenameFilter</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">accept</span><span class="o">(</span><span class="n">File</span> <span class="n">dir</span><span class="o">,</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">StringUtils</span><span class="o">.</span><span class="na">endsWithIgnoreCase</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="s">&quot;.js&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>        <span class="n">runTests</span><span class="o">(</span><span class="n">files</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">runCoffeeScriptTests</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">File</span><span class="o">[]</span> <span class="n">files</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">TESTS_DIR</span><span class="o">).</span><span class="na">listFiles</span><span class="o">(</span><span class="k">new</span> <span class="n">FilenameFilter</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">accept</span><span class="o">(</span><span class="n">File</span> <span class="n">dir</span><span class="o">,</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">StringUtils</span><span class="o">.</span><span class="na">endsWithIgnoreCase</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="s">&quot;.coffee&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>        <span class="n">runTests</span><span class="o">(</span><span class="n">files</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">runTests</span><span class="o">(</span><span class="n">File</span><span class="o">[]</span> <span class="n">files</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">casperFound</span><span class="o">).</span><span class="na">isTrue</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">ok</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">ko</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">File</span> <span class="n">f</span> <span class="o">:</span> <span class="n">files</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="n">execute</span><span class="o">(</span><span class="n">CASPER_JS</span><span class="o">,</span> <span class="n">f</span><span class="o">.</span><span class="na">getAbsolutePath</span><span class="o">());</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">res</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span> <span class="n">ok</span><span class="o">++;</span> <span class="o">}</span> <span class="k">else</span> <span class="o">{</span> <span class="n">ko</span><span class="o">++;</span> <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Results: &quot;</span> <span class="o">+</span> <span class="n">ok</span> <span class="o">+</span> <span class="s">&quot; test(s) successful, &quot;</span> <span class="o">+</span> <span class="n">ko</span> <span class="o">+</span> <span class="s">&quot; test(s) failed. Total of &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">ok</span> <span class="o">+</span> <span class="n">ko</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot; test(s).&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">ko</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">execute</span><span class="o">(</span><span class="n">String</span> <span class="n">command</span><span class="o">,</span> <span class="n">Object</span><span class="o">...</span> <span class="n">arguments</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">DefaultExecutor</span> <span class="n">exec</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultExecutor</span><span class="o">();</span>
</span><span class='line'>        <span class="n">CommandLine</span> <span class="n">line</span> <span class="o">=</span> <span class="n">CommandLine</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">command</span><span class="o">,</span> <span class="n">arguments</span><span class="o">));</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">exec</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<hr>


<p><small>Logo Windows<sup>>TM</sup> par <a href="http://www.yootheme.com/">YOOTheme</a>, image de coeur par <a href="http://www.icon-king.com">David Vignoni</a></small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devoxx France 2013 - Du JavaScript propre ? Challenge Accepted]]></title>
    <link href="http://linsolas.github.com/blog/2013/04/03/devoxx-france-2013-du-javascript-propre-challenge-accepted/"/>
    <updated>2013-04-03T08:59:00+02:00</updated>
    <id>http://linsolas.github.com/blog/2013/04/03/devoxx-france-2013-du-javascript-propre-challenge-accepted</id>
    <content type="html"><![CDATA[<p><img src="http://linsolas.github.com/images/affiche-conference.jpg" title="Du JavaScript propre ? Challenge Accepted!" alt="Du JavaScript propre ? Challenge Accepted!" /></p>

<p>Dernier billet sur la conférence Devoxx France 2013 (ouf !). Je vais parler de notre session, <a href="http://www.devoxx.com/display/FR13/Du+Javascript+propre+++Challenge+Accepted">Du JavaScript propre ? Challenge Accepted!</a>, présentée avec <a href="http://www.devoxx.com/display/FR13/Julien+Jakubowski">Julien Jakubowski</a> d&#8217;<a href="http://www.octo.com">OCTO</a>.</p>

<!-- more -->


<p>Alors pour la petite histoire, il faut savoir que Julien et moi ne nous connaissions pas personnellement un mois et demi avant Devoxx ! Nous avions tous les deux proposé une conférence durant le CFP (<em>Call For Paper</em>) très similaire.
De son côté, Julien avait proposé une version améliorée de sa présentation <a href="http://fr.slideshare.net/jak78/javascript-ce-nest-pas-si-sale">Le JavaScript ce n&#8217;est pas si sale</a> qu&#8217;il avait faite au <a href="http://chtijug.org/">Ch&#8217;ti JUG</a> dont il est le fondateur.
De mon côté, j&#8217;avais proposé à peu près la même chose, mais dont le but était plutôt de faire un état des lieux de l&#8217;écosystème autour de JavaScript en 2013, et montrer que celui-ci est extrêmement riche, presque à l&#8217;image de celui du monde Java.
Le comité de direction, ne sachant qui choisir, nous a demandé s&#8217;il était possible de mixer nos présentations. Ce qui fut fait. On est donc parti de la présentation de Julien, puis on l&#8217;a améliorée, suite à nos nombreuses discussions. Je pense également que le fait de la présenter à deux la rend plus vivante, plus intéressante.</p>

<p><img src="http://linsolas.github.com/images/devoxxfr-2013-salle-vide.jpg" title="Le calme avant la tempête" alt="Le calme avant la tempête" /></p>

<h2>Le contenu</h2>

<p>La session se divise en deux parties :</p>

<ul>
<li>Les problèmes courants en JavaScript.</li>
<li>Les solutions que l&#8217;on propose pour coder proprement en JavaScript.</li>
</ul>


<h3>Les problèmes</h3>

<p>Tout d&#8217;abord, nous expliquons pourquoi nous faisons cette présentation. Le constat est double :</p>

<ul>
<li>JavaScript est partout, et les sites sont de plus en plus riches en partie grâce à lui. On ne peut donc pas l&#8217;ignorer, surtout avec l&#8217;avénement du HTML5.</li>
<li>JavaScript a une mauvaise réputation. Le langage est sale, plus adapté à la bidouille sur sa page HTML que pour faire de <em>vraies</em> applications, difficulté de trouver un bon environnement de travail.</li>
</ul>


<p>Bref, il y a du boulot pour redorer le blason de JavaScript. Après une petite partie ludique, où l&#8217;on montre quelques résultats <em>étonnants</em> de JavaScript (je vous conseille fortement de regarder <a href="https://www.destroyallsoftware.com/talks/wat">cette vidéo</a>), on passe aux vrais problèmes que l&#8217;on est susceptible de rencontrer dans ses projets :</p>

<ul>
<li><strong>Pollution de l&#8217;espace de nommage</strong>. Quand on définit des fonctions dans les fichiers JavaScript sans prendre garde, il se peut qu&#8217;il y ait des collisions entre plusieurs fonctions ayant le même nom. Par exemple, si l&#8217;on définit une méthode <code>checkForm()</code> dans un fichier JS, rien ne dit que nous n&#8217;aurons pas une méthode au même nom dans un autre fichier. Dans pareille situation, JS ne considère que la dernière méthode définie, et cela peut poser des problèmes.</li>
<li><strong>Le scope global par défaut</strong>. Par défaut, les variables ont un scope global, et cela peut aussi entrainer des problèmes. Dans le code suivant, la variable <code>i</code> sera la même dans les 2 boucles, ce qui fait que nous n&#8217;applerons le <em>logger</em> que 10 fois et non 100 fois comme attendu :</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">subLoop</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">subLoop</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>Tout est public par défaut</strong>. Difficile de cacher certains détails de son implémentation, le mot clé <code>private</code> n&#8217;existant pas en JS. Dans le code suivant, la variable censée être privée ne l&#8217;est pas du tout :</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">counter</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">privateValue</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">increment</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">counter</span><span class="p">.</span><span class="nx">privateValue</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">counter</span><span class="p">.</span><span class="nx">privateValue</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">counter</span><span class="p">.</span><span class="nx">increment</span><span class="p">();</span> <span class="c1">// 1</span>
</span><span class='line'><span class="nx">counter</span><span class="p">.</span><span class="nx">privateValue</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// Aie</span>
</span><span class='line'><span class="nx">counter</span><span class="p">.</span><span class="nx">increment</span><span class="p">();</span> <span class="c1">// 1</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>Code non testé</strong>. Tout est dit :)</li>
</ul>


<p>Assez parlé des problèmes, voyons les solutions !</p>

<h3>Les solutions</h3>

<p>Première idée : on pourrait simplement déléguer le code JavaScript à son framework préféré (GWT, JSF, etc.) Nous ne souhaitons pas aller dans cette direction. Faisons du JavaScript ! Autre idée, pour au moins limiter les dégâts : utiliser <a href="https://code.google.com/p/dart/">Google Dart</a> ou <a href="http://coffeescript.org/">CoffeeScript</a> qui permettent une écriture plus fluide, plus sécurisée du code JavaScript.</p>

<p>D&#8217;un point de vue architectural, donc assez haut niveau, il existe aujourd&#8217;hui une tendance à ne pas négliger : les architectures MVC/MVW/MV* <strong>côté client</strong>. Autrement dit, plutôt que d&#8217;avoir un serveur qui va s&#8217;occuper de toute la partie fonctionnelle (couches modèle, contrôleur et vue), on va déporter tout ou partie de ceci côté client. Pour se faire, on se fera aider de solutions telles que <a href="http://backbonejs.org/">Backbone.js</a>, <a href="http://emberjs.com/">Ember</a> ou le très à la mode <a href="http://angularjs.org/">AngularJS</a>. Ce type d&#8217;architecture offre d&#8217;autres avantages : comme le code est exécuté côté client, le temps de réponse est instantané, on transfère beaucoup moins d&#8217;informations entre le client et le serveur (ce qui privilégie les réseaux mobiles), et offre plus facilement un mode déconnecté à son application. Mais ce n&#8217;est pas magique, il faudra faire attention à d&#8217;autres points, en particulier l&#8217;aspect sécurité (bah oui, tout le code est sur le client, donc il lui est plus facile de le comprendre et de le contourner).</p>

<p><img src="http://linsolas.github.com/images/devoxxfr-2013-architecture-mvc.png" title="Et si on déplaçait le code métier du côté client ?" alt="Et si on déplaçait le code métier du côté client ?" /></p>

<p>On a cité, parmi les problèmes, le fait que tout est public par défaut. Pour le résoudre, on propose d&#8217;opter pour la modularité. Cela revient un peu à simuler une classe en Java (attention, ce n&#8217;est pas exactement ça, c&#8217;est juste pour faire comprendre l&#8217;idée), en n&#8217;exposant à l&#8217;extérieur que ce que l&#8217;on souhaite (une sorte d&#8217;interface). Le code de notre compteur devient au final quelque chose comme ça :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Notre counter sera notre objet utilisé par la suite.</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">counter</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">privateValue</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">publicMethod</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">privateValue</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">privateValue</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="c1">// On retourne un objet qui contient une méthode &quot;increment&quot;, seul élément qui sera visible de l&#39;extérieur.</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">increment</span><span class="o">:</span> <span class="nx">publicMethod</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">})();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// On passe à l&#39;utilisation du compteur :</span>
</span><span class='line'><span class="nx">counter</span><span class="p">.</span><span class="nx">increment</span><span class="p">();</span>  <span class="c1">// 1</span>
</span><span class='line'><span class="nx">counter</span><span class="p">.</span><span class="nx">privateValue</span><span class="p">;</span> <span class="c1">// undefined</span>
</span><span class='line'><span class="nx">counter</span><span class="p">.</span><span class="nx">privateValue</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// Cela ne pose pas de problème. JS va ajouter une propriété &quot;privateValue&quot; à l&#39;objet &quot;counter&quot;, mais elle sera différente du &quot;privateValue&quot; que nous utilisons dans notre implémentation. Pas de conflit du coup !</span>
</span><span class='line'><span class="nx">counter</span><span class="p">.</span><span class="nx">increment</span><span class="p">();</span>  <span class="c1">// 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour accroitre encore la lisibilité et la propreté de son code, on pourra créer des sortes de packages pour nos modules :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myapp</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">subpackage</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">counter</span><span class="o">:</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// ...</span>
</span><span class='line'>      <span class="p">})()</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Et son utilisation :</span>
</span><span class='line'><span class="nx">myapp</span><span class="p">.</span><span class="nx">subpackage</span><span class="p">.</span><span class="nx">counter</span><span class="p">.</span><span class="nx">increment</span><span class="p">();</span> <span class="c1">// 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>On aborde ensuite la question du chargement des librairies JS. Plutôt que d&#8217;avoir 15 fichiers JS chargés au chargement de la page (chargement séquentiel, qui plus est, ce qui ralentit d&#8217;autant le chargement), on va utiliser les principes de l&#8217;AMD (<em>Asynchronous Modules Definition</em>), par exemple grâce à la librairie <a href="http://requirejs.org/">require.js</a>. Cela apporte en particulier deux avantages :</p>

<ul>
<li>Chargement <strong>asynchrone</strong> et/ou en <strong>parallèle</strong>, et donc cela ne bloque pas le chargement des pages, qui se fait normalement de façon séquentielle.</li>
<li>Chargement à la <strong>demande</strong>. Certaines fonctionnalités de la page peuvent ne pas être utilisées. Alors autant ne pas charger les ressources liées. On pourra ainsi dire &#8220;quand l&#8217;utilisateur souhaite faire ceci, alors on chargera <em>à ce moment-là</em> les librairies X et Y&#8221;.</li>
<li>Définition des <strong>dépendances</strong>. Un peu comme dans le point précédent, on pourra indiquer que la librairie X dépend de Y, et donc on chargera Y avant X.</li>
</ul>


<p>Intéressons-nous au code en lui-même maintenant. Il existe des outils pour s&#8217;assurer que nous n&#8217;écrivons pas (trop) de bêtises dans notre code JavaScript, un peu comme le fait Checkstyle ou PMD en Java. Nous avons ainsi <a href="http://www.jslint.com/">JsLint</a> ou <a href="http://www.jshint.com/">JsHint</a> pour remplir cette tâche. On tâchera aussi d&#8217;écrire un code plus expressif, c&#8217;est-à-dire plus simple, plus lisible, plus concis. J&#8217;aime l&#8217;expression qui dit <em>qu&#8217;il faut écrire le code comme si la personne qui va le maintenir est un psychopathe qui connait mon adresse</em>, ça traduit bien l&#8217;intérêt d&#8217;écrire correctement son code.</p>

<p>Un vieux code tel que celui-ci :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">checkForm</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">beerName</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;beer_name&quot;</span><span class="p">).</span><span class="nx">value</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">beerName</span> <span class="o">===</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;beer_name&quot;</span><span class="p">).</span><span class="nx">className</span> <span class="o">+=</span> <span class="s2">&quot;invalid&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;error_box&quot;</span><span class="p">).</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="s2">&quot;block&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>pourra être <em>refactoré</em> avec <a href="http://jquery.com/">jQuery</a> de cette façon, rendant le code plus lisible, plus facile à maintenir :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#beerForm&#39;</span><span class="p">).</span><span class="nx">submit</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#beer_name&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span> <span class="o">===</span> <span class="s2">&quot;&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#beer_name&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;invalid&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#error_box&#39;</span><span class="p">).</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Autre chose pour simplifier l&#8217;écriture : utiliser des moteurs de <em>templating</em>, tels que <a href="http://mustache.github.com/">Mustache.js</a> ou <a href="http://handlebarsjs.com/">Handlebars.js</a>, qui permettent d&#8217;insérer des données dans du HTML de façon fluide. Ainsi, si <code>beers</code> est un tableau de bières (au format JSON), on pourra écrire ceci :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">ul</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;beers-list&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{{</span><span class="err">#</span><span class="nx">beers</span><span class="p">}}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">name</span><span class="p">}}</span> <span class="o">-</span> <span class="p">{{</span><span class="nx">color</span><span class="p">}}</span> <span class="o">-</span> <span class="p">{{</span><span class="nx">alcohol</span><span class="p">}}</span><span class="o">%&lt;</span><span class="err">/li&gt;</span>
</span><span class='line'>  <span class="p">{{</span><span class="err">/beers}}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/ul&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#beers-list&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// Appel du moteur de rendu de Mustache</span>
</span><span class='line'>  <span class="nx">template</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span> <span class="nx">Mustache</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">template</span><span class="p">.</span><span class="nx">html</span><span class="p">(),</span> <span class="nx">data</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Autre sujet important, les tests. Nous n&#8217;allons pas dans le détail, mais nous expliquons qu&#8217;il existe de nombreux outils pour cela : Jasmine, QUnit, Mocha, CapserJS, PhantomJS, Karma, etc. Je vous renvoie à l&#8217;<a href="http://linsolas.github.com/blog/2013/03/27/devoxx-france-2013-jour-1/">université de Jean-Laurent de Morlhon et Pierre Gayvallet à ce sujet</a>.</p>

<p>Le message est clair : tous les outils sont là pour faire des tests, du TDD, du BDD, des tests d&#8217;intégration, etc. Bref, on n&#8217;a plus d&#8217;excuses !</p>

<p><img src="http://linsolas.github.com/images/devoxxfr-2013-batmanrobin.png" title="Faites des tests en JavaScript" alt="Faites des tests en JavaScript" /></p>

<p>Dernier point abordé : l&#8217;automatisation. On peut facilement intégrer son application JavaScript dans un serveur d&#8217;intégration continue comme Jenkins ou un outil d&#8217;analyse qualité tel que Sonar. Je vous renvoie <a href="http://www.parleys.com/#play/5148922a0364bc17fc56c7cf">à mon Tools In Action de l&#8217;année dernière pour voir tout ça en pratique</a>.
Niveau IDE, nous recommandons <a href="http://www.jetbrains.com/idea/">IntelliJ IDEA de JetBrains</a> (ou <a href="http://www.jetbrains.com/webstorm/">WebStorm</a>) qui offre un <em>vrai</em> support des langages web comme le JavaScript, le HTML ou le CSS.</p>

<h3>La présentation à Devoxx France</h3>

<p>Voilà un retour personnel sur la présentation elle-même. Déjà, on était très content avec Julien, car la salle était pleine, ce qui fait 300 personnes à nous écouter (sans compter les millions qui nous verront sur Parleys). Si si, j&#8217;avais compté les chaises pendant que la salle était vide ! :o)</p>

<p><img src="http://linsolas.github.com/images/devoxxfr-2013-salle-1.jpg" title="Y a du monde à gauche..." alt="Y a du monde à gauche" />
<img src="http://linsolas.github.com/images/devoxxfr-2013-salle-2.jpg" title="... et aussi à droite !" alt="... et aussi à droite !" /></p>

<p>On a plutôt bien géré notre temps, on a fini un peu en avance même - environ 8 minutes avant - ce qui nous a permis de prendre près d&#8217;une dizaine de questions. Les retours que j&#8217;ai eu en direct ou sur le Net semblent montrer que la présentation a été appréciée, et c&#8217;est ce qui nous rend encore plus heureux (<a href="http://blog.soat.fr/2013/04/devoxx-fr-2013-du-javascript-propre-challenge-accepted/">un exemple ici</a>).</p>

<p>Une chose toutefois, que l&#8217;on fera peut-être si notre présentation est prise sur une autre conférence. Il semblerait, d&#8217;après les questions, que certaines personnes s&#8217;attendaient à avoir un peu la <em>stack</em> idéale pour développer en JavaScript. Tout d&#8217;abord, elle n&#8217;existe pas. Choisir un framework JavaScript va dépendre de vos besoins, mais aussi de votre maitrise du langage, et du risque que vous acceptez de courrir par rapport à la pérénnité de tel ou tel outil.
Je ne conseillerais pas AngularJS ou Backbone.js sans connaitre le contexte. Partir sur une application exécutée côté clent, cela a un impact à plus ou moins long terme, et faire ce choix n&#8217;est pas anodin.</p>

<p>L&#8217;un des points sur lequel il faut faire attention, c&#8217;est l&#8217;intégration des outils entre eux. Il n&#8217;est pas toujours évident de faire fonctionner X avec Y. Aussi, peut-être proposerons-nous dans une version améliorée de la présentation deux ou trois <em>stacks</em> qui fonctionnent bien ensemble.</p>

<h3>Références</h3>

<ul>
<li>Les slides sur Slideshare <a href="http://fr.slideshare.net/linsolas/java-script-devoxxfrance2013">ici</a> ou <a href="http://fr.slideshare.net/jak78/java-script-devoxxfrance2013ppt">là</a>.</li>
<li>Les slides et bientôt la vidéo sur <a href="http://www.parleys.com/#play/515aac03e4b0c779d7881496">Parleys</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devoxx France 2013 - Bilan]]></title>
    <link href="http://linsolas.github.com/blog/2013/04/02/devoxx-france-2013-bilan/"/>
    <updated>2013-04-02T23:23:00+02:00</updated>
    <id>http://linsolas.github.com/blog/2013/04/02/devoxx-france-2013-bilan</id>
    <content type="html"><![CDATA[<p><img src="http://www.devoxx.com/download/attachments/6816022/DevoxxFR-2012-web-400-267.png" title="Devoxx France 2013" alt="Devoxx France" /></p>

<p>L&#8217;édition française de Devoxx 2013 s&#8217;est donc achevée la semaine dernière. A nouveau, un énorme <strong>BRAVO</strong> à toute l&#8217;équipe organisatrice, aux sponsors, aux speakers, aux participants. C&#8217;était magique. Devoxx, c&#8217;est un peu le Disneyland du développeur geek. On y voit des &#8220;stars&#8221; (pas dans le mauvais sens du terme) et on s&#8217;amuse énormément.</p>

<p>Allez, un petit bilan personnel :</p>

<h3>Les plus</h3>

<ul>
<li>Les gens.</li>
<li>L&#8217;organisation, toujours au poil.</li>
<li>L&#8217;équipe des organisateurs, toujours gentils et disponibles.</li>
<li>Les rencontres, surtout voir en vrai des personnes que l&#8217;on ne connait que <em>via</em> Twitter.</li>
<li>Les présentations de qualité, plutôt variées et nombreuses.</li>
<li>Les gens.</li>
<li>Certains goodies. Personnellement, j&#8217;en ai un peu marre des t-shirts (sauf celui d&#8217;Atlassian qui est au top, et que je portais durant ma présentation) et des mugs. Certains sponsors innovent plus que d&#8217;autres en la matière : boite à Meuh d&#8217;OCTO, décapsuleurs, gants, etc.</li>
<li>Les concours, bien que je n&#8217;ai rien gagné !</li>
<li>Le site de Parleys qui diffuse toutes les sessions que l&#8217;on a dû rater parce que parfois c&#8217;était dur de choisir, ou que l&#8217;on discutait avec des personnes. En plus, le site a été refait en HTML 5 !</li>
<li>Le diner des speakers.</li>
<li>La soirée &#8221;<em>Meet &amp; greet</em>&#8221;.</li>
<li>Les gens.</li>
</ul>


<h3>Les moins</h3>

<ul>
<li>Pas assez de <em>Hands On</em> le mercredi. Comme je l&#8217;ai dit, j&#8217;aimerais beaucoup que Devoxx France 2014 se déroule en quatre jours : 2 jours d&#8217;universités et Labs avec une attention particulière pour les sessions où l&#8217;auditoire code vraiment, et 2 jours de conférences.</li>
<li>Le Marriott devient trop petit. L&#8217;année passée, avec un peu plus de 1200 personnes, on se sentait à l&#8217;étroit. Cette année, avec 1400 et quelques participants, c&#8217;était encore plus vrai. De nombreuses personnes se sont faites recaler à l&#8217;entrée des salles de conférences pleines pour des raisons de sécurité. Cela se comprend, mais c&#8217;est rageant. Le problème est de trouver un lieu ayant une capacité d&#8217;accueil d&#8217;au moins 1500 personnes à Paris pour un budget raisonnable. Difficile à mon avis !</li>
<li>La nourriture le midi. Sans être mauvaise, ce n&#8217;était quand même pas ça, et ça manquait un peu de variété. En plus, sauf erreur de ma part, il n&#8217;y avait pas de desserts le midi. A noter que cette année, contrairement à 2012, les boissons étaient toujours à disposition et ça c&#8217;est bien (petit bémol : pas de Coca light, que du Coca &#8220;normal&#8221; :o) ).</li>
<li>Toujours pas de NAO à gagner :)</li>
<li>Faute de place, les BOF sont toujours un peu tard le soir (certains finissent à 22h). Guère pratique quand on a déjà 2 jours de Devoxx dans les pates !</li>
</ul>


<p>Voilà, hormis le problème du lieu qui devient trop petit, rien de méchant. Devoxx confirme qu&#8217;il s&#8217;agit d&#8217;une superbe conférence, et encore une fois, j&#8217;étais très fier d&#8217;y assister, surtout en tant que speaker ! A l&#8217;année prochaine (et en fin d&#8217;année pour la version World à Anvers) !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devoxx France 2013 - Jour 3]]></title>
    <link href="http://linsolas.github.com/blog/2013/03/29/devoxx-france-2013-jour-3/"/>
    <updated>2013-03-29T09:17:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2013/03/29/devoxx-france-2013-jour-3</id>
    <content type="html"><![CDATA[<p><img src="http://www.devoxx.com/download/attachments/6816022/DevoxxFR-2012-web-400-267.png" title="Devoxx France 2013" alt="Devoxx France" /></p>

<p>Aie, déjà le dernier jour de la conférence Devoxx France. Que le temps passe vite ! Cette dernière journée reste toutefois très intense, en particulier parce qu&#8217;à 10h40, c&#8217;était ma présentation &#8221;<em>Du JavaScript propre ? Challenge Accepted!</em>&#8221; avec Julien Jakubowski. Je ferais un billet dédié à cette présentation.</p>

<!-- more -->


<h3><a href="http://www.devoxx.com/display/FR13/Web+Oriented+Architecture%2C+une+transmutation+des+pratiques+de+construction+des+SI">Web oriented architecture, une transmutation des pratiques de construction des SI</a></h3>

<p>J&#8217;avais raté les keynotes du jeudi, je me suis dit qu&#8217;il serait dommage d&#8217;en faire autant le vendredi. Bon, j&#8217;ai raté une partie de la première keynote, celle d&#8217;<a href="http://www.devoxx.com/display/FR13/Alexis+Moussine-pouchkine">Alexis Moussine-Pouchkine</a>, &#8221;<a href="http://www.devoxx.com/display/FR13/Normal+ou+decafeine">Normal ou décafeiné</a>&#8221;. En gros, le message de sa keynote est que l&#8217;avenir, en particulier le Cloud, peut - et doit - se faire avec Java.</p>

<p>Passons à la deuxième keynote, celle de <a href="http://www.devoxx.com/display/FR13/Habib+Guergachi">Habib Guergachi</a>, CEO de <a href="http://zenexity.com/">Zenexity</a>. Je voulais la voir car il l&#8217;avait <a href="http://www.parleys.com/#play/5148922a0364bc17fc56c738">déjà jouée l&#8217;année passée</a> sous forme de conférence, et j&#8217;avais entendu d&#8217;excellents retours. Au delà du message, c&#8217;est vraiment le bonhomme qui impressionne. Il avait une telle énergie que cela en devenait contagieux. Rien de mieux pour bien démarrer une journée intense !</p>

<p>Revenons au message lui-même. Il est un peu polémique, mais je crois qu&#8217;il n&#8217;a pas complètement tort sur un certain nombre de choses.</p>

<p>Quand il s&#8217;agit de faire un choix important, il y a deux solutions possibles. On peut opter et pousser le changement, au risque d&#8217;innover. Certes, il y a le risque de se faire virer, mais ce sera dans la gloire :) L&#8217;autre chemin, c&#8217;est la soumission, et ne pas bousculer les choses établies. On ne risque pas de se faire virer à court terme, mais peut-être que dans 2 ans, on vous reprochera de ne pas avoir sû anticiper le changement, et vous vous ferez virer dans la honte !</p>

<p>Ok, c&#8217;est une vision un peu simpliste, mais y a un soupçon de vérité là-dedans quand même.</p>

<p>Habib, au cours de sa présentation, parle de <a href="http://www.playframework.com/">Play</a>. Bien entendu, il prêche pour sa paroisse, Zenexity est l&#8217;éditeur du framework. Il s&#8217;agit d&#8217;une innovation française. Pourtant, au début c&#8217;était plutôt un défaut, que ce soit pour les français (qui ne jurent que par des produits américains) ou par les américains eux-mêmes. Utiliser une technologie française c&#8217;est un peu comme voler dans un avion congolais : ça ne rassure pas vraiment ! Pourtant, Play! a été adopté par de grands noms (surtout américains), comme LinkedIn, Typesafe, etc. Dès lors, tout le monde, y compris les français, encense le framework.</p>

<p>On ne peut pas tout comprendre, il faut savoir se concentrer sur un problème précis, un petit bout d&#8217;une architecture entière. Et si l&#8217;on se jette à l&#8217;eau, que l&#8217;on prend le problème à bras le corps, peut-être que l&#8217;on sera la personne qui a vraiment sû comprendre et aborder ce problème, et que la solution que l&#8217;on proposera deviendra la solution que tout le mondre utilisera. Mais pour cela, il faut se lancer !</p>

<p>Pour résumer, la keynote de Habib Guergachi était pleine de panache, et donne à réflechir. Rien de mieux pour continuer la journée, surtout que la présentation suivante est celle de <a href="http://www.devoxx.com/display/FR13/Julien+Jakubowski">Julien Jakubowski</a> et&#8230; <a href="http://www.devoxx.com/display/FR13/Romain+Linsolas">moi-même</a>. J&#8217;y reviendrais très vite.</p>

<hr/>


<h3><a href="http://www.devoxx.com/display/FR13/Animez+vos+pages+HTML5++un+tour+d%27horizon+complet+des+techniques+d%27animation+en+HTML5">Animez vos pages HTML5: un tour d&#8217;horizon complet des techniques d&#8217;animation en HTML5</a></h3>

<p><a href="http://www.devoxx.com/display/FR13/Martin+Gorner">Martin Gorner</a> (<a href="https://twitter.com/martingorner">@martingorner</a>) de Google nous parle d&#8217;animation en HTML5. Sa présentation est visible <a href="http://animateyourhtml5.appspot.com/pres/#1">en live sur ce site</a>.</p>

<p>En CSS 3, <code>transition</code> permet d&#8217;animer des éléments. Le navigateur va calculer lui-même toutes les étapes intermédiaires.
La propriété <code>animation</code> permet de faire des animations plus complexes, en définissant les propriétés CSS à appliquer à différentes étapes.
Le CSS 3 dispose également de transformations géométriques 2D (rotation, agrandissement, étirement, etc.).
Il y a également des transformations 3D : <code>translateZ</code>, <code>rotateY</code>, etc.
A noter qu&#8217;il faut définir soi même la perspective via une propriété CSS : <code>-webkit-perspective: 1000px;</code>.
Par défaut, la valeur par défaut est <code>-webkit-tansform-style: flat</code>. Ce n&#8217;est pas ce que l&#8217;on souhaite, il faut donc la mettre à <code>preserve-3d</code>. Attention, Internet Explorer 10 ne gère pas cette propriété (mais on peut bidouiller avec du JavaScript pour remplir cette lacune).</p>

<p><img src="http://linsolas.github.com/images/devoxxfr-2013-animation-1.jpg" title="Finalement, animer un cube en CSS, ce n'est pas si compliqué" alt="Finalement, animer un cube en CSS, ce n'est pas si compliqué" /></p>

<p>Les bonnes habitudes pour travailler en 3D :</p>

<ul>
<li>Créer un <code>div</code> qui représente la scène.</li>
<li>Créer un objet qui supportera l&#8217;animation.</li>
<li>Y affecter des images.</li>
<li>Définir les propriétés d&#8217;animation.</li>
</ul>


<p>Après avoir passé en revue l&#8217;utilisation des Canvas 2D, Martin aborde le Canvas 3D, connu aussi sous le nom de <strong>WebGL</strong>. Après quelques explications, Martin propose d&#8217;aborder la partie pratique à l&#8217;aide de la librairie <a href="https://github.com/mrdoob/three.js/">Three.js</a>, qui permet de coder dans le moteur WebGL en JavaScript : définition de la scène, création d&#8217;une &#8220;caméra&#8221;, des &#8220;lumières&#8221;. Ensuite on peut ajouter des objets (des <em>Meshs</em>). Enfin, on définit les actions.
Voici un exemple de code avec cette librairie :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">camera</span><span class="p">,</span> <span class="nx">scene</span><span class="p">,</span> <span class="nx">renderer</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">geometry</span><span class="p">,</span> <span class="nx">material</span><span class="p">,</span> <span class="nx">mesh</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">init</span><span class="p">();</span>
</span><span class='line'><span class="nx">animate</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">camera</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">(</span> <span class="mi">75</span><span class="p">,</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span> <span class="o">/</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">10000</span> <span class="p">);</span>
</span><span class='line'>    <span class="nx">camera</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">z</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">scene</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Scene</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">geometry</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CubeGeometry</span><span class="p">(</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">200</span> <span class="p">);</span>
</span><span class='line'>    <span class="nx">material</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="p">(</span> <span class="p">{</span> <span class="nx">color</span><span class="o">:</span> <span class="mh">0xff0000</span><span class="p">,</span> <span class="nx">wireframe</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>    <span class="nx">mesh</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span> <span class="nx">geometry</span><span class="p">,</span> <span class="nx">material</span> <span class="p">);</span>
</span><span class='line'>    <span class="nx">scene</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span> <span class="nx">mesh</span> <span class="p">);</span>
</span><span class='line'>    <span class="nx">renderer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CanvasRenderer</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">renderer</span><span class="p">.</span><span class="nx">setSize</span><span class="p">(</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="p">,</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span> <span class="p">);</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span> <span class="nx">renderer</span><span class="p">.</span><span class="nx">domElement</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">animate</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// note: three.js includes requestAnimationFrame shim</span>
</span><span class='line'>    <span class="nx">requestAnimationFrame</span><span class="p">(</span> <span class="nx">animate</span> <span class="p">);</span>
</span><span class='line'>    <span class="nx">mesh</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">x</span> <span class="o">+=</span> <span class="mf">0.01</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">mesh</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">y</span> <span class="o">+=</span> <span class="mf">0.02</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">renderer</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span> <span class="nx">scene</span><span class="p">,</span> <span class="nx">camera</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Three.js gère également des modèles d&#8217;objets 3D (via la spécification <a href="https://collada.org">Collada</a> par exemple).</p>

<p>Un point sur les préfixes (ici <code>-webkit-*</code>) : il y a une &#8220;convention&#8221;. Tant qu&#8217;une spécification n&#8217;est pas officielle, les navigateurs utilisent des préfixes. Une fois la spécification entérinée, alors le préfixe peut disparaître. On peut sinon utiliser des outils tels que <a href="http://leaverou.github.com/prefixfree/">prefixfree.js</a> ou <a href="http://sass-lang.com/">SASS</a> qui vont s&#8217;occuper d&#8217;ajouter les préfixes pour nous.</p>

<p><img src="http://linsolas.github.com/images/devoxxfr-2013-animation-2.jpg" title="Les 4 possibilités d'animations en web" alt="Les 4 possibilités d'animations en web" /></p>

<hr/>


<h2><a href="http://www.devoxx.com/display/FR13/Peut+on+toujours+etre+developpeur+apres+40+ans">Peut on toujours être développeur après 40 ans ?</a></h2>

<p><a href="http://www.devoxx.com/display/FR13/Benjamin+Marron">Benjamin Marron</a> (<a href="https://twitter.com/bmarron">@bmarron</a>) nous explique s&#8217;il est possible</p>

<p>Être boucher à 40 ans ? Artisan à 40 ans ? La question ne se pose pas tant elle est évidente. Pourtant, pour un développeur, la question se pose.
Y a-t-il une obscolescence des développeur ? Si la personne est concernée, se forme, alors non. Mais sans ces efforts, cela risque d&#8217;arriver. Et direction chef de projet :)</p>

<p>Grâce à leur expérience, les développeurs expérimentés savent mieux filtrer les informations, choisir les outils ou les librairies.</p>

<p><img src="http://linsolas.github.com/images/devoxxfr-2013-40ans.jpg" title="Développeur à 40 ans, c'est ça ?" alt="Développeur à 40 ans, c'est ça ?" /></p>

<p>Alors la question est peut-être de savoir si nous sommes usés ?
Il ne faut pas rester dans sa zone de confort.
Les conférences comme Devoxx permettent de se gonfler à bloc, le leitmotiv c&#8217;est &#8221;<strong>soyez fiers d&#8217;être développeurs</strong>&#8221;</p>

<p>Quid du choc générationnel ? Comme travailler avec des &#8220;petits jeunes&#8221; de 20 ans ? Il faut rester humble, dire que l&#8217;on a toujours à apprendre.</p>

<p>Il y a aussi le problème de disponibilité, avec la vie de famille, les enfants, etc. Mais cela reste jouable, et le fait de ne pas être toujours 100% disponible pour son travail n&#8217;est pas un frein.</p>

<p>Le message de Benjamin Marron est que la passion doit nous faire continuer dans cette voie, et que nous avons les moyens d&#8217;y parvenir. Un sujet n&#8217;a pas été vraiment abordé, si ce n&#8217;est lors des questions du public : la reconnaissance de l&#8217;expérience par l&#8217;employeur. Il est vrai qu&#8217;en France, niveau salaire, on a tendance à stagner assez vite (disons à partir d&#8217;une dizaine d&#8217;années d&#8217;expérience), et continuer sa progression n&#8217;est pas toujours facile. Ca reste compliqué aujourd&#8217;hui, mais les choses semblent changer. Doucement en tout cas.</p>

<hr/>


<h2><a href="http://www.devoxx.com/display/FR13/Winter+is+coming">Winter is coming</a></h2>

<p><img src="http://linsolas.github.com/images/devoxxfr-2013-winter.jpg" title="Winter is coming" alt="Winter is coming" /></p>

<p>Je finis (ou presque) ma journée avec la présentation de <a href="http://www.devoxx.com/display/FR13/Didier+Girard">Didier Girard</a> et <a href="http://www.devoxx.com/display/FR13/Aurelien+Pelletier">Aurélien Pelletier</a> de <a href="http://www.sfeir.com/">SFEIR</a>. J&#8217;avoue que j&#8217;ai un peu du mal à savoir quoi tirer de cette présentation, tant le message n&#8217;était pas très clair. L&#8217;idée, du moins une partie de ce qui a été dit, c&#8217;est de savoir comment juger de la pertinence d&#8217;un framework, d&#8217;une librairie, et de savoir estimer son espérance de vie, dans un monde très concurrentiel.</p>

<p>Didier Girard décide donc d&#8217;utiliser <a href="http://www.google.com/trends/?hl=en">Google Trends</a> pour juger de la popularité d&#8217;un framework. Cet outil de Google permet de mesurer, et comparer, le nombre de fois où tel ou tel mot est <em>recherché</em> sur Google.
Plutôt que simplement comparer deux noms de technologies via le site de Google, il décide d&#8217;y ajouter le terme <em>tutorial</em>, supposant que plus on recherche de tutoriels sur une technologie, plus celle-ci intéresse les gens, et sera facile à maitriser.
Bien sûr, Didier Girard insiste sur le fait que cela doit aider à se faire une opinion, mais que cela ne saurait suffire. Pourtant, il n&#8217;ira guère plus loin dans sa démonstration, ce qui est un peu contradictoire au final. Dommage.</p>

<p>Pour résumer, on va dire que ce n&#8217;est pas forcément la présentation que j&#8217;ai préféré à Devoxx :)</p>

<hr/>


<h2><a href="http://www.devoxx.com/display/FR13/Les+Cast+Codeurs+Podcast...+putain+4+ans+deja%21">Les CastCodeurs, putain 4 ans déjà</a></h2>

<p><img src="http://linsolas.github.com/images/devoxxfr-2013-castcodeurs.jpg" title="Merci Atlassian, une fois de plus !" alt="Merci Atlassian, une fois de plus !" /></p>

<p>Ca devient une tradition, finir un Devoxx avec une session live des <a href="http://lescastcodeurs.com/">Cast Codeurs</a>. A vrai dire, je ne vois <strong>aucune</strong> raison de ne pas y assister : récapitulatif de la conférence, bonne ambiance, bonnes blagues (quoique ?) et bières offertes par Atlassian ! Rien de mieux pour terminer en beauté une magnifique conférence. Allez écouter le podcast, bientôt disponible. En attendant, il y a les podcasts de <a href="http://lescastcodeurs.com/2011/11/28/les-cast-codeurs-podcast-episode-49-devoxx-2011-les-dix-ans/">Devoxx 2011</a>, <a href="http://lescastcodeurs.com/2012/04/21/les-cast-codeurs-podcast-episode-57-en-direct-de-devoxx-france-2012/">Devoxx France 2012</a>, et enfin <a href="http://lescastcodeurs.com/2012/11/29/les-cast-codeurs-podcast-episode-68-devoxx-2012-et-les-putchettes/">Devoxx 2012</a>.</p>

<p>A l&#8217;année prochaine !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devoxx France 2013 - Jour 2]]></title>
    <link href="http://linsolas.github.com/blog/2013/03/28/devoxx-france-2013-jour-2/"/>
    <updated>2013-03-28T11:31:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2013/03/28/devoxx-france-2013-jour-2</id>
    <content type="html"><![CDATA[<p><img src="http://www.devoxx.com/download/attachments/6816022/DevoxxFR-2012-web-400-267.png" title="Devoxx France 2013" alt="Devoxx France" /></p>

<p>Et c&#8217;est parti pour la seconde journée de Devoxx France 2013. Le jeudi est la première journée des conférences et quickies. Moins de code, mais toujours autant de fun.</p>

<p>Pour cause de timing, j&#8217;ai hélas raté les keynotes du matin. <a href="http://www.devoxx.com/display/FR13/Bonjour+et+bienvenue">La première</a>, présentée par une partie de l&#8217;équipe organisatrice de l&#8217;événement, était essentiellement destinée à accueillir les personnes et donner un certain nombre de chiffres. Une annonce toutefois : la nouvelle version du site <a href="http://www.parleys.com">Parleys</a>, refait complètement en HTML 5. Exit le Flash, et c&#8217;est tant mieux !</p>

<p><a href="http://www.devoxx.com/pages/viewpage.action?pageId=6818412">La seconde, L&#8217;Histoire des Ecritures</a>, présentée par <a href="http://www.devoxx.com/display/FR13/Clarisse+Herrenschmidt">Clarisse Herrenschmidt</a> retraçait l&#8217;histoire de l&#8217;écriture, au terme de nombreux siècles d&#8217;évolution. Une keynote visiblement passionnante, qui change un peu des thèmes très informatiques dont on a l&#8217;habitude. Certains l&#8217;ont comparée à la keynote de Michel Serres à l&#8217;USI, donc forcément un compliment ! L&#8217;ayant ratée, je pense qu&#8217;il s&#8217;agira de la première que je regarderais sur le site de Parleys.</p>

<p><a href="http://www.devoxx.com/display/FR13/Objects+and+functions%2C+conflict+without+a+cause">Dernière keynote</a> fut celle de <a href="http://www.devoxx.com/display/FR13/Martin+Odersky">Martin Odersky</a>, le créateur de Scala. Il semble que les retours indiquent que la keynote n&#8217;a pas été dans la direction d&#8217;un apaisement entre les <em>Javaïstes</em> et les <em>Scalafistes</em>. Dommage.</p>

<!-- more -->


<h2><a href="http://www.devoxx.com/display/FR13/Elastifiez+votre+application+++du+SQL+au+NoSQL+en+moins+d%27une+heure">Elastifiez votre application : du SQL au NoSQL en moins d&#8217;une heure</a></h2>

<p><img src="http://linsolas.github.com/images/devoxxfr-2013-nosql-1.jpg" title="David et Tug sur scène" alt="David et Tug sur scène" /></p>

<p><a href="http://www.devoxx.com/display/FR13/David+Pilato">David Pilato</a> et <a href="http://www.devoxx.com/display/FR13/Tugdual%20Grall">Tugdual Grall</a> nous propose un guide pour migrer une application utilisant une base de données relationnelle vers une base de données NoSQL.</p>

<p>Tout d&#8217;abord, une question : pourquoi migrer ?</p>

<ul>
<li>Il est aisé de faire de la scalabilité verticale : augmentation des serveurs, de la mémoire, etc. Mais cela ne suffit plus, on voudrait de la scalabilité horizontale.</li>
<li>La recherche doit être structurée. On souhaiterait de la recherche full-text.</li>
</ul>


<p>Ils vont nous montrer le développement d&#8217;une application basée sur <a href="http://www.couchbase.com/">CouchBase</a> pour la base de données NoSQL et <a href="http://www.elasticsearch.org/">ElasticSearch</a> pour la partie recherche.</p>

<p><img src="http://linsolas.github.com/images/devoxxfr-2013-nosql-2.jpg" title="Un petit problème, David ?" alt="Un petit problème, David ?" /></p>

<p>On commence par une visite de l&#8217;application telle qu&#8217;elle est, dans sa version relationelle. Il s&#8217;agit d&#8217;une base assez simple, avec des fonctionnalités de CRUD, et une recherche assez limitée (la recherche n&#8217;est pas multi-champs, très stricte, etc.).</p>

<p>Première étape du refactoring de l&#8217;application : mettre en place une API REST dans le serveur (utilisation de Spring MVC + <a href="http://jackson.codehaus.org/">Jackson</a>). Par exemple, on propose une méthode de récupération d&#8217;une personne par son ID (ou éventuellement par son nom).</p>

<p>Deuxième étape, mise en place de <strong>CouchBase</strong>. Côté code, on ajoute la dépendance vers le client CouchBase dans le <code>pom.xml</code>. L&#8217;API utilisée ici est très claire et concise. Pour montrer que ça fonctionne, Tugdual montre des appels REST via la commande <code>curl</code>. Ce n&#8217;est pas sexy, mais ça marche effectivement.</p>

<p>L&#8217;interface graphique de l&#8217;application se fait en Angular, mais ça n&#8217;a guère d&#8217;importance ici.</p>

<p>Tout fonctionne bien, mais ce n&#8217;est pas encore ça. Par exemple, si on cherche <em>Joe Smith</em>, on trouvera des résultats, mais pas si l&#8217;on cherche <em>Smith Joe</em>. C&#8217;est là qu&#8217;intervient <strong>ElasticSearch</strong>. Une fois l&#8217;index dans ElasticSearch créé, on duplique les données de CouchBase vers ElasticSearch, tout ceci se faisant très simplement via l&#8217;interface web de CouchBase (la base de données est prévue pour fonctionner avec ElasticSearch).</p>

<p>Maintenant, on modifie la partie de recherche - gérée par AngularJS - afin de taper directement sur ElasticSearch, sans passer par le serveur. Avec pratiquement aucune modification, la recherche bénéficie désormais de la puissance d&#8217;ElasticSearch : recherche multi-champs, recherche plus générique (désormais la recherche <em>Smith Joe</em> trouve effectivement <em>Joe Smith</em>), etc.</p>

<p>Passons maintenant à l&#8217;analyse de données. David présente <a href="http://kibana.org/">Kibana</a>, un plugin d&#8217;Elastic Search qui permet de créer des dashboards dynamiques. En quelques clics, David arrive à créer un histogramme montrant la distribution des dates de naissance parmi la base de données contenant déjà plus d&#8217;un million d&#8217;entrées. Même chose pour créer un camembert pour la répartition par pays. Ce dashboard est dynamique. On peut ainsi naviguer dans nos données.</p>

<p><img src="http://linsolas.github.com/images/devoxxfr-2013-nosql-3.jpg" title="Kibana, pour faire des dashboards rapides et efficaces" alt="Kibana, pour faire des dashboards rapides et efficaces" /></p>

<p>Un autre point positif des bases NoSQL : les données sont sans schéma (<em>schema less</em>), c&#8217;est-à-dire qu&#8217;il est possible d&#8217;ajouter, modifier ou supprimer des champs sans aucun problème. Aucun <code>ALTER TABLE</code> à faire, pas de freeze de la base de données, pas d&#8217;update des données existantes.</p>

<p>En moins d&#8217;une heure, David et Tug ont réussi leur pari de faire migrer leur application pour la rendre plus scalable, plus élastique. En prime, et ce n&#8217;est pas négligeable, ils ont ajouté de vraies fonctionnalités de recherche et de création de dashboards dynamiques, à moindre frais. Une telle migration n&#8217;est toutefois pas si aisée dans le monde réél, et se passer d&#8217;une base relationnelle n&#8217;est pas toujours simple, en particulier car il faut changer aussi sa façon de penser son modèle de données.</p>

<hr/>


<h2><a href="http://www.devoxx.com/display/FR13/Les+bronzes+font+du+dev">Les bronzés font du dév</a></h2>

<p><img src="http://linsolas.github.com/images/devoxxfr-2013-ellene.jpg" title="Pas de machine ? Lis la doc en attendant !" alt="Pas de machine ? Lis la doc en attendant" /></p>

<p><a href="http://www.devoxx.com/display/FR13/Ellene+Dijoux">Ellène Siber Dijoux</a> (<a href="https://twitter.com/ElleneSiber">@ElleneSiber</a>), durant un Quickie humoristique, nous montre la vie professionnelle de Martin Dutruc, jeune développeur fraichement débarqué de son école. La déconvenue va être totale, et nous voyons à travers cette petite histoire pas mal de travers de notre métier (quand il n&#8217;est pas exécuté par les bonnes personnes) ainsi qu&#8217;un certain nombre de clichés dans notre environnement :</p>

<ul>
<li>La société à &#8220;taille humaine&#8221; de 1200 personnes ;</li>
<li>Le commercial qui était un ancien développeur et qui connait bien le monde du &#8221;<em>Java - J deux ZE</em>&#8221; ;</li>
<li>Pas de machine lors de l&#8217;arrivée d&#8217;un nouveau dans l&#8217;équipe. Du coup on lui donne 1000 pages de documentation, fonctionnelle ou technique ;</li>
<li>Le problème du build qui ne passe pas, alors il faut ignorer les tests ;</li>
<li>La mauvaise gestion du temps, de la pseudo-agilité (vive les itérations de 2 mois !).</li>
</ul>


<p>Ellène s&#8217;en est bien sortie, le format de sa présentation n&#8217;était pas forcément facile. Hélas, ces travers sentaient beaucoup le vécu, y compris pour moi. En tout cas, bien vu Ellène :)</p>

<hr/>


<h2><a href="http://www.devoxx.com/display/FR13/Comparing+JVM+Web+Frameworks">Comparing JVM Web Frameworks</a></h2>

<p><a href="http://www.devoxx.com/display/FR13/Matt+Raible">Matt Raible</a> (<a href="https://twitter.com/mraible">@mraible</a>) nous propose une comparaison de différents frameworks Web tournant sur la JVM. Tout d&#8217;abord une petite histoire sur le web et les frameworks web pour la JVM.</p>

<p><img src="https://farm9.staticflickr.com/8529/8588701778_91aeb65377_o.png" title="L'historique des frameworks web de la JVM" alt="L'historique des frameworks web de la JVM" />
<em>Image de <a href="http://raibledesigns.com/">Matt Raible</a> (Copyright Raible Designs)</em></p>

<p>Y a t&#8217;il trop de frameworks web pour la JVM ? La salle pense en majorité que oui. L&#8217;arrivée des frameworks JavaScript ne change pas la donne, et posent d&#8217;autres problèmes : peu de scalabilité, problème de sécurité, code potentiellement critique côté client, etc.</p>

<p>Passons au comparatif des frameworks. Tout d&#8217;abord, quels critères pour choisir les candidats ?</p>

<ul>
<li>Communauté / Support</li>
<li>HTML 5</li>
<li>REST</li>
<li>Mobile</li>
<li>Performances</li>
<li>Rapidité des pages</li>
</ul>


<p>Matt décide de se &#8220;borner&#8221; à la plateforme JVM pour restreindre son choix. Cela laisse tout de même un large choix de langage : Java, Scala, Groovy, etc.</p>

<p>Faire des comparatifs n&#8217;est pas simple. Il faut affronter communautés passionnées (surtout celles ayant une mauvaise note), critiques sur la façon de noter ou sur les notes. Il y aussi la possibilité de &#8220;tricher&#8221; avec les résultats.</p>

<p>Pour Matt, l&#8217;une des très bonne comparaison de frameworks était la présentation <a href="http://www.parleys.com/#play/514892290364bc17fc56c52e/chapter0/about">World Wide Wait</a> lors du Devoxx 2011.
Autre comparatif intéressant est le site <a href="http://devrates.com/stats/index">devrates.com</a> qui permet avant tout de connaitre la popularité d&#8217;un framework.</p>

<p>S&#8217;il s&#8217;agit d&#8217;un framework <em>full stack</em>, Matt recommande avant tout de choisir en fonction du langage que l&#8217;on souhaite utiliser : JRuby, Groovy, Scala ou Java.</p>

<p>Cette présentation n&#8217;était pas une comparaison en soi, mais plutôt les bonnes méthodes à suivre quand on veut faire soi même une comparaison de frameworks, afin de choisir ce qui permettra de mieux répondre à nos besoins. Une présentation intéressante, mais peut-être un peu en deça de ce que nous avait habitué Matt Raible par le passé.</p>

<hr/>


<h2><a href="http://www.devoxx.com/display/FR13/Structures+de+donnees+exotiques%2C+au+dela+de+ArrayList%2C+HashMap+et+autres+HashSet.">Structures de données exotiques, au delà de ArrayList, HashMap et autres HashSet</a></h2>

<p><a href="http://www.devoxx.com/display/FR13/Sam+Bessalah">Sam Bessalah</a> (<a href="https://twitter.com/samklr">@samklr</a>)</p>

<p>On a tendance à toujours sortir l&#8217;artillerie lourde, et pas de considérer vraiment le problème que l&#8217;on a. Comme il le dit, <em>quand on a un marteau, tout ressemble à un clou</em> ! Durant cette présentation, Sam nous présente 4 structures de données, un poil exotique.</p>

<h3>Skiplist</h3>

<ul>
<li>Stockage de données ordonnées</li>
<li>Insertion / suppression en <code>O(log N)</code></li>
<li>Recherche en <code>O(log N)</code></li>
</ul>


<p>Plutôt que de parcourir toute la liste pour chercher un élément, on prend des &#8220;voies express&#8221;, c&#8217;est-à-dire qu&#8217;on va sauter des éléments. Pour vulgariser un peu, Sam compare ça aux Métro 1 et au RER A. Par exemple, si l&#8217;on veut se rendre de La Défense à Châtelet, on peut prendre l&#8217;une ou l&#8217;autre des lignes. Le Métro 1 va mettre plus de temps, car il s&#8217;arrête à chaque station, alors que le RER prend une voie &#8220;express&#8221; (du moins en temps normal, quand il n&#8217;y a pas d&#8217;incident :) ). On arrive ainsi plus vite à destination. C&#8217;est le même principe pour les <code>SkipList</code> lorsqu&#8217;on la parcourt à la recherche d&#8217;un élément : on ne va pas aller d&#8217;élément en élément, mais on va plutôt prendre des &#8220;raccourcis&#8221;.</p>

<p>Depuis le JDK 1.6, il existe des implémentations de ce type de structure :</p>

<ul>
<li><a href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ConcurrentSkipListMap.html">java.util.concurrent.ConcurrentSkipListMap</a></li>
<li><a href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ConcurrentSkipListSet.html">java.util.concurrent.ConcurrentSkipListSet</a></li>
</ul>


<h3>Tries</h3>

<p>Cette structure est une sorte d&#8217;arbre ternaire. Pour une recherche de texte, la complexité va dépendre non de la taille de l&#8217;arbre, mais de la longueur de la chaine de recherche.
Toutefois, cette structure reste assez gourmande en mémoire. Sam fait un focus sur la structure <code>Hash Array Mapped Trie</code> (<a href="http://en.wikipedia.org/wiki/Hash_array_mapped_trie">HAMT</a>). Dans ce type de structure, on code les clés sur 32 bits, du coup la profondeur de l&#8217;arbre ne dépassera jamais 7 niveaux.</p>

<p>Pour la complexité nous avons d&#8217;excellents résultats :</p>

<ul>
<li>ajouter, premier, dernier, n-ième élément, mise à jour -> <code>O(1)</code>.</li>
<li>concat, insert, preprend -> <code>O(N)</code> (N étant au maximum 7).</li>
</ul>


<p>A noter qu&#8217;il existe une <code>Concurrent Trie</code> (<a href="http://en.wikipedia.org/wiki/Ctrie">CTrie</a>) qui n&#8217;est pas bloquante.</p>

<h3>Sketches</h3>

<p>Prendre un ensemble de données, en extraire des informations, puis travailler sur ces informations et non sur les données elles-mêmes.</p>

<h4>Bloom Filters</h4>

<p>Structure de données probabiliste. Par exemple, est-ce qu&#8217;un élément appartient à un ensemble de données ?
On ne pas être sûr à 100% que la donnée soit présente, mais on est absolument certain qu&#8217;elle n&#8217;y ait pas. Il ne peut donc pas y avoir de faux-négatif.</p>

<p>Attention toutefois, si un <em>Bloom Filter</em> accepte les insertions, il ne peut pas y ajouter de suppression de données. Afin de supporter la suppression, il faudra utiliser un <em>Counting Bloom Filter</em>.</p>

<p>On peut trouver une implémentation dans Guava, <a href="http://docs.guava-libraries.googlecode.com/git-history/v11.0/javadoc/com/google/common/hash/BloomFilter.html">BloomFilter</a></p>

<h3>Count Min Sketches</h3>

<p>Le <a href="http://en.wikipedia.org/wiki/Count-Min_sketch">Count Min Sketch</a> est une évolution du Bloom Filter. Cette structure garde l&#8217;information du nombre d&#8217;occurences de chaque élément. Une utilisation de ce genre de structure est de détecter quelle source change le plus souvent ses données, les IP qui consomment le plus de bande passante, etc.</p>

<p>A voir sur GitHub, une <a href="https://github.com/clearspring/stream-lib">librairie de structure de données par flux</a>.</p>

<hr/>


<p>Une seconde journée moins chargée en terme de conférence en ce qui me concerne, car il me fallait encore préparer mon passage du lendemain avec Julien Jakubowski. J&#8217;ai également beaucoup discuté avec d&#8217;autres personnes, visiter un peu les stands, etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devoxx France 2013 - Jour 1]]></title>
    <link href="http://linsolas.github.com/blog/2013/03/27/devoxx-france-2013-jour-1/"/>
    <updated>2013-03-27T09:42:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2013/03/27/devoxx-france-2013-jour-1</id>
    <content type="html"><![CDATA[<p><img src="http://www.devoxx.com/download/attachments/6816022/DevoxxFR-2012-web-400-267.png" alt="Devoxx France" /></p>

<p>Enfin, ça y est ! La deuxième édition de la conférence <a href="http://www.devoxx.com/display/FR13/Accueil">Devoxx France</a> a débuté. Comme l&#8217;année dernière, la conférence se déroule sur trois jours. Le mercredi est essentiellement constituée de démonstrations, de laboratoires, de mises en pratique d&#8217;un outil ou d&#8217;un langage, de <em>Tools in Action</em>.
Ma journée débute donc avec une université sur les tests en JavaScript. L&#8217;après-midi contiendra quelques surprises, dont&#8230; un minitel :)</p>

<!-- more -->


<h2><a href="http://www.devoxx.com/display/FR13/Le+fantome%2C+le+zombie+et+testacular%2C+panorama+des+outils+de+tests+pour+application+web+moderne.">Le fantôme, le zombie et Testacular, panorama des outils de tests pour application web moderne</a></h2>

<p><img src="http://linsolas.github.com/images/devoxxfr-2013-tests-js-1.jpg" alt="Qui fait vraiment des tests ?" /></p>

<p>Photo par <a href="https://twitter.com/binout">@binout</a></p>

<p>Pour commencer la journée et la conférence, <a href="http://www.devoxx.com/display/FR13/Jean-laurent+De+morlhon">Jean-Laurent de Morhlon</a> (<a href="https://twitter.com/morlhon">@morlhon</a>) et <a href="http://www.devoxx.com/display/FR13/Pierre+Gayvallet">Pierre Gayvallet</a> (<a href="https://twitter.com/wayofspark">@wayofspark</a>) nous proposent un tour d&#8217;horizon de ce qui se fait autour des tests JavaScript.</p>

<p>Tout d&#8217;abord, un rappel des différents types de tests</p>

<ul>
<li>Tests <strong>unitaires</strong> : il s&#8217;agit ici de tests techniques. On les exécutera plutôt en isolation, c&#8217;est-à-dire côté en supprimant le maximum de choses autour du code : pas de base de données, de navigateur web, d&#8217;accès réseau, etc.</li>
<li>Tests d&#8217;<strong>intégration</strong> : nous restons dans les techniques techniques, mais ici nous voulons mettre l&#8217;ensemble de l&#8217;application en test.</li>
<li>Tests d&#8217;<strong>acceptance</strong> : ce sont avant tout des tests fonctionnels. Nous pouvons utiliser le <em>BDD</em> (<em>Behavior Driven Development</em>). Toutefois, ces tests doivent représenter une petite partie de l&#8217;ensemble des tests.</li>
</ul>


<p>Technique de l&#8217;<em>outside-in</em> :</p>

<ul>
<li>On écrit un test d&#8217;acceptance qui va échouer.</li>
<li>Ensuite, on écrit un test unitaire qui va également échouer.</li>
<li>Puis on code de façon à faire passer le test simplement.</li>
<li>Une fois le test unitaire réussit, on procède au refactoring.</li>
<li>Une fois que le test unitaire est au vert et que le refactoring est terminé, on peut terminer en faisant en sorte que le test d&#8217;acceptance réussisse.</li>
</ul>


<p>Un peu de vocabulaire maintenant : un navigateur <em>headless</em> (&#8221;<em>sans tête</em>&#8221;) est un navigateur sans interface graphique. Cela servira beaucoup pour les tests, la partie graphique étant éliminée, nous gagnons ainsi beaucoup de temps. Quelques exemples : PhantomJS, HtmlUnit, Zombie.js&#8230;</p>

<h3>PhantomJS</h3>

<p><img src="http://linsolas.github.com/images/phantomjs.png" alt="PhantomJS" /></p>

<p><a href="http://phantomjs.org">PhantomJS</a>, un navigateur <em>headless</em> dispose d&#8217;un vrai <em>rendering</em> (pas d&#8217;émulation), rapide, et offre une API JavaScript très complète.</p>

<p>Voici un exemple de code avec PhantomJS :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Loading a web page&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">page</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;webpage&#39;</span><span class="p">).</span><span class="nx">create</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">&#39;http://www.phantomjs.org/&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">page</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//Page is loaded!</span>
</span><span class='line'>    <span class="nx">phantom</span><span class="p">.</span><span class="nx">exit</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;une des particularité de PhantomJS est son double contexte d&#8217;exécution : client et serveur. Cela implique parfois des problèmes de communication entre les deux contextes, ce qui est souvent source d&#8217;erreur.</p>

<p>La gestion du <em>rendering</em> de PhantomJS supporte quasiment tous les standards HTML5 et CSS3, avec quelques limites toutefois : pas de support de Flash (ô mon dieu :) ), pas de CSS 3D, de géolocalisation, WebGL, etc.
Son écosystème est assez riche : GhostWriter (qui implémente la spécification WebDriver), des runners de tests (Poltergeist, Mocha, etc.), des frameworks de tests (Lotte, WebSpecter, CasperJS, etc.), mais aussi des outils pour réaliser des screenshots (capturejs, node-webshot&#8230;)</p>

<h3>CasperJS</h3>

<p><img src="http://linsolas.github.com/images/casperjs.jpg" alt="CasperJS" /></p>

<p><a href="http://casperjs.org/">CasperJS</a> est une surcouche de PhantomJS pour ajouter ce qui manque à ce dernier :</p>

<ul>
<li>Gestion des callbacks, de l&#8217;asynchronisme</li>
<li>API fluide (<em>fluent API</em>)</li>
<li>Méthodes d&#8217;intéraction avec la page (support du clavier, etc.)</li>
<li>Framework de tests</li>
</ul>


<p>Par exemple, le code suivant :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">page</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;webpage&#39;</span><span class="p">).</span><span class="nx">create</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">page</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">url1</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">status</span> <span class="o">==</span> <span class="s2">&quot;fail&quot;</span><span class="p">)</span> <span class="nx">phantom</span><span class="p">.</span><span class="nx">exit</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">page</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">url2</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">status</span> <span class="o">==</span> <span class="s2">&quot;fail&quot;</span><span class="p">)</span> <span class="nx">phantom</span><span class="p">.</span><span class="nx">exit</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">page</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">url3</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">status</span> <span class="o">==</span> <span class="s2">&quot;fail&quot;</span><span class="p">)</span> <span class="nx">phantom</span><span class="p">.</span><span class="nx">exit</span><span class="p">();</span>
</span><span class='line'>            <span class="nx">page</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">url4</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">status</span> <span class="o">==</span> <span class="s2">&quot;fail&quot;</span><span class="p">)</span> <span class="nx">phantom</span><span class="p">.</span><span class="nx">exit</span><span class="p">();</span>
</span><span class='line'>                <span class="c1">// Can I stop, now?</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>s&#8217;écrira plus simplement avec CasperJS :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">casper</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;casper&#39;</span><span class="p">).</span><span class="nx">create</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">casper</span><span class="p">.</span><span class="nx">start</span><span class="p">(</span><span class="nx">url1</span><span class="p">);</span>
</span><span class='line'><span class="nx">casper</span><span class="p">.</span><span class="nx">thenOpen</span><span class="p">(</span><span class="nx">url2</span><span class="p">);</span>
</span><span class='line'><span class="nx">casper</span><span class="p">.</span><span class="nx">thenOpen</span><span class="p">(</span><span class="nx">url3</span><span class="p">);</span>
</span><span class='line'><span class="nx">casper</span><span class="p">.</span><span class="nx">thenOpen</span><span class="p">(</span><span class="nx">url4</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">casper</span><span class="p">.</span><span class="nx">run</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il faut noter qu&#8217;avec la version 1.1 de CasperJS (pas encore sortie), l&#8217;écriture des tests sera simplifiée, en particulier pour ce qui concerne le code à exécuter avant ou après des tests (<code>setUp</code> et <code>`tearDown</code>).</p>

<p>S&#8217;ensuit une démonstration de l&#8217;outil CasperJS, pour tester de façon fluide est très simple des interactions sur un site web marchant : tests basiques d&#8217;une page (vérification d&#8217;un titre, du contenu), simulation de clics pour ajouter des éléments dans le panier, test de la validation d&#8217;un formulaire, etc.
Point sympathique, il est possible de demander à CasperJS de réaliser une capture d&#8217;écran durant un test et de le copier dans un fichier avec une commande simple : <code>casper.capture("mon_image.png");</code> On peut donc faire du <em>Screenshot Driven Development</em> :)</p>

<h3>Zombie.js</h3>

<p><img src="http://linsolas.github.com/images/zombiejs.jpg" alt="ZombieJS" /></p>

<p><a href="http://zombie.labnotes.org/">ZombieJS</a> est un navigateur <em>headless</em>, qui tourne sur node.js, et qui repose sur des bibliothèque d&#8217;émulation (c&#8217;est un avantage mais aussi un inconvénient). Ce n&#8217;est donc pas un <em>vrai</em> navigateur, bien qu&#8217;il supporte la plupart des fonctionnalités des navigateurs actuels : HTML5, sélecteurs CSS3, cookier, web storage, ajax, etc. Il se base sur certaines librairies tierces, telles que :</p>

<ul>
<li>JSDom</li>
<li>HTML5</li>
<li>Sizzle.js (sélecteurs CSS)</li>
</ul>


<p>L&#8217;API de Zombie.js est fluide, ce qui permet de rendre le code plus lisible (encore plus en utilisant CoffeeScript). Voici un exemple de code avec Zombie.js :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Browser</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;zombie&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;assert&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Load the page from localhost</span>
</span><span class='line'><span class="nx">browser</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Browser</span><span class="p">()</span>
</span><span class='line'><span class="nx">browser</span><span class="p">.</span><span class="nx">visit</span><span class="p">(</span><span class="s2">&quot;http://localhost:3000/&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Fill email, password and submit form</span>
</span><span class='line'>  <span class="nx">browser</span><span class="p">.</span>
</span><span class='line'>    <span class="nx">fill</span><span class="p">(</span><span class="s2">&quot;email&quot;</span><span class="p">,</span> <span class="s2">&quot;zombie@underworld.dead&quot;</span><span class="p">).</span>
</span><span class='line'>    <span class="nx">fill</span><span class="p">(</span><span class="s2">&quot;password&quot;</span><span class="p">,</span> <span class="s2">&quot;eat-the-living&quot;</span><span class="p">).</span>
</span><span class='line'>    <span class="nx">pressButton</span><span class="p">(</span><span class="s2">&quot;Sign Me Up!&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Form submitted, new page loaded.</span>
</span><span class='line'>      <span class="nx">assert</span><span class="p">.</span><span class="nx">ok</span><span class="p">(</span><span class="nx">browser</span><span class="p">.</span><span class="nx">success</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">browser</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">),</span> <span class="s2">&quot;Welcome To Brains Depot&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un autre exemple de test avec les sélecteurs CSS :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">brower</span><span class="p">.</span><span class="nx">queryAll</span><span class="p">(</span><span class="s2">&quot;#content &gt; .produit&quot;</span><span class="p">).</span><span class="nx">length</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">7</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Avec Zombie, le code devient très lisible, ultra rapide. Toutefois, il a quelques défauts (assez importants pour certains) :</p>

<ul>
<li>Emule un navigateur.</li>
<li>Difficile à intégrer dans un build java.</li>
<li>Difficile à faire tourner sur Windows (aie !).</li>
<li>Le développement est quelque peu en berne (aie aussi !).</li>
<li>Les erreurs sont parfois cryptiques.</li>
</ul>


<p>Jean-Laurent passe ensuite à une démonstration de l&#8217;outil avec CoffeeScript.</p>

<h3>QUnit</h3>

<p><img src="http://linsolas.github.com/images/qunit.png" alt="QUnit" /></p>

<p><a href="http://qunitjs.com">QUnit</a> est une librairie de tests JavaScript plus proche des JUnit, avec le système des assert. On est ici plutôt à destination des tests unitaires, pour faire du TDD.
L&#8217;écosystème de QUnit est assez riche, il est également possible d&#8217;ajouter de nouvelles assertions (par défaut, QUnit n&#8217;en propose qu&#8217;une toute petite poignée) :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Code du plugin QUnit closeEnough (https://github.com/jquery/qunit/tree/master/addons/close-enough)</span>
</span><span class='line'><span class="nx">QUnit</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span> <span class="nx">QUnit</span><span class="p">.</span><span class="nx">assert</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Checks that the first two arguments are equal, or are numbers close enough to be considered equal</span>
</span><span class='line'><span class="cm">  * based on a specified maximum allowable difference.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="nx">close</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">actual</span><span class="p">,</span> <span class="nx">expected</span><span class="p">,</span> <span class="nx">maxDifference</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">passes</span> <span class="o">=</span> <span class="p">(</span><span class="nx">actual</span> <span class="o">===</span> <span class="nx">expected</span><span class="p">)</span> <span class="o">||</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">actual</span> <span class="o">-</span> <span class="nx">expected</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="nx">maxDifference</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">QUnit</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">passes</span><span class="p">,</span> <span class="nx">actual</span><span class="p">,</span> <span class="nx">expected</span><span class="p">,</span> <span class="nx">message</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Checks that the first two arguments are numbers with differences greater than the specified</span>
</span><span class='line'><span class="cm">  * minimum difference.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="nx">notClose</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">actual</span><span class="p">,</span> <span class="nx">expected</span><span class="p">,</span> <span class="nx">minDifference</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">QUnit</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">actual</span> <span class="o">-</span> <span class="nx">expected</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nx">minDifference</span><span class="p">,</span> <span class="nx">actual</span><span class="p">,</span> <span class="nx">expected</span><span class="p">,</span> <span class="nx">message</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;utilisation de cette nouvelle assertion doit passer par l&#8217;objet <em>assert</em> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;Example unit test&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">assert</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">assert</span><span class="p">.</span><span class="nx">close</span><span class="p">(</span><span class="mf">3.141</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">,</span> <span class="mf">0.001</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">assert</span><span class="p">.</span><span class="nx">notClose</span><span class="p">(</span><span class="mf">3.1</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">,</span> <span class="mf">0.001</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Sinon.js</h3>

<p><a href="http://sinonjs.org/">Cette librairie</a> de tests a le gros avantage de pouvoir mocker pas mal de choses, dont les timers, des servers, des appels Ajax.
Il dispose également d&#8217;une API assez complète pour les espions (<em>spy</em>) ou les <em>stubs</em>.
Un petit exemple :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s2">&quot;calls original function with right this and args&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">callback</span> <span class="o">=</span> <span class="nx">sinon</span><span class="p">.</span><span class="nx">spy</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">proxy</span> <span class="o">=</span> <span class="nx">once</span><span class="p">(</span><span class="nx">callback</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">proxy</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">assert</span><span class="p">(</span><span class="nx">callback</span><span class="p">.</span><span class="nx">calledOn</span><span class="p">(</span><span class="nx">obj</span><span class="p">));</span>
</span><span class='line'>    <span class="nx">assert</span><span class="p">(</span><span class="nx">callback</span><span class="p">.</span><span class="nx">calledWith</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un autre exemple, en mockant une requête Ajax :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">after</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// When the test either fails or passes, restore the original</span>
</span><span class='line'>    <span class="c1">// jQuery ajax function (Sinon.JS also provides tools to help</span>
</span><span class='line'>    <span class="c1">// test frameworks automate clean-up like this)</span>
</span><span class='line'>    <span class="nx">jQuery</span><span class="p">.</span><span class="nx">ajax</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s2">&quot;makes a GET request for todo items&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">sinon</span><span class="p">.</span><span class="nx">stub</span><span class="p">(</span><span class="nx">jQuery</span><span class="p">,</span> <span class="s2">&quot;ajax&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">getTodos</span><span class="p">(</span><span class="mi">42</span><span class="p">,</span> <span class="nx">sinon</span><span class="p">.</span><span class="nx">spy</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">assert</span><span class="p">(</span><span class="nx">jQuery</span><span class="p">.</span><span class="nx">ajax</span><span class="p">.</span><span class="nx">calledWithMatch</span><span class="p">({</span> <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;/todo/42/items&quot;</span> <span class="p">}));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Karma (aka Testacular)</h3>

<p><a href="http://karma-runner.github.com/0.8/index.html">Karma</a> (anciennement appelé Testacular) est un lanceur de tests multi-navigateurs, tournant sur node.js. Il a été développé par l&#8217;équipe d&#8217;AngularJS (Google).
Il propose également des adaptateurs pour supporter différents frameworks de tests : Mocha, Jasmine, QUnit ou Angular Scenario.</p>

<h3>Chai.js</h3>

<p><img src="http://linsolas.github.com/images/chaijs.png" alt="Chaijs" /></p>

<p><a href="http://chaijs.com/">ChaiJS</a> est une toute petite librairie d&#8217;assertions. Elle propose 3 types d&#8217;assertions :</p>

<p>Le type <em>Assert</em> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">assert</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">assert</span><span class="p">.</span><span class="nx">typeOf</span><span class="p">(</span><span class="nx">foo</span><span class="p">,</span> <span class="s1">&#39;string&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">foo</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">assert</span><span class="p">.</span><span class="nx">lengthOf</span><span class="p">(</span><span class="nx">foo</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="nx">assert</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="nx">tea</span><span class="p">,</span> <span class="s1">&#39;favors&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">assert</span><span class="p">.</span><span class="nx">lengthOf</span><span class="p">(</span><span class="nx">tea</span><span class="p">.</span><span class="nx">flavors</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le type <em>Expect</em> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">expect</span> <span class="o">=</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">expect</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">expect</span><span class="p">(</span><span class="nx">foo</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span><span class="p">(</span><span class="s1">&#39;string&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">expect</span><span class="p">(</span><span class="nx">foo</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">expect</span><span class="p">(</span><span class="nx">foo</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">length</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="nx">expect</span><span class="p">(</span><span class="nx">tea</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;flavors&#39;</span><span class="p">).</span><span class="kd">with</span><span class="p">.</span><span class="nx">length</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ou encore le type du <em>Should</em> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">chai</span><span class="p">.</span><span class="nx">should</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">foo</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span><span class="p">(</span><span class="s1">&#39;string&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">foo</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">foo</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">length</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="nx">tea</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;flavors&#39;</span><span class="p">).</span><span class="kd">with</span><span class="p">.</span><span class="nx">length</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Mocha</h3>

<p><img src="http://linsolas.github.com/images/mocha.png" alt="Mocha" /></p>

<p><a href="http://visionmedia.github.com/mocha/">Mocha</a> est un framework de test, tourne sur Node.js ou dans un navigateur.
Il s&#8217;intègre parfaitement avec beaucoup d&#8217;autres choses : Jenkins, TeamCity, des outils comme chai.js.</p>

<h3>JSCover</h3>

<p><a href="http://tntim96.github.com/JSCover/">JSCover</a> (anciennement JsCoverage) permet de mesurer la couverture de code par les tests JS. Il offre également un export de type Cobertura, ce qui lui permet son intégration dans Jenkins (et a priori Sonar ?).</p>

<h3>Plato</h3>

<p><a href="http://jsoverson.github.com/plato/examples/jquery/">Plato</a> est un outil d&#8217;introspection des tests. Il donne ainsi un rapport détaillé du code JS, permet même d&#8217;estimer le nombre de bugs dans l&#8217;application :)
Il met également en détails les erreurs levées par JsLint.</p>

<p>Voilà une très bonne présentation pour commencer Devoxx France, avec beaucoup de beaux outils à tester. Peut-être même trop, les trois heures ont paru bien courtes :)</p>

<hr/>


<h2><a href="http://www.devoxx.com/display/FR13/Frontend+Live+Coding+++Tour+d%27horizon+de+l%27outillage+et+des+technos+web+d%27aujourd%27hui">Frontend live coding : tour d&#8217;horizon de l&#8217;outillage et des technos web d&#8217;aujourd&#8217;hui</a></h2>

<p><a href="http://www.parleys.com/#play/51561f64e4b0c779d78813f3">Vidéo Parleys</a></p>

<p><a href="http://www.devoxx.com/display/FR13/Frederic+Camblor">Frédéric Camblor</a> (<a href="https://twitter.com/fcamblor">@fcamblor</a>) nous propose un tour d&#8217;horizon des outils liés au développement web :</p>

<ul>
<li><strong>Yeoman</strong> / <strong>Grunt</strong> : orchestrateur des développements web ;</li>
<li><strong>Sass</strong> / <strong>Compass</strong> : surcouche à CSS permettant notamment de variabiliser les feuilles de style ;</li>
<li><strong>Bower</strong> : provisionneur de librairies JavaScript ;</li>
<li><strong>RequireJS</strong> : injecteur de dépendances JavaScript à la demande ;</li>
<li><strong>Handlebars</strong> : moteur de templating coté client ;</li>
<li><strong>BackboneJS</strong> : framework MVC qui permet d&#8217;améliorer la maintenabilité du code JavaScript ;</li>
<li>Un ensemble de tips de développement dans Chrome, dont vous ne soupçonnez peut-être pas l&#8217;existence.</li>
</ul>


<h3>Yeoman et Grunt</h3>

<p><img src="http://linsolas.github.com/images/yeoman.png" alt="Yeoman" /></p>

<p>Premier outil présenté par Frédéric, <a href="http://yeoman.io/">Yeoman</a>. C&#8217;est un ensemble d&#8217;outils pouvant jouer le rôle de <em>scaffolder</em>, c&#8217;est-à-dire qu&#8217;il va nous créer en un rien de temps une structure spécifique pour un projet, tout en forçant certaines bonnes pratiques (définition d&#8217;un cycle de vie pour l&#8217;application, exécution des tests, etc.). Quelque part, il y a pas mal de similitudes avec Maven ici.</p>

<p>Frédéric démarre par générer une structure adaptée à une <em>webapp</em>, via un générateur dédié. Il existe plusieurs autres générateurs, pour faire de l&#8217;Angular, du Testacular (enfin Karma), du Backbone, etc. La similitude avec les Maven archetype est saisissante ici. Donc une simple commande <code>yo webapp</code> permet de tout générer.</p>

<p>Une fois ceci généré, nous pouvons constater la présence d&#8217;un fichier <em>gruntfile.js</em> qui est utilisé par <a href="http://gruntjs.com/">Grunt</a> pour réaliser un certain nombre de tâches (&#8220;compilation&#8221;, tests, démarrage d&#8217;un serveur, etc.). Frédéric le compare là aussi à Maven ou Gradle. Dans les faits, je trouve plus que cela s&#8217;approche de Gradle et de son approche scriptée, mais bon. A en voir le contenu, cela est un peu cryptique dans un premier temps, mais Frédéric nous indique qu&#8217;il n&#8217;est guère nécessaire de s&#8217;y attarder. En effet, ça fonctionne, et c&#8217;est tout ce qu&#8217;on lui demande ! On pourra bien sûr décider de s&#8217;intéresser au contenu de ce fichier, si les besoins au sein du projet le nécessite.</p>

<h3>SASS</h3>

<p><img src="http://linsolas.github.com/images/sass-lang.png" alt="SASS" /></p>

<p><a href="http://sass-lang.com/">SASS</a>, à l&#8217;image de <a href="http://lesscss.org/">LESS</a> est une surcharge du langage CSS pour en offrir des améliorations. Parmi celles-ci, on notera surtout :</p>

<ul>
<li><code>@import</code> qui permet d&#8217;importer un autre fichier CSS, et donc de bien segmenter son code CSS.</li>
<li>La possibilité d&#8217;imbriquer les classes (le <em>nesting</em>), offrant ainsi une bien meilleure lisibilité de son code, tout en l&#8217;architecturant mieux.</li>
<li>Les variables, pratique pour éviter les redondances, et faciliter le refactoring.</li>
<li>Des fonctions arithmétiques simples (on pourra faire <code>$largeurPanneau + 10px</code> par exemple).</li>
<li>Des mixins, sortes de fonction permettant de regrouper sous un même bloc un code redondant.</li>
</ul>


<p>A noter qu&#8217;il existe un site, <a href="http://compass-style.org/">Compass</a> qui permet de disposer de nombreux mixins pour SASS.</p>

<h3>Bower</h3>

<p><a href="https://github.com/twitter/bower">Bower</a> est un module de gestion des dépendances, un peu à l&#8217;image de Maven. Le fichier <code>component.json</code>, que Frédéric avait généré via la commande <code>yo webapp</code>, est le descripteur des dépendances de notre projet web-app.
Il est possible d&#8217;exécuter quelques commandes avec <code>bower</code> :</p>

<ul>
<li><code>bower install</code> pour installer en local les dépendances définies pour le projet. A noter que contrairement à Maven qui utilise un <em>repository</em> commun à tous les projets, Bower copie localement, <strong>pour chaque projet</strong> la liste des dépendances. Un peu dommage !</li>
<li><code>bower search</code> recherche les dépendances présentes dans le <em>registry</em> Bower.</li>
<li><code>bower info XXX</code>  donne toutes les versions présentes pour la librairie spécifiée.</li>
</ul>


<p>Il est également possible d&#8217;enregistrer sa propre librairie dans le <em>registry</em> de Bower, via une commande (<code>bower register [mon package] [mon repo git]</code>). Attention, il ne semble pas y avoir beaucoup de contrôles, et la librairie est de suite visible à tout le monde !</p>

<p>Un point important, le <em>versioning</em> des dépendances hébergées sur Bower est assez strict, et respecte le <a href="http://semver.org/"><em>Semantic Versioning</em></a>. Pour faire simple, une version est généralement constituée de 3 chiffres (<code>x.y.z</code>), où nous avons la version majeure (<code>x</code>), la version mineure  (<code>y</code>) puis les bugfixes  (<code>z</code>). Cela nous permet d&#8217;obtenir une certaine flexibilité dans la définition des dépendances. Par exemple, si on définit une version <code>1.2.x</code>, cela signifie que l&#8217;on veut n&#8217;importe quelle version <code>1.2.*</code>, et que si une nouvelle version bugfixe apparait, alors Bower pourra l&#8217;utiliser directement.</p>

<h3>RequireJS</h3>

<p><img src="http://linsolas.github.com/images/requirejs.png" alt="Require.js" /></p>

<p>Frédéric parle maintenant de <a href="http://requirejs.org/">Require.js</a>, une librairie qui a l&#8217;avantage de pouvoir charger des fichiers JavaScript à la demande. On peut également y définir des dépendances (par exemple il faut la librairie <em>foo.js</em> puis <em>bar.js</em> avant d&#8217;exécuter mon code).</p>

<h3>Handlebars</h3>

<p><img src="http://linsolas.github.com/images/handlebars.png" alt="Handlebars" /></p>

<p>Il arrive fréquemment d&#8217;avoir besoin de recourir au <em>templating</em>, c&#8217;est-à-dire de placer de la donnée (généralement en format JSON) dans du code HTML (en particulier quand on doit itérer sur un ensemble d&#8217;éléments). Frédéric est parti pour utiliser <a href="http://handlebarsjs.com/">Handlebars</a>. Personnellement, j&#8217;ai plus l&#8217;habitude d&#8217;utiliser <a href="http://mustache.github.com/">Mustache.js</a>, mais les principes sont les mêmes.</p>

<h3>Backbone.js</h3>

<p><img src="http://linsolas.github.com/images/backbone.png" alt="Backbone.js" /></p>

<p>Pour de multiples raisons, on peut être amené à développer toute une partie de l&#8217;application côté client. Ainsi, au lieu de développer le coeur de l&#8217;application côté serveur et de n&#8217;envoyer que la partie graphique au client, nous y envoyons un framework JavaScript, ainsi que toute une application côté client : la partie modèle, la partie controlleur et la partie vue se retrouvent dès lors sur le navigateur. Frédéric opte pour <a href="http://backbonejs.org/">Backbone.js</a>, mais il existe aussi <a href="http://emberjs.com/">Ember.js</a>, ou le très à la mode <a href="http://angularjs.org/">Angular.js</a> de Google.
Un tel choix architectural n&#8217;est bien sûr pas à prendre à la légère, cela apporte certains avantages (rapidité, minimisation de l&#8217;utilisation de la bande passante, possibilité de faire fonctionner son application en mode déconnecté, etc.), mais il y a également des inconvénients, dont le principal à mon avis est la sécurité.</p>

<h3>Rivets.js</h3>

<p>Dernier choix de librairie de la session : <a href="http://rivetsjs.com/">Rivets.js</a> pour réaliser du <em>data-binding</em> bi-directionnel. Cela est nécessaire pour qu&#8217;une modification au niveau du modèle soit immédiatement répercutée côté DOM, et qu&#8217;une modification côté DOM soit répercutée côté modèle. Cette librairie s&#8217;intègre parfaitement à Backbone.js, mais aurait été tout à fait inutile avec Angular, car ce dernier intègre nativement cette fonctionnalité de <em>data-binding</em>.</p>

<p>Pour résumer, cette deuxième université a été très intéressante aussi, car elle a montré une <em>stack</em> complète d&#8217;outils et de librairies pour le développement efficace d&#8217;une application en JavaScript. Seul bémol, la partie tests qui n&#8217;a pas été abordée. Toutefois, Frédéric nous avait prévenu au début qu&#8217;il n&#8217;était pas à l&#8217;aise dans ce domaine. De plus, l&#8217;université du matin en avait fait son thème principal, et cela aurait été sans doute redondant. J&#8217;aurais quand même apprécié de savoir quelles librairies de tests s&#8217;adaptaient le mieux avec la <em>stack</em> choisie par Frédéric.</p>

<hr/>


<h2><a href="http://www.devoxx.com/display/FR13/3615+Cloud+Devoxx">3615 Cloud @ Devoxx</a></h2>

<p><img src="http://linsolas.github.com/images/devoxxfr-2013-minitel.jpg" alt="Le minitel, l'avenir de Maven ?" /></p>

<p>Voici une session complètement décalée. <a href="http://www.devoxx.com/display/FR13/Nicolas+Loof">Nicolas Loof</a> et <a href="http://www.devoxx.com/display/FR13/Laurent+Huet">Laurent Huet</a> nous proposent d&#8217;intéragir avec une instance CloudBees grâce à&#8230; un minitel ! Oui, le minitel des années 80. Et sans trucage, juste du bricolage.
Le montage est le suivant :</p>

<ul>
<li>Un bon vieux minitel sert de console : saisie des commandes et affichage (textuel bien entendu).</li>
<li>Ensuite, un assemblage électronique réalisé par Laurent pour le connecter avec un Raspberry Pi.</li>
<li>Un Raspberry Pi qui va s&#8217;occuper de la partie &#8220;intelligente&#8221; des opérations.</li>
<li>Un MacBook Pro (celui de Nicolas, dont l&#8217;écran a rendu l&#8217;âme la semaine d&#8217;avant, grâce à un geste malheureux d&#8217;un enfant) pour la connexion à Internet. C&#8217;est aussi le MBP qui affichera la vidéo d&#8217;une caméra qui filme l&#8217;écran du minitel (eh oui, difficile de brancher un cable de vidéoprojecteur sur un minitel).</li>
</ul>


<p>Durant la présentation, on nous explique le montage électronique, puis ils exécuteront les tâches suivantes :</p>

<ul>
<li>Afficher le status de quelques jobs sur CloudBees, puis interagir avec eux : stopper ou démarrer ces jobs.</li>
<li>Faire un <code>mvn package</code> ! (ils le lanceront en mode <code>offline</code> bien sûr :) ).</li>
<li>Faire un commit avec git.</li>
</ul>


<p>Bref, une session très agréable, bien que tout à fait inutile !</p>

<h2><a href="http://www.devoxx.com/display/FR13/Good+Bad+and+Ugly+Maven+-+a+puzzler+session">Good bad and ugly Maven - a puzzler session</a></h2>

<p><img src="http://linsolas.github.com/images/devoxxfr-2013-maven.jpg" alt="In Maven dependencies hell" /></p>

<p><a href="http://www.devoxx.com/display/FR13/Nicolas+Loof">Nicolas Loof</a> (encore lui), accompagné de son éternel ami <a href="http://www.devoxx.com/display/FR13/Arnaud+Heritier">Arnaud Héritier</a> nous ont proposé le jeu &#8221;<em>Qui veut gagner des millions</em>&#8221; mais à la sauce Maven. Au cours d&#8217;une série de 6 ou 7 questions, Nicolas présentait des situations plus ou moins compliquées avec Maven, souvent des problèmes de dépendances transitives avec des conflits de version. Arnaud, en bon candidat, devait donner la bonne réponse, avec parfois l&#8217;aide du public.</p>

<p>Dans une ambiance décontractée et sympathique, j&#8217;ai donc terminé la première journée de Devoxx, avant de me rendre au repas du soir des speakers.</p>

<h2>Conclusion</h2>

<p>Comme l&#8217;année dernière, la première journée a été très riche à Devoxx France. Celle-ci est généralement plus calme, car il y a moins de monde, les sessions sont plus longues, surtout quand on assiste à des universités. J&#8217;ai fait un choix très orienté sur JavaScript cette année, avec 6 heures de démo, de code et de tests. A vrai dire, le programme que j&#8217;avais initialement établi le matin était différent. Je comptais en effet aller d&#8217;abord suivre <a href="http://www.devoxx.com/display/FR13/Introduction+iOS6+pour+les+developpeurs+Java">l&#8217;introduction à iOS pour un développeur Java</a> puis le <a href="http://www.devoxx.com/display/FR13/AngularJS%2C+ou+le+futur+du+developpement+Web">développement sur AngularJS</a>, mais à ma grande déception il s&#8217;agissait d&#8217;universités et non de <em>Labs</em> (ou <em>Hands On</em>). Ne codant pas moi-même, je craignais de ne pas retenir grand chose pour iOS (je n&#8217;ai aucune connaissance dans ce langage), et je n&#8217;aurais sans doute pas appris grand chose de nouveau sur Angular.js, que j&#8217;ai déjà un peu manipulé.</p>

<p>Mon souhait pour Devoxx France 2014, ce serait que la conférence se déroule sur 4 jours :</p>

<ul>
<li>2 jours de Labs, <em>Hands On</em> et universités, mais avec une préférence pour les sessions on l&#8217;audience code;</li>
<li>2 jours de conférences.</li>
</ul>


<p>Sait-on jamais :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Du JavaScript propre ? Challenge Accepted]]></title>
    <link href="http://linsolas.github.com/blog/2013/03/21/du-javascript-propre-challenge-accepted/"/>
    <updated>2013-03-21T23:17:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2013/03/21/du-javascript-propre-challenge-accepted</id>
    <content type="html"><![CDATA[<p><img src="http://linsolas.github.com/images/affiche-conference.jpg" alt="Du JavaScript propre ? Challenge Accepted!"/></p>

<p>L&#8217;édition 2013 de <a href="http://www.devoxx.com/display/FR13/Accueil">Devoxx France</a> arrive à grands pas, le 27 mars c&#8217;est presque demain !
A nouveau, j&#8217;aurais la chance d&#8217;être speaker, cette fois-ci pour présenter, conjointement avec <a href="http://www.devoxx.com/display/FR13/Julien+Jakubowski">Julien Jakubowski</a>, <a href="http://www.devoxx.com/display/FR13/Du+Javascript+propre+++Challenge+Accepted"><em>Du JavaScript propre ? Challenge Accepted!</em></a></p>

<p>Le JavaScript est partout, et pour peu que vous souhaitiez faire un peu de web, il est incontournable. Mais fini le JavaScript de papy, celui que vous écriviez en 2003 pour bidouiller votre page web. On est aujourd&#8217;hui sur quelque chose de sérieux. Il est donc hors de question de continuer à bidouiller, et il faut savoir chouchouter son code JavaScript.</p>

<p>Nous aborderons dans un premier temps les principaux travers du développement en JavaScript, avec quelques petites surprises, puis nous rentrerons dans le vif du sujet : les astuces, les bonnes pratiques et les bons outils pour écrire du code JavaScript <strong>proprement</strong>. Au bout d&#8217;une heure, vous ne devriez plus avoir peur de vous lancer dans l&#8217;écriture de 100,000 lignes de code JavaScript !</p>

<p>Si vous êtes curieux des solutions que l&#8217;on va vous proposer, venez à la Seine B, vendredi matin à 10h40.</p>

<p>Rendez-vous à Devoxx !</p>

<p><strong>EDIT</strong> En attendant la vidéo sur le site de <a href="http://www.parleys.com">Parleys</a>, voici <a href="http://fr.slideshare.net/linsolas/java-script-devoxxfrance2013">les slides sur SlideShare</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conférencier à Devoxx France 2013]]></title>
    <link href="http://linsolas.github.com/blog/2013/02/21/conferencier-a-devoxx-france-2013/"/>
    <updated>2013-02-21T00:08:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2013/02/21/conferencier-a-devoxx-france-2013</id>
    <content type="html"><![CDATA[<p><img src="http://www.devoxx.com/download/attachments/6816022/DevoxxFR-2012-web-400-267.png"/></p>

<p><em>tl;dr</em> Je serais à nouveau présentateur pour la conférence Devoxx France 2013, et ça fait mon bonheur, surtout qu&#8217;il s&#8217;agit d&#8217;une conférence (oui, je fais une conférence dans une conférence, normal quoi) !</p>

<!-- more -->


<p>La conférence <a href="http://www.devoxx.com">Devoxx</a> est arrivée assez tard dans ma vie professionnelle. J&#8217;en avais entendu parler il y a environ 4 ou 5 ans, et j&#8217;avais eu envie d&#8217;y assister à plusieurs reprises, en vain.
Quand fin 2011 le comité Devoxx annonça qu&#8217;à partir de 2012 la conférence aurait sa <em>petite</em> soeur <strong>Devoxx France</strong>, il devenait hors de question pour moi de ne pas y assister. Et pour n&#8217;avoir aucun regrêt, j&#8217;avais même proposé deux sujets (un <em>Tools In Action</em> ainsi qu&#8217;un <em>Quickie</em>) au <em>CFP</em> (<em>Call for Papers</em>, ou en français <em>Appel à Orateur</em> ?). A ma grande surprise, les deux sujets ont été acceptés, et je me suis ainsi retrouvé à présenter ceci :</p>

<ul>
<li><a href="http://www.devoxx.com/display/FR12/Chouchoutez+votre+code+JavaScript">Chouchoutez votre code JavaScript</a>, où je montrais qu&#8217;industrialiser son développement JavaScript est aussi facile qu&#8217;en Java, et pour ne rien gâcher, avec les mêmes outils : Maven, Jenkins, Sonar.</li>
<li><a href="http://www.devoxx.com/display/FR12/TestNG%2C+parce+que+vos+tests+le+valent+bien">TestNG, parce que vos tests le valent bien</a>, un petit <em>Quickie</em> pour montrer les atouts de TestNG par rapport à JUnit.</li>
</ul>


<p>Ca a été un grand moment, et quand est venu le <em>CFP</em> pour Devoxx World (la conférence originelle, tenue à Anvers), je me suis dit que j&#8217;allais également y proposer des sujets. Au final, mon <em>Quickie</em> <a href="http://www.devoxx.com/display/DV12/Easy+Entity+Auditing+with+Hibernate+Envers">Easy Entity Auditing With Hibernate Envers</a> a été retenu. Parler en anglais n&#8217;est pas forcément chose aisée, et le format <em>Quickie</em> - 15 minutes - s&#8217;adaptait à merveille !</p>

<p>Et voilà que vient l&#8217;année 2013. Et donc les Devoxx. Cette année, en plus de Paris et Anvers, Londres s&#8217;est jointe à la fête. Mais pas question pour moi d&#8217;assister à DevoxxUK, Devoxx France restant la priorité (surtout que les deux conférences se chevauchent dans le calendrier).
Vu l&#8217;excitation que m&#8217;avait procuré mes présentations lors des Devoxx 2012, je voulais absolument y retourner comme orateur. Par manque de temps et d&#8217;inspiration, je n&#8217;ai finalement proposé qu&#8217;un seul sujet, une conférence (format de 50 minutes). Pari risqué, car c&#8217;est le <em>slot</em> le plus demandé. Il me semble qu&#8217;il y a eu environ 310 propositions pour une trentaine de places. Près de 90% seront donc refusées. Par chance, la mienne fut retenue, tout comme celle de <a href="http://julien.jakubowski.fr/">Julien Jakubowski</a> (architecte <a href="http://www.octo.com">OCTO</a> et fondateur du <a href="http://chtijug.org/">Chti&#8217;JUG</a>), <a href="http://www.devoxx.com/display/FR13/Du+Javascript+propre+++Challenge+Accepted+%21"><em>Du JavaScript propre ? Challenge Accepted</em></a>.
Etant donné la ressemblance de nos deux présentations, il a été décidé que nous présenterions tous les deux une conférence commune. C&#8217;est donc chose faite (enfin, on y travaille quoi).</p>

<p>Je ne vais pas dévoiler le contenu de la présentation, mais il s&#8217;agira de lister les principaux travers lorsque l&#8217;on développe en JavaScript, et surtout de montrer les moyens de code proprement.</p>

<p><em>Stay tuned</em>, et je l&#8217;espère que l&#8217;on se verra à la conférence Devoxx !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[brownbaglunch.fr]]></title>
    <link href="http://linsolas.github.com/blog/2013/02/20/brownbaglunch-dot-fr/"/>
    <updated>2013-02-20T23:12:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2013/02/20/brownbaglunch-dot-fr</id>
    <content type="html"><![CDATA[<p>Récemment, je vous ai dit qu&#8217;il fallait <a href="http://linsolas.github.com/blog/2013/02/09/lancez-vous-dans-les-brown-bag-lunches/">vous lancer dans les Brown Bag Lunch</a>. Je suis sûr que depuis, vous avez envie de vous y mettre, comme participant, ou pourquoi pas comme orateur !</p>

<p>Hé bien voilà un beau site tout neuf fait spécialement pour vous aider dans la démarche : <a href="http://www.brownbaglunch.fr/">http://www.brownbaglunch.fr/</a>.</p>

<p>Vous trouverez sur ce site la liste des <em>baggers</em> (présentateurs) français, avec leurs propositions de sessions, ainsi que des sites permettant d&#8217;accueillir des BBL.
Si vous souhaitez enrichir ce site, allez jeter un coup d&#8217;oeil à la <a href="https://github.com/nrichand/BrownBagLunch">page GitHub du site</a>.</p>

<p>Enfin, n&#8217;hésitez absolument pas à suivre le petit piou-piou <a href="https://twitter.com/bbl_fr">@bbl_fr</a> !</p>

<p>Allez, on s&#8217;appelle et on se fait <del>une bouffe</del> un BBL !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lancez-vous dans les Brown Bag Lunches]]></title>
    <link href="http://linsolas.github.com/blog/2013/02/09/lancez-vous-dans-les-brown-bag-lunches/"/>
    <updated>2013-02-09T23:00:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2013/02/09/lancez-vous-dans-les-brown-bag-lunches</id>
    <content type="html"><![CDATA[<p><img src="http://linsolas.github.com/images/Brown-Bag.png" alt="Brown Bag lunch"/></p>

<h2>Kezako ?</h2>

<p>Un <em>Brown Bag Lunch</em> c&#8217;est une présentation technique à l&#8217;heure du déjeuner. Le <em>brown bag</em> fait en effet référence à ce sac en carton marron que l&#8217;on utilise pour transporter son déjeuner sur son lieu de travail. L&#8217;idée est donc simple : une personne vient faire une présentation, pendant que l&#8217;assistance l&#8217;écoute en dégustant un bon sandwich (ça marche aussi avec une salade, d&#8217;ailleurs). On joint ainsi l&#8217;utile à l&#8217;agréable.</p>

<p><a href="https://twitter.com/dgageot">David Gageot</a>, en redevenant consultant indépendant, a décidé de se <a href="http://blog.javabien.net/2012/11/05/bbl/">lancer dans les BBL</a> au mois de janvier 2013. Profitant de l&#8217;occasion, je l&#8217;ai fait venir à la SGCIB, où il nous a proposé sa fameuse présentation &#8221;<em>Du Legacy au Cloud en moins d&#8217;une heure</em>&#8221;.</p>

<!-- more -->


<p><img src="http://linsolas.github.com/images/bbl-gageot.jpg" alt="David Gageot durant son BBL"/>
<em>David Gageot nous explique comment tester du code legacy</em></p>

<p>Le premier BBL organisé à la SGCIB aura finalement été celui d&#8217;un autre <a href="https://twitter.com/dadoonet">David, Pilato</a> venu faire une présentation d&#8217;<a href="http://www.elasticsearch.org">Elastic Search</a>, un moteur de recherche très puissant et extrêmement simple d&#8217;emploi.</p>

<p><img src="http://linsolas.github.com/images/bbl-pilato.jpg" alt="David Pilato durant son BBL"/>
<em>David Pilato nous montre son Elastic</em></p>

<p>Le 3e BBL devrait être celui de <a href="https://twitter.com/fsarradin">François Sarradin</a> pour nous montrer qu&#8217;en une heure, on peut développer un framework web en Scala (et, par la même occasion, chauffer la salle ;o) ).</p>

<p>A chaque fois, le public a apprécié la qualité des présentations, et de mon côté en tant qu&#8217;organisateur, j&#8217;apprécie de voir leur enthousiasme. Leur nombre ne cesse d&#8217;ailleurs de croitre, passant de 20 à 25, et peut-être même d&#8217;avantage pour les prochaines sessions.</p>

<h2>Et pourquoi ne pas proposer un BBL ?</h2>

<p>Que faut-il pour proposer un BBL ? Simplement un sujet, un peu sexy cela va sans dire. Proposer un sujet sur la maitrise des EJB 1.0, ce n&#8217;est guère attirant. Après, il faut trouver un endroit pour présenter. Moi, je peux vous proposer de venir à la SGCIB, il suffit de me contacter pour cela, après je m&#8217;occupe de l&#8217;organisation, de trouver une date ainsi que l&#8217;audience.
Pourquoi faire proposer un BBL ? En tant qu&#8217;orateur, cela a plusieurs avantages :</p>

<ul>
<li>Tout d&#8217;abord, cela vous permet de vous entrainer à parler en public face à un comité &#8220;relativement&#8221; restreint.</li>
<li>Ensuite, cela vous permet de rôder votre présentation, pour la perfectionner.</li>
<li>Cela vous fait également de la publicité, et permet de vous faire connaitre par d&#8217;autres personnes.</li>
<li>Enfin, parce que c&#8217;est fun et qu&#8217;un bon informaticien aime faire partager sa passion !</li>
</ul>


<p>Un BBL est aussi une occasion parfaite pour répéter une présentation avant de la présenter dans une conférence telle que <a href="http://www.devoxx.fr">Devoxx France</a>, <a href="http://www.mix-it.fr/">Mix-IT</a>, ou n&#8217;importe quel JUG en France (et <a href="http://www.touilleur-express.fr/2011/04/19/plus-de-17-java-user-group-en-france-debut-2011/">ils sont nombreux</a>).</p>

<p>Bref, lancez-vous dans l&#8217;aventure !</p>

<p>Et à défaut de sujet à proposer, pourquoi ne pas héberger vous-même un BBL ? Pour cela, il suffit d&#8217;avoir des locaux (si possible faciles d&#8217;accès, pour faciliter la venue des intervenants), d&#8217;avoir un public - il n&#8217;est pas nécessaire de faire des BBL avec 30 personnes, une demi douzaine peut déjà suffire - et de contacter les bonnes personnes. Twitter est sans doute une excellente porte d&#8217;entrée pour ça.</p>

<p>Icone par <a href="http://pica-ae.deviantart.com/">pica-ae</a></p>
]]></content>
  </entry>
  
</feed>
