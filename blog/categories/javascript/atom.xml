<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | fr.romain:blog:3.0]]></title>
  <link href="http://linsolas.github.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://linsolas.github.com/"/>
  <updated>2013-10-23T23:40:58+02:00</updated>
  <id>http://linsolas.github.com/</id>
  <author>
    <name><![CDATA[Romain Linsolas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Et quatre à la suite]]></title>
    <link href="http://linsolas.github.com/blog/2013/10/23/et-quatre-a-la-suite/"/>
    <updated>2013-10-23T19:05:00+02:00</updated>
    <id>http://linsolas.github.com/blog/2013/10/23/et-quatre-a-la-suite</id>
    <content type="html"><![CDATA[<p>Quatre à la suite ? Ai-je participé à Questions pour un Champion ? Non !</p>

<p>Bon, je n'ai pas blogué à ce sujet, mais j'aurais la chance dans trois semaines, d'assister à mon quatrième Devoxx. Et pour ne pas changer les bonnes habitudes, je me retrouve une nouvelle fois orateur !</p>

<p>Le sujet, c'est "<em>The perfect ingredients for a JavaScript Software Factory</em>". Oui, encore du JavaScript dans une conférence pourtant orientée Java. Cela prouve bien notre ouverture d'esprit, à nous autres Javaïstes !</p>

<p>Bref, de quoi ça va parler ? En gros, de tout ce qu'il faut pour "industrialiser" son développement JavaScript. Un développeur Java dispose déjà de toute une panoplie d'outils et de pratiques pour développer correctement ses applications. Mais qu'en est-il pour un développeur JavaScript ? L'écosystème est-il désert ou au contraire fourmille-t-il de petites perles ?</p>

<p>Hélas, il s'agit d'un <strong>Quickie</strong>, ce qui veut dire que je n'aurais que 15 minutes pour aborder ce sujet tellement vaste. Je serais donc amené à surtout éfleurer ce sujet, mais cela me semble une bonne approche pour un développeur qui souhaite s'intéresser vraiment à faire du JavaScript propre !</p>

<p>Bref, si vous êtes à Anvers la semaine du 11 novembre, n'hésitez pas à venir jeter un oeil à ma présentation...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Oyez oyez amis suisses]]></title>
    <link href="http://linsolas.github.com/blog/2013/08/19/oyez-oyez-amis-suisses/"/>
    <updated>2013-08-19T21:46:00+02:00</updated>
    <id>http://linsolas.github.com/blog/2013/08/19/oyez-oyez-amis-suisses</id>
    <content type="html"><![CDATA[<p><a href="http://soft-shake.ch/2013/program/authors/2013/10/24/romain-linsolas.html"><img src="/images/soft-shake-2013.png" title="Soft Shake 2013" alt="Soft Shake 2013" /></a></p>

<p>Super nouvelle, la présentation "<a href="http://soft-shake.ch/2013/program/sessions/13_web_dev/2013/10/24/5-Du_Javascript_propre_Challenge_Accepted.html">Du Javascript propre? Challenge Accepted!</a>" a été retenue pour la conférence <a href="http://soft-shake.ch/2013/fr/">Soft Shake 2013</a> à Genève en Suisse, du 23 au 24 octobre.
La présentation sera sensiblement la même que celle faite à Devoxx avec <a href="http://soft-shake.ch/2013/program/authors/2013/10/25/julien-jakubowski.html">Julien Jakubowski</a>, mais on essaiera de mettre à jour certaines parties.</p>

<p>Si vous venez à la conférence, venez nous voir !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Faire du CasperJS en CoffeeScript sur Windows]]></title>
    <link href="http://linsolas.github.com/blog/2013/04/09/faire-du-casperjs-en-coffeescript-sur-windows/"/>
    <updated>2013-04-09T21:07:00+02:00</updated>
    <id>http://linsolas.github.com/blog/2013/04/09/faire-du-casperjs-en-coffeescript-sur-windows</id>
    <content type="html"><![CDATA[<h1><img src="/images/logo_windows.png" title="Windows" alt="Windows" /> + <img src="/images/casperjs_mini.jpg" title="CasperJS" alt="CasperJS" /> = <img src="/images/icon_love.png" title="Loooove" alt="Loooove" /></h1>

<p>Je suis revenu de Devoxx France avec quelques idées en tête, dont celle de mettre du <a href="http://casperjs.org/">CasperJS</a> dans des applications (merci <a href="http://linsolas.github.io/blog/2013/03/27/devoxx-france-2013-jour-1/">Jean-Laurent et Pierre</a>). Pour faciliter les choses, ma machine tourne sur du Windows (version 7 en l'occurrence), ce qui n'est pas forcément le meilleur environnement pour ce type de chose. Mais on ne va pas se décourager si vite, hein ?</p>

<!-- more -->


<p>Commençons petit, et essayons de faire marcher un test simple en JavaScript sur CasperJS.</p>

<h2>Installation des outils</h2>

<p>La première chose à faire, c'est d'installer CasperJS sur la machine Windows. Mais avant cela, il est nécessaire de disposer d'une version assez récente de <a href="http://phantomjs.org">PhantomJS</a> (CasperJS utilise PhantomJS pour s'exécuter). Donc on <a href="http://phantomjs.org/download.html">télécharge PhantomJS</a> et on l'installe (enfin on décompresse le ZIP). Dans mon cas, il s'agit de la version <strong>1.9</strong>. Même chose ensuite, je dézippe le ZIP de CasperJS (v<strong>1.0.2</strong>), et je finis par ajouter dans mon <code>PATH</code> les chemins vers les exécutables. Voyons si ça marche bien :</p>

<p><code>
D:\dev&gt;phantomjs -v
1.9.0
D:\dev&gt;casperjs --version
1.0.2
</code></p>

<p>Les choses s'annoncent bien ! Exécutons un test maintenant. Prennons celui-ci, assez simple :</p>

<p>``` javascript Le code en version JavaScript
var casper = require('casper').create({</p>

<pre><code>verbose: true,
logLevel: 'debug'
</code></pre>

<p>});</p>

<p>casper.start('https://mon-application:8080/login/', function() {</p>

<pre><code>this.echo('Log in');
this.test.assertTitle('Sign in');
this.test.assertNotVisible('label#error');
this.fill('form#loginForm', {
    'j_username': 'romain.linsolas',
    'j_password': ''
}, false);
this.click("form#loginForm input.button");
this.test.assertVisible('label.error'); // Une boite d'erreur doit apparaitre
this.fill('form#loginForm', {
    'j_username': 'romain.linsolas',
    'j_password': 'abc123'
}, false);
this.click("form#loginForm input.button");
</code></pre>

<p>});</p>

<p>casper.then(function() {</p>

<pre><code>this.capture('test-screen.png');
this.test.assertTitle('Hello World'); // Nous sommes loggués
// Suite du test
</code></pre>

<p>});</p>

<p>casper.run(function() {</p>

<pre><code>this.test.renderResults(true);
</code></pre>

<p>});
```</p>

<p>En gros, il se divise ainsi :</p>

<ul>
<li>J'initialise un contexte <code>casper</code> (dans mon cas, je lui demande d'être un peu pipelette, ça facilitera les choses en cas de problème).</li>
<li>Ensuite, je démarre un test où il va exécuter certaines tâches :

<ul>
<li>se connecter à une application ;</li>
<li>vérifier le titre de la page ;</li>
<li>remplir un formulaire de login sans le mot de passe ;</li>
<li>cliquer sur un lien, et vérifier qu'un message d'erreur apparait ;</li>
<li>retester en saisissant un mot de passe.</li>
</ul>
</li>
<li>Enfin, je vérifie que je suis bien connecté (le titre de la page a changé) et pour le fun, je fais une capture d'écran de la page telle qu'elle est à ce moment-là.</li>
</ul>


<p>Allez zou, il est temps de tester. Le verdict va tomber très vite, il suffit d'écrire <code>casperjs [mon fichier].js</code> :</p>

<p><code>text
D:\dev&gt;casperjs test-casper.js
[info] [phantom] Starting...
[info] [phantom] Running suite: 3 steps
[debug] [phantom] opening url: https://mon-application:8080/login/, HTTP GET
[debug] [phantom] Navigation requested: url=https://mon-application:8080/login/, type=Other, lock=true, isMainFrame=true
[debug] [phantom] url changed to "https://mon-application:8080/login/"
[debug] [phantom] Successfully injected Casper client-side utilities
[info] [phantom] Step 2/3 https://mon-application:8080/login/ (HTTP 200)
Log in
PASS Page title is: "Sign in"
PASS Selector is not visible
[info] [remote] attempting to fetch form element from selector: 'form#loginForm'
[debug] [remote] Set "j_username" field value to romain.linsolas
[debug] [remote] Set "j_password" field value to
[debug] [phantom] Mouse event 'click' on selector: form#loginForm input.button
PASS Selector is visible
[info] [remote] attempting to fetch form element from selector: 'form#loginForm'
[debug] [remote] Set "j_username" field value to romain.linsolas
[debug] [remote] Set "j_password" field value to ******
[debug] [phantom] Mouse event 'click' on selector: form#loginForm input.button
[info] [phantom] Step 2/3: done in 718ms.
[debug] [phantom] Navigation requested: url=https://mon-application:8080/logincheck;jsessionid=808FD9D0EDD9D9C5CCAE7F11F4AE05DE, type=FormSubmitted, lock=true, isMainFrame=true
[debug] [phantom] Navigation requested: url=https://mon-application:8080/, type=FormSubmitted, lock=true, isMainFrame=true
[debug] [phantom] url changed to "https://mon-application:8080/"
[debug] [phantom] Successfully injected Casper client-side utilities
[info] [phantom] Step 3/3 https://mon-application:8080/ (HTTP 200)
[debug] [phantom] Capturing page to D:/dev/test-screen.png
[info] [phantom] Capture saved to D:/dev/.png
PASS Page title is: "Hello World"
[info] [phantom] Step 3/3: done in 1224ms.
[info] [phantom] Done 3 steps in 1226ms
</code></p>

<p>Cool, ça marche !</p>

<h2>Passons au CoffeeScript</h2>

<p><img src="/images/CoffeeScript.png" title="CoffeeScript" alt="CoffeeScript" /></p>

<p>Le JavaScript c'est bien, mais c'est un peu verbeux, surtout quand le code des tests va grandissant. Tentons maintenant de passer à <a href="http://coffeescript.org/">CoffeeScript</a>. CasperJS est l'ami de CoffeeScript et accepte très bien que les scripts à exécuter soient écrits avec. D'après la documentation, il est écrit qu'il suffit de lancer simplement la commande <code>casperjs [mon fichier].coffee</code>. Ca a l'air pas mal. Ecrivons tout d'abord le même code de test, mais cette fois-ci en CoffeeScript. Cela nous donne quelque chose comme ça :</p>

<p>``` coffeescript Le code en version CoffeeScript
casper = require('casper').create(</p>

<pre><code>verbose: true
logLevel: 'debug'
</code></pre>

<p>)</p>

<p>casper.start 'https://mon-application:8080/login/', -></p>

<pre><code>@echo 'Log in'
@test.assertTitle 'Sign in'
@test.assertNotVisible 'label#error'
@fill 'form#loginForm', {
    j_username: 'romain.linsolas'
    j_password: ''
}, false
@click "form#loginForm input.button"
@test.assertVisible('label.error') ## Error box is displayed
@fill 'form#loginForm', {
    j_username: 'romain.linsolas'
    j_password: 'abc123'
}, false
@click "form#loginForm input.button"
</code></pre>

<p>casper.then -></p>

<pre><code>@capture 'test-screen.png'
@test.assertTitle 'Hello World' ## Now we are logged
## Suite du test
</code></pre>

<p>casper.run -></p>

<pre><code>@test.renderResults true
</code></pre>

<p>```</p>

<p>Allez, maintenant on exécute tout ça :</p>

<p><code>text
D:\dev\&gt;casperjs test-casper.coffee
[info] [phantom] Starting...
[info] [phantom] Running suite: 3 steps
[debug] [phantom] opening url: https://mon-application:8080/login/, HTTP GET
[debug] [phantom] Navigation requested: url=https://mon-application:8080/login/, type=Other, lock=true, isMainFrame=true
[debug] [phantom] url changed to "https://mon-application:8080/login/"
[debug] [phantom] Successfully injected Casper client-side utilities
[info] [phantom] Step 2/3 https://mon-application:8080/login/ (HTTP 200)
Log in
PASS Page title is: "Sign in"
PASS Selector is not visible
[info] [remote] attempting to fetch form element from selector: 'form#loginForm'
[debug] [remote] Set "j_username" field value to romain.linsolas
[debug] [remote] Set "j_password" field value to
[debug] [phantom] Mouse event 'click' on selector: form#loginForm input.button
PASS Selector is visible
[info] [remote] attempting to fetch form element from selector: 'form#loginForm'
[debug] [remote] Set "j_username" field value to romain.linsolas
[debug] [remote] Set "j_password" field value to ******
[debug] [phantom] Mouse event 'click' on selector: form#loginForm input.button
[info] [phantom] Step 2/3: done in 1099ms.
[debug] [phantom] Navigation requested: url=https://mon-application:8080/logincheck;jsessionid=0A26317CDA05D97D63D6538EE4212B07, type=FormSubmitted, lock=true, isMainFrame=true
[debug] [phantom] Navigation requested: url=https://mon-application:8080/, type=FormSubmitted, lock=true, isMainFrame=true
[debug] [phantom] url changed to "https://mon-application:8080/"
[debug] [phantom] Successfully injected Casper client-side utilities
[info] [phantom] Step 3/3 https://mon-application:8080/ (HTTP 200)
PASS Page title is: "Hello World"
[debug] [phantom] Mouse event 'click' on selector: xpath selector: //*[text()="Administration"]
[debug] [phantom] Navigation requested: url=https://mon-application:8080/domain/account/index, type=LinkClicked, lock=true, isMainFrame=true
[info] [phantom] Step 3/3: done in 1389ms.
[debug] [phantom] url changed to "https://mon-application:8080/domain/account/index"
[debug] [phantom] Successfully injected Casper client-side utilities
[info] [phantom] Done 3 steps in 1749ms
</code></p>

<p>Voilà qui est génial, CasperJS gère nativement le CoffeeScript sans avoir besoin de l'installer séparément. Mais on va quand même procéder à son installation, comme ça on disposera d'un compilateur CoffeeScript.</p>

<p>La première étape, c'est l'installation de <a href="http://nodejs.org/">NodeJS</a>. Les choses se font assez simplement, il y a un <code>.msi</code> <a href="http://nodejs.org/download/">à télécharger</a>. Il me faudra juste ajouter le chemin d'installation de NodeJS dans mon <code>PATH</code> :</p>

<p><code>text
D:\dev&gt;node -v
v0.10.3
D:\dev&gt;npm -v
1.2.17
</code></p>

<p>Maintenant, installons CoffeeScript grâce à la commande <code>npm install -g coffee-script</code>.</p>

<p><code>
D:\dev\nodejs&gt;npm install -g coffee-script
npm http GET https://registry.npmjs.org/coffee-script
npm http GET https://registry.npmjs.org/coffee-script
npm http GET https://registry.npmjs.org/coffee-script
npm ERR! Error: getaddrinfo ENOTFOUND
npm ERR!     at errnoException (dns.js:37:11)
npm ERR!     at Object.onanswer [as oncomplete] (dns.js:124:16)
npm ERR! If you need help, you may report this log at:
npm ERR!     &lt;http://github.com/isaacs/npm/issues&gt;
npm ERR! or email it to:
npm ERR!     &lt;npm-@googlegroups.com&gt;
npm ERR! System Windows_NT 6.1.7601
npm ERR! command "D:\\dev\\nodejs\\\\node.exe" "D:\\dev\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "install" "-g" "coffee-script"
npm ERR! cwd D:\dev\nodejs
npm ERR! node -v v0.10.3
npm ERR! npm -v 1.2.17
npm ERR! syscall getaddrinfo
npm ERR! code ENOTFOUND
npm ERR! errno ENOTFOUND
npm ERR!
npm ERR! Additional logging details can be found in:
npm ERR!     D:\dev\nodejs\npm-debug.log
npm ERR! not ok code 0
</code></p>

<p>Comme les choses ne sont pas simples chez moi, je suis derrière un proxy :) Il faut donc donner les informations de connexion à npm pour se connecter à Internet. Cela se fait dans le fichier <code>&lt;répertoire home&gt;\.npmrc</code> (par exemple <code>C:\Users\chuck.norris\.npmrc</code>). Dans ce fichier, on définit l'adresse des proxies ainsi que le registre npm :</p>

<p><code>
proxy = http://[user]:[mot de passe]@[url proxy]:[port]/
https-proxy = http://[user]:[mot de passe]@[url proxy]:[port]/
registry = http://registry.npmjs.org
</code></p>

<p>On relance la même commande, et cette fois-ci ça marche mieux :</p>

<p><code>
D:\dev\nodejs&gt;npm install -g coffee-script
npm http GET http://registry.npmjs.org/coffee-script
npm http 200 http://registry.npmjs.org/coffee-script
npm http GET http://registry.npmjs.org/coffee-script/-/coffee-script-1.6.2.tgz
npm http 200 http://registry.npmjs.org/coffee-script/-/coffee-script-1.6.2.tgz
C:\Users\chuck.norris\AppData\Roaming\npm\cake -&gt; C:\Users\chuck.norris\AppData\Roaming\npm\node_modules\coffee-script\bin\cake
C:\Users\chuck.norris\AppData\Roaming\npm\coffee -&gt; C:\Users\chuck.norris\AppData\Roaming\npm\node_modules\coffee-script\bin\coffee
coffee-script@1.6.2 C:\Users\chuck.norris\AppData\Roaming\npm\node_modules\coffee-script
</code></p>

<p>Cool ! Voyons maintenant s'il est possible de lancer la commande <code>coffee</code> :</p>

<p><code>
D:\dev&gt;coffee -v
CoffeeScript version 1.6.2
</code></p>

<p>Houra !</p>

<h2>Intégration au build</h2>

<p>Dernière étape de ce petit tutoriel : comment allons-nous faire pour exécuter automatiquement les tests CoffeeScript, pour les intégrer par exemple dans notre <em>build</em> continu sur Jenkins ? On pourrait effectivement ajouter une étape dans la configuration Jenkins qui irait lancer un script, mais ce n'est pas très propre.</p>

<p>J'ai trouvé quelques plugins Maven, mais rien de folichon. J'ai donc décidé <a href="https://github.com/linsolas/casperjs-runner-maven-plugin">d'en créer un moi-même</a>, mais il n'est pas encore stabilisé.</p>

<p>En attendant, je vais passer par un test <strong>JUnit</strong>, qui aura pour tâche de lister les <code>*.js</code> et <code>*.coffee</code> d'un répertoire donné. C'est une version très simple, elle ne gère que les cas standards (j'essaierais de faire les choses plus proprement dans mon plugin Maven). Elle ne supporte pas non plus les options de la commande <code>casperjs</code> (comme par exemple les <code>--pre</code> ou <code>--post</code>), mais c'est un premier pas et surtout, ça marche :)</p>

<p>``` java Classe JUnit d'exécution des fichiers JavaScript et CoffeeScript
package fr.linsolas.javascript.casperjs;</p>

<p>import org.apache.commons.exec.CommandLine;
import org.apache.commons.exec.DefaultExecutor;
import org.apache.commons.lang.StringUtils;
import org.junit.BeforeClass;
import org.junit.Test;</p>

<p>import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;</p>

<p>import static org.fest.assertions.Assertions.assertThat;</p>

<p>/<em><em>
 * Run CasperJS on any </em>.js or </em>.coffee files found in a specific folder.
 * @author Romain Linsolas
 */
public class RunCasperJSTest {</p>

<pre><code>private static boolean casperFound = false;
private static final String CASPER_JS = "casperjs.bat %s";
private static final String TESTS_DIR = "D:\\dev\\mon-application\\src\\test\\javascript\\casperjs";

@BeforeClass
public static void checkEnvironment() {
    // Vérification que l'on a bien CasperJS installé.
    int res = execute(CASPER_JS, "--version");
    assertThat(res).isNotEqualTo(-1);
    casperFound = true;
}

@Test
public void runJavaScriptTests() {
    File[] files = new File(TESTS_DIR).listFiles(new FilenameFilter() {
        @Override
        public boolean accept(File dir, String name) {
            return StringUtils.endsWithIgnoreCase(name, ".js");
        }
    });
    runTests(files);
}

@Test
public void runCoffeeScriptTests() {
    File[] files = new File(TESTS_DIR).listFiles(new FilenameFilter() {
        @Override
        public boolean accept(File dir, String name) {
            return StringUtils.endsWithIgnoreCase(name, ".coffee");
        }
    });
    runTests(files);
}

private void runTests(File[] files) {
    assertThat(casperFound).isTrue();
    int ok = 0;
    int ko = 0;
    for (File f : files) {
        int res = execute(CASPER_JS, f.getAbsolutePath());
        if (res == 0) { ok++; } else { ko++; }
    }
    System.out.println("Results: " + ok + " test(s) successful, " + ko + " test(s) failed. Total of " + (ok + ko) + " test(s).");
    assertThat(ko).isEqualTo(0);
}


private static int execute(String command, Object... arguments) {
    DefaultExecutor exec = new DefaultExecutor();
    CommandLine line = CommandLine.parse(String.format(command, arguments));
    try {
        return exec.execute(line);
    } catch (IOException e) {
        return -1;
    }
}
</code></pre>

<p>}</p>

<p>```</p>

<hr>


<p><small>Logo Windows<sup>>TM</sup> par <a href="http://www.yootheme.com/">YOOTheme</a>, image de coeur par <a href="http://www.icon-king.com">David Vignoni</a></small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devoxx France 2013 - Du JavaScript propre ? Challenge Accepted]]></title>
    <link href="http://linsolas.github.com/blog/2013/04/03/devoxx-france-2013-du-javascript-propre-challenge-accepted/"/>
    <updated>2013-04-03T08:59:00+02:00</updated>
    <id>http://linsolas.github.com/blog/2013/04/03/devoxx-france-2013-du-javascript-propre-challenge-accepted</id>
    <content type="html"><![CDATA[<p><img src="/images/affiche-conference.jpg" title="Du JavaScript propre ? Challenge Accepted!" alt="Du JavaScript propre ? Challenge Accepted!" /></p>

<p>Dernier billet sur la conférence Devoxx France 2013 (ouf !). Je vais parler de notre session, <a href="http://www.devoxx.com/display/FR13/Du+Javascript+propre+++Challenge+Accepted">Du JavaScript propre ? Challenge Accepted!</a>, présentée avec <a href="http://www.devoxx.com/display/FR13/Julien+Jakubowski">Julien Jakubowski</a> d'<a href="http://www.octo.com">OCTO</a>.</p>

<!-- more -->


<p>Alors pour la petite histoire, il faut savoir que Julien et moi ne nous connaissions pas personnellement un mois et demi avant Devoxx ! Nous avions tous les deux proposé une conférence durant le CFP (<em>Call For Paper</em>) très similaire.
De son côté, Julien avait proposé une version améliorée de sa présentation <a href="http://fr.slideshare.net/jak78/javascript-ce-nest-pas-si-sale">Le JavaScript ce n'est pas si sale</a> qu'il avait faite au <a href="http://chtijug.org/">Ch'ti JUG</a> dont il est le fondateur.
De mon côté, j'avais proposé à peu près la même chose, mais dont le but était plutôt de faire un état des lieux de l'écosystème autour de JavaScript en 2013, et montrer que celui-ci est extrêmement riche, presque à l'image de celui du monde Java.
Le comité de direction, ne sachant qui choisir, nous a demandé s'il était possible de mixer nos présentations. Ce qui fut fait. On est donc parti de la présentation de Julien, puis on l'a améliorée, suite à nos nombreuses discussions. Je pense également que le fait de la présenter à deux la rend plus vivante, plus intéressante.</p>

<p><img src="/images/devoxxfr-2013-salle-vide.jpg" title="Le calme avant la tempête" alt="Le calme avant la tempête" /></p>

<h2>Le contenu</h2>

<p>La session se divise en deux parties :</p>

<ul>
<li>Les problèmes courants en JavaScript.</li>
<li>Les solutions que l'on propose pour coder proprement en JavaScript.</li>
</ul>


<h3>Les problèmes</h3>

<p>Tout d'abord, nous expliquons pourquoi nous faisons cette présentation. Le constat est double :</p>

<ul>
<li>JavaScript est partout, et les sites sont de plus en plus riches en partie grâce à lui. On ne peut donc pas l'ignorer, surtout avec l'avénement du HTML5.</li>
<li>JavaScript a une mauvaise réputation. Le langage est sale, plus adapté à la bidouille sur sa page HTML que pour faire de <em>vraies</em> applications, difficulté de trouver un bon environnement de travail.</li>
</ul>


<p>Bref, il y a du boulot pour redorer le blason de JavaScript. Après une petite partie ludique, où l'on montre quelques résultats <em>étonnants</em> de JavaScript (je vous conseille fortement de regarder <a href="https://www.destroyallsoftware.com/talks/wat">cette vidéo</a>), on passe aux vrais problèmes que l'on est susceptible de rencontrer dans ses projets :</p>

<ul>
<li><strong>Pollution de l'espace de nommage</strong>. Quand on définit des fonctions dans les fichiers JavaScript sans prendre garde, il se peut qu'il y ait des collisions entre plusieurs fonctions ayant le même nom. Par exemple, si l'on définit une méthode <code>checkForm()</code> dans un fichier JS, rien ne dit que nous n'aurons pas une méthode au même nom dans un autre fichier. Dans pareille situation, JS ne considère que la dernière méthode définie, et cela peut poser des problèmes.</li>
<li><strong>Le scope global par défaut</strong>. Par défaut, les variables ont un scope global, et cela peut aussi entrainer des problèmes. Dans le code suivant, la variable <code>i</code> sera la même dans les 2 boucles, ce qui fait que nous n'applerons le <em>logger</em> que 10 fois et non 100 fois comme attendu :</li>
</ul>


<p>``` javascript
function subLoop() {</p>

<pre><code>for (i = 0; i &lt; 10; i++) {
    console.log(i);
}
</code></pre>

<p>}</p>

<p>for (var i = 0; i &lt; 10; i++) {</p>

<pre><code>subLoop();
</code></pre>

<p>}
<code>
* **Tout est public par défaut**. Difficile de cacher certains détails de son implémentation, le mot clé</code>private``` n'existant pas en JS. Dans le code suivant, la variable censée être privée ne l'est pas du tout :</p>

<p>``` javascript
var counter = {</p>

<pre><code>privateValue: 0,
increment: function() {
    counter.privateValue++;
    return counter.privateValue;
}
</code></pre>

<p>}</p>

<p>counter.increment(); // 1
counter.privateValue = 0; // Aie
counter.increment(); // 1</p>

<p>```
* <strong>Code non testé</strong>. Tout est dit :)</p>

<p>Assez parlé des problèmes, voyons les solutions !</p>

<h3>Les solutions</h3>

<p>Première idée : on pourrait simplement déléguer le code JavaScript à son framework préféré (GWT, JSF, etc.) Nous ne souhaitons pas aller dans cette direction. Faisons du JavaScript ! Autre idée, pour au moins limiter les dégâts : utiliser <a href="https://code.google.com/p/dart/">Google Dart</a> ou <a href="http://coffeescript.org/">CoffeeScript</a> qui permettent une écriture plus fluide, plus sécurisée du code JavaScript.</p>

<p>D'un point de vue architectural, donc assez haut niveau, il existe aujourd'hui une tendance à ne pas négliger : les architectures MVC/MVW/MV* <strong>côté client</strong>. Autrement dit, plutôt que d'avoir un serveur qui va s'occuper de toute la partie fonctionnelle (couches modèle, contrôleur et vue), on va déporter tout ou partie de ceci côté client. Pour se faire, on se fera aider de solutions telles que <a href="http://backbonejs.org/">Backbone.js</a>, <a href="http://emberjs.com/">Ember</a> ou le très à la mode <a href="http://angularjs.org/">AngularJS</a>. Ce type d'architecture offre d'autres avantages : comme le code est exécuté côté client, le temps de réponse est instantané, on transfère beaucoup moins d'informations entre le client et le serveur (ce qui privilégie les réseaux mobiles), et offre plus facilement un mode déconnecté à son application. Mais ce n'est pas magique, il faudra faire attention à d'autres points, en particulier l'aspect sécurité (bah oui, tout le code est sur le client, donc il lui est plus facile de le comprendre et de le contourner).</p>

<p><img src="/images/devoxxfr-2013-architecture-mvc.png" title="Et si on déplaçait le code métier du côté client ?" alt="Et si on déplaçait le code métier du côté client ?" /></p>

<p>On a cité, parmi les problèmes, le fait que tout est public par défaut. Pour le résoudre, on propose d'opter pour la modularité. Cela revient un peu à simuler une classe en Java (attention, ce n'est pas exactement ça, c'est juste pour faire comprendre l'idée), en n'exposant à l'extérieur que ce que l'on souhaite (une sorte d'interface). Le code de notre compteur devient au final quelque chose comme ça :</p>

<p>``` javascript
// Notre counter sera notre objet utilisé par la suite.
var counter = (function() {</p>

<pre><code>var privateValue = 0;
var publicMethod = function() {
    privateValue++;
    return privateValue;
};
// On retourne un objet qui contient une méthode "increment", seul élément qui sera visible de l'extérieur.
return {
    increment: publicMethod
};
</code></pre>

<p>})();</p>

<p>// On passe à l'utilisation du compteur :
counter.increment();  // 1
counter.privateValue; // undefined
counter.privateValue = 0; // Cela ne pose pas de problème. JS va ajouter une propriété "privateValue" à l'objet "counter", mais elle sera différente du "privateValue" que nous utilisons dans notre implémentation. Pas de conflit du coup !
counter.increment();  // 2
```</p>

<p>Pour accroitre encore la lisibilité et la propreté de son code, on pourra créer des sortes de packages pour nos modules :</p>

<p>``` javascript
var myapp = {</p>

<pre><code>subpackage: {

    counter: (function() {
        // ...
    })()

}
</code></pre>

<p>}</p>

<p>// Et son utilisation :
myapp.subpackage.counter.increment(); // 1
```</p>

<p>On aborde ensuite la question du chargement des librairies JS. Plutôt que d'avoir 15 fichiers JS chargés au chargement de la page (chargement séquentiel, qui plus est, ce qui ralentit d'autant le chargement), on va utiliser les principes de l'AMD (<em>Asynchronous Modules Definition</em>), par exemple grâce à la librairie <a href="http://requirejs.org/">require.js</a>. Cela apporte en particulier deux avantages :</p>

<ul>
<li>Chargement <strong>asynchrone</strong> et/ou en <strong>parallèle</strong>, et donc cela ne bloque pas le chargement des pages, qui se fait normalement de façon séquentielle.</li>
<li>Chargement à la <strong>demande</strong>. Certaines fonctionnalités de la page peuvent ne pas être utilisées. Alors autant ne pas charger les ressources liées. On pourra ainsi dire "quand l'utilisateur souhaite faire ceci, alors on chargera <em>à ce moment-là</em> les librairies X et Y".</li>
<li>Définition des <strong>dépendances</strong>. Un peu comme dans le point précédent, on pourra indiquer que la librairie X dépend de Y, et donc on chargera Y avant X.</li>
</ul>


<p>Intéressons-nous au code en lui-même maintenant. Il existe des outils pour s'assurer que nous n'écrivons pas (trop) de bêtises dans notre code JavaScript, un peu comme le fait Checkstyle ou PMD en Java. Nous avons ainsi <a href="http://www.jslint.com/">JsLint</a> ou <a href="http://www.jshint.com/">JsHint</a> pour remplir cette tâche. On tâchera aussi d'écrire un code plus expressif, c'est-à-dire plus simple, plus lisible, plus concis. J'aime l'expression qui dit <em>qu'il faut écrire le code comme si la personne qui va le maintenir est un psychopathe qui connait mon adresse</em>, ça traduit bien l'intérêt d'écrire correctement son code.</p>

<p>Un vieux code tel que celui-ci :</p>

<p>``` javascript
function checkForm() {</p>

<pre><code>var beerName = document.getElementById("beer_name").value;
if (beerName === '') {
    document.getElementById("beer_name").className += "invalid";
    document.getElementById("error_box").style.display = "block";
    return false;
}
return true;
</code></pre>

<p>}
```</p>

<p>pourra être <em>refactoré</em> avec <a href="http://jquery.com/">jQuery</a> de cette façon, rendant le code plus lisible, plus facile à maintenir :</p>

<p>``` javascript
$('#beerForm').submit(function() {</p>

<pre><code>if ($('#beer_name').val() === "") {
    $('#beer_name').addClass('invalid');
    $('#error_box').show();
    return false;
}
return true;
</code></pre>

<p>});
```</p>

<p>Autre chose pour simplifier l'écriture : utiliser des moteurs de <em>templating</em>, tels que <a href="http://mustache.github.com/">Mustache.js</a> ou <a href="http://handlebarsjs.com/">Handlebars.js</a>, qui permettent d'insérer des données dans du HTML de façon fluide. Ainsi, si <code>beers</code> est un tableau de bières (au format JSON), on pourra écrire ceci :</p>

<p>
```</p>

<ul id="beers-list">
    {{#beers}}
        <li>{{name}} - {{color}} - {{alcohol}}%</li>
    {{/beers}}
</ul>


<script type="text/javascript">
    var template = $('#beers-list');
    // Appel du moteur de rendu de Mustache
    template.html( Mustache.render(template.html(), data) );
</script>


<p>```
</p>

<p>Autre sujet important, les tests. Nous n'allons pas dans le détail, mais nous expliquons qu'il existe de nombreux outils pour cela : Jasmine, QUnit, Mocha, CapserJS, PhantomJS, Karma, etc. Je vous renvoie à l'<a href="http://linsolas.github.com/blog/2013/03/27/devoxx-france-2013-jour-1/">université de Jean-Laurent de Morlhon et Pierre Gayvallet à ce sujet</a>.</p>

<p>Le message est clair : tous les outils sont là pour faire des tests, du TDD, du BDD, des tests d'intégration, etc. Bref, on n'a plus d'excuses !</p>

<p><img src="/images/devoxxfr-2013-batmanrobin.png" title="Faites des tests en JavaScript" alt="Faites des tests en JavaScript" /></p>

<p>Dernier point abordé : l'automatisation. On peut facilement intégrer son application JavaScript dans un serveur d'intégration continue comme Jenkins ou un outil d'analyse qualité tel que Sonar. Je vous renvoie <a href="http://www.parleys.com/#play/5148922a0364bc17fc56c7cf">à mon Tools In Action de l'année dernière pour voir tout ça en pratique</a>.
Niveau IDE, nous recommandons <a href="http://www.jetbrains.com/idea/">IntelliJ IDEA de JetBrains</a> (ou <a href="http://www.jetbrains.com/webstorm/">WebStorm</a>) qui offre un <em>vrai</em> support des langages web comme le JavaScript, le HTML ou le CSS.</p>

<h3>La présentation à Devoxx France</h3>

<p>Voilà un retour personnel sur la présentation elle-même. Déjà, on était très content avec Julien, car la salle était pleine, ce qui fait 300 personnes à nous écouter (sans compter les millions qui nous verront sur Parleys). Si si, j'avais compté les chaises pendant que la salle était vide ! :o)</p>

<p><img src="/images/devoxxfr-2013-salle-1.jpg" title="Y a du monde à gauche..." alt="Y a du monde à gauche" />
<img src="/images/devoxxfr-2013-salle-2.jpg" title="... et aussi à droite !" alt="... et aussi à droite !" /></p>

<p>On a plutôt bien géré notre temps, on a fini un peu en avance même - environ 8 minutes avant - ce qui nous a permis de prendre près d'une dizaine de questions. Les retours que j'ai eu en direct ou sur le Net semblent montrer que la présentation a été appréciée, et c'est ce qui nous rend encore plus heureux (<a href="http://blog.soat.fr/2013/04/devoxx-fr-2013-du-javascript-propre-challenge-accepted/">un exemple ici</a>).</p>

<p>Une chose toutefois, que l'on fera peut-être si notre présentation est prise sur une autre conférence. Il semblerait, d'après les questions, que certaines personnes s'attendaient à avoir un peu la <em>stack</em> idéale pour développer en JavaScript. Tout d'abord, elle n'existe pas. Choisir un framework JavaScript va dépendre de vos besoins, mais aussi de votre maitrise du langage, et du risque que vous acceptez de courrir par rapport à la pérénnité de tel ou tel outil.
Je ne conseillerais pas AngularJS ou Backbone.js sans connaitre le contexte. Partir sur une application exécutée côté clent, cela a un impact à plus ou moins long terme, et faire ce choix n'est pas anodin.</p>

<p>L'un des points sur lequel il faut faire attention, c'est l'intégration des outils entre eux. Il n'est pas toujours évident de faire fonctionner X avec Y. Aussi, peut-être proposerons-nous dans une version améliorée de la présentation deux ou trois <em>stacks</em> qui fonctionnent bien ensemble.</p>

<h3>Références</h3>

<ul>
<li>Les slides sur Slideshare <a href="http://fr.slideshare.net/linsolas/java-script-devoxxfrance2013">ici</a> ou <a href="http://fr.slideshare.net/jak78/java-script-devoxxfrance2013ppt">là</a>.</li>
<li>Les slides et bientôt la vidéo sur <a href="http://www.parleys.com/#play/515aac03e4b0c779d7881496">Parleys</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devoxx France 2013 - Bilan]]></title>
    <link href="http://linsolas.github.com/blog/2013/04/02/devoxx-france-2013-bilan/"/>
    <updated>2013-04-02T23:23:00+02:00</updated>
    <id>http://linsolas.github.com/blog/2013/04/02/devoxx-france-2013-bilan</id>
    <content type="html"><![CDATA[<p><img src="http://www.devoxx.com/download/attachments/6816022/DevoxxFR-2012-web-400-267.png" title="Devoxx France 2013" alt="Devoxx France" /></p>

<p>L'édition française de Devoxx 2013 s'est donc achevée la semaine dernière. A nouveau, un énorme <strong>BRAVO</strong> à toute l'équipe organisatrice, aux sponsors, aux speakers, aux participants. C'était magique. Devoxx, c'est un peu le Disneyland du développeur geek. On y voit des "stars" (pas dans le mauvais sens du terme) et on s'amuse énormément.</p>

<p>Allez, un petit bilan personnel :</p>

<h3>Les plus</h3>

<ul>
<li>Les gens.</li>
<li>L'organisation, toujours au poil.</li>
<li>L'équipe des organisateurs, toujours gentils et disponibles.</li>
<li>Les rencontres, surtout voir en vrai des personnes que l'on ne connait que <em>via</em> Twitter.</li>
<li>Les présentations de qualité, plutôt variées et nombreuses.</li>
<li>Les gens.</li>
<li>Certains goodies. Personnellement, j'en ai un peu marre des t-shirts (sauf celui d'Atlassian qui est au top, et que je portais durant ma présentation) et des mugs. Certains sponsors innovent plus que d'autres en la matière : boite à Meuh d'OCTO, décapsuleurs, gants, etc.</li>
<li>Les concours, bien que je n'ai rien gagné !</li>
<li>Le site de Parleys qui diffuse toutes les sessions que l'on a dû rater parce que parfois c'était dur de choisir, ou que l'on discutait avec des personnes. En plus, le site a été refait en HTML 5 !</li>
<li>Le diner des speakers.</li>
<li>La soirée "<em>Meet &amp; greet</em>".</li>
<li>Les gens.</li>
</ul>


<h3>Les moins</h3>

<ul>
<li>Pas assez de <em>Hands On</em> le mercredi. Comme je l'ai dit, j'aimerais beaucoup que Devoxx France 2014 se déroule en quatre jours : 2 jours d'universités et Labs avec une attention particulière pour les sessions où l'auditoire code vraiment, et 2 jours de conférences.</li>
<li>Le Marriott devient trop petit. L'année passée, avec un peu plus de 1200 personnes, on se sentait à l'étroit. Cette année, avec 1400 et quelques participants, c'était encore plus vrai. De nombreuses personnes se sont faites recaler à l'entrée des salles de conférences pleines pour des raisons de sécurité. Cela se comprend, mais c'est rageant. Le problème est de trouver un lieu ayant une capacité d'accueil d'au moins 1500 personnes à Paris pour un budget raisonnable. Difficile à mon avis !</li>
<li>La nourriture le midi. Sans être mauvaise, ce n'était quand même pas ça, et ça manquait un peu de variété. En plus, sauf erreur de ma part, il n'y avait pas de desserts le midi. A noter que cette année, contrairement à 2012, les boissons étaient toujours à disposition et ça c'est bien (petit bémol : pas de Coca light, que du Coca "normal" :o) ).</li>
<li>Toujours pas de NAO à gagner :)</li>
<li>Faute de place, les BOF sont toujours un peu tard le soir (certains finissent à 22h). Guère pratique quand on a déjà 2 jours de Devoxx dans les pates !</li>
</ul>


<p>Voilà, hormis le problème du lieu qui devient trop petit, rien de méchant. Devoxx confirme qu'il s'agit d'une superbe conférence, et encore une fois, j'étais très fier d'y assister, surtout en tant que speaker ! A l'année prochaine (et en fin d'année pour la version World à Anvers) !</p>
]]></content>
  </entry>
  
</feed>
