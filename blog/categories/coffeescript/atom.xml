<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: coffeescript | fr.romain:blog:3.0]]></title>
  <link href="http://linsolas.github.com/blog/categories/coffeescript/atom.xml" rel="self"/>
  <link href="http://linsolas.github.com/"/>
  <updated>2013-10-29T18:28:33+01:00</updated>
  <id>http://linsolas.github.com/</id>
  <author>
    <name><![CDATA[Romain Linsolas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Faire du CasperJS en CoffeeScript sur Windows]]></title>
    <link href="http://linsolas.github.com/blog/2013/04/09/faire-du-casperjs-en-coffeescript-sur-windows/"/>
    <updated>2013-04-09T21:07:00+02:00</updated>
    <id>http://linsolas.github.com/blog/2013/04/09/faire-du-casperjs-en-coffeescript-sur-windows</id>
    <content type="html"><![CDATA[<h1><img src="/images/logo_windows.png" title="Windows" alt="Windows" /> + <img src="/images/casperjs_mini.jpg" title="CasperJS" alt="CasperJS" /> = <img src="/images/icon_love.png" title="Loooove" alt="Loooove" /></h1>

<p>Je suis revenu de Devoxx France avec quelques idées en tête, dont celle de mettre du <a href="http://casperjs.org/">CasperJS</a> dans des applications (merci <a href="http://linsolas.github.io/blog/2013/03/27/devoxx-france-2013-jour-1/">Jean-Laurent et Pierre</a>). Pour faciliter les choses, ma machine tourne sur du Windows (version 7 en l'occurrence), ce qui n'est pas forcément le meilleur environnement pour ce type de chose. Mais on ne va pas se décourager si vite, hein ?</p>

<!-- more -->


<p>Commençons petit, et essayons de faire marcher un test simple en JavaScript sur CasperJS.</p>

<h2>Installation des outils</h2>

<p>La première chose à faire, c'est d'installer CasperJS sur la machine Windows. Mais avant cela, il est nécessaire de disposer d'une version assez récente de <a href="http://phantomjs.org">PhantomJS</a> (CasperJS utilise PhantomJS pour s'exécuter). Donc on <a href="http://phantomjs.org/download.html">télécharge PhantomJS</a> et on l'installe (enfin on décompresse le ZIP). Dans mon cas, il s'agit de la version <strong>1.9</strong>. Même chose ensuite, je dézippe le ZIP de CasperJS (v<strong>1.0.2</strong>), et je finis par ajouter dans mon <code>PATH</code> les chemins vers les exécutables. Voyons si ça marche bien :</p>

<p><code>
D:\dev&gt;phantomjs -v
1.9.0
D:\dev&gt;casperjs --version
1.0.2
</code></p>

<p>Les choses s'annoncent bien ! Exécutons un test maintenant. Prennons celui-ci, assez simple :</p>

<p>``` javascript Le code en version JavaScript
var casper = require('casper').create({</p>

<pre><code>verbose: true,
logLevel: 'debug'
</code></pre>

<p>});</p>

<p>casper.start('https://mon-application:8080/login/', function() {</p>

<pre><code>this.echo('Log in');
this.test.assertTitle('Sign in');
this.test.assertNotVisible('label#error');
this.fill('form#loginForm', {
    'j_username': 'romain.linsolas',
    'j_password': ''
}, false);
this.click("form#loginForm input.button");
this.test.assertVisible('label.error'); // Une boite d'erreur doit apparaitre
this.fill('form#loginForm', {
    'j_username': 'romain.linsolas',
    'j_password': 'abc123'
}, false);
this.click("form#loginForm input.button");
</code></pre>

<p>});</p>

<p>casper.then(function() {</p>

<pre><code>this.capture('test-screen.png');
this.test.assertTitle('Hello World'); // Nous sommes loggués
// Suite du test
</code></pre>

<p>});</p>

<p>casper.run(function() {</p>

<pre><code>this.test.renderResults(true);
</code></pre>

<p>});
```</p>

<p>En gros, il se divise ainsi :</p>

<ul>
<li>J'initialise un contexte <code>casper</code> (dans mon cas, je lui demande d'être un peu pipelette, ça facilitera les choses en cas de problème).</li>
<li>Ensuite, je démarre un test où il va exécuter certaines tâches :

<ul>
<li>se connecter à une application ;</li>
<li>vérifier le titre de la page ;</li>
<li>remplir un formulaire de login sans le mot de passe ;</li>
<li>cliquer sur un lien, et vérifier qu'un message d'erreur apparait ;</li>
<li>retester en saisissant un mot de passe.</li>
</ul>
</li>
<li>Enfin, je vérifie que je suis bien connecté (le titre de la page a changé) et pour le fun, je fais une capture d'écran de la page telle qu'elle est à ce moment-là.</li>
</ul>


<p>Allez zou, il est temps de tester. Le verdict va tomber très vite, il suffit d'écrire <code>casperjs [mon fichier].js</code> :</p>

<p><code>text
D:\dev&gt;casperjs test-casper.js
[info] [phantom] Starting...
[info] [phantom] Running suite: 3 steps
[debug] [phantom] opening url: https://mon-application:8080/login/, HTTP GET
[debug] [phantom] Navigation requested: url=https://mon-application:8080/login/, type=Other, lock=true, isMainFrame=true
[debug] [phantom] url changed to "https://mon-application:8080/login/"
[debug] [phantom] Successfully injected Casper client-side utilities
[info] [phantom] Step 2/3 https://mon-application:8080/login/ (HTTP 200)
Log in
PASS Page title is: "Sign in"
PASS Selector is not visible
[info] [remote] attempting to fetch form element from selector: 'form#loginForm'
[debug] [remote] Set "j_username" field value to romain.linsolas
[debug] [remote] Set "j_password" field value to
[debug] [phantom] Mouse event 'click' on selector: form#loginForm input.button
PASS Selector is visible
[info] [remote] attempting to fetch form element from selector: 'form#loginForm'
[debug] [remote] Set "j_username" field value to romain.linsolas
[debug] [remote] Set "j_password" field value to ******
[debug] [phantom] Mouse event 'click' on selector: form#loginForm input.button
[info] [phantom] Step 2/3: done in 718ms.
[debug] [phantom] Navigation requested: url=https://mon-application:8080/logincheck;jsessionid=808FD9D0EDD9D9C5CCAE7F11F4AE05DE, type=FormSubmitted, lock=true, isMainFrame=true
[debug] [phantom] Navigation requested: url=https://mon-application:8080/, type=FormSubmitted, lock=true, isMainFrame=true
[debug] [phantom] url changed to "https://mon-application:8080/"
[debug] [phantom] Successfully injected Casper client-side utilities
[info] [phantom] Step 3/3 https://mon-application:8080/ (HTTP 200)
[debug] [phantom] Capturing page to D:/dev/test-screen.png
[info] [phantom] Capture saved to D:/dev/.png
PASS Page title is: "Hello World"
[info] [phantom] Step 3/3: done in 1224ms.
[info] [phantom] Done 3 steps in 1226ms
</code></p>

<p>Cool, ça marche !</p>

<h2>Passons au CoffeeScript</h2>

<p><img src="/images/CoffeeScript.png" title="CoffeeScript" alt="CoffeeScript" /></p>

<p>Le JavaScript c'est bien, mais c'est un peu verbeux, surtout quand le code des tests va grandissant. Tentons maintenant de passer à <a href="http://coffeescript.org/">CoffeeScript</a>. CasperJS est l'ami de CoffeeScript et accepte très bien que les scripts à exécuter soient écrits avec. D'après la documentation, il est écrit qu'il suffit de lancer simplement la commande <code>casperjs [mon fichier].coffee</code>. Ca a l'air pas mal. Ecrivons tout d'abord le même code de test, mais cette fois-ci en CoffeeScript. Cela nous donne quelque chose comme ça :</p>

<p>``` coffeescript Le code en version CoffeeScript
casper = require('casper').create(</p>

<pre><code>verbose: true
logLevel: 'debug'
</code></pre>

<p>)</p>

<p>casper.start 'https://mon-application:8080/login/', -></p>

<pre><code>@echo 'Log in'
@test.assertTitle 'Sign in'
@test.assertNotVisible 'label#error'
@fill 'form#loginForm', {
    j_username: 'romain.linsolas'
    j_password: ''
}, false
@click "form#loginForm input.button"
@test.assertVisible('label.error') ## Error box is displayed
@fill 'form#loginForm', {
    j_username: 'romain.linsolas'
    j_password: 'abc123'
}, false
@click "form#loginForm input.button"
</code></pre>

<p>casper.then -></p>

<pre><code>@capture 'test-screen.png'
@test.assertTitle 'Hello World' ## Now we are logged
## Suite du test
</code></pre>

<p>casper.run -></p>

<pre><code>@test.renderResults true
</code></pre>

<p>```</p>

<p>Allez, maintenant on exécute tout ça :</p>

<p><code>text
D:\dev\&gt;casperjs test-casper.coffee
[info] [phantom] Starting...
[info] [phantom] Running suite: 3 steps
[debug] [phantom] opening url: https://mon-application:8080/login/, HTTP GET
[debug] [phantom] Navigation requested: url=https://mon-application:8080/login/, type=Other, lock=true, isMainFrame=true
[debug] [phantom] url changed to "https://mon-application:8080/login/"
[debug] [phantom] Successfully injected Casper client-side utilities
[info] [phantom] Step 2/3 https://mon-application:8080/login/ (HTTP 200)
Log in
PASS Page title is: "Sign in"
PASS Selector is not visible
[info] [remote] attempting to fetch form element from selector: 'form#loginForm'
[debug] [remote] Set "j_username" field value to romain.linsolas
[debug] [remote] Set "j_password" field value to
[debug] [phantom] Mouse event 'click' on selector: form#loginForm input.button
PASS Selector is visible
[info] [remote] attempting to fetch form element from selector: 'form#loginForm'
[debug] [remote] Set "j_username" field value to romain.linsolas
[debug] [remote] Set "j_password" field value to ******
[debug] [phantom] Mouse event 'click' on selector: form#loginForm input.button
[info] [phantom] Step 2/3: done in 1099ms.
[debug] [phantom] Navigation requested: url=https://mon-application:8080/logincheck;jsessionid=0A26317CDA05D97D63D6538EE4212B07, type=FormSubmitted, lock=true, isMainFrame=true
[debug] [phantom] Navigation requested: url=https://mon-application:8080/, type=FormSubmitted, lock=true, isMainFrame=true
[debug] [phantom] url changed to "https://mon-application:8080/"
[debug] [phantom] Successfully injected Casper client-side utilities
[info] [phantom] Step 3/3 https://mon-application:8080/ (HTTP 200)
PASS Page title is: "Hello World"
[debug] [phantom] Mouse event 'click' on selector: xpath selector: //*[text()="Administration"]
[debug] [phantom] Navigation requested: url=https://mon-application:8080/domain/account/index, type=LinkClicked, lock=true, isMainFrame=true
[info] [phantom] Step 3/3: done in 1389ms.
[debug] [phantom] url changed to "https://mon-application:8080/domain/account/index"
[debug] [phantom] Successfully injected Casper client-side utilities
[info] [phantom] Done 3 steps in 1749ms
</code></p>

<p>Voilà qui est génial, CasperJS gère nativement le CoffeeScript sans avoir besoin de l'installer séparément. Mais on va quand même procéder à son installation, comme ça on disposera d'un compilateur CoffeeScript.</p>

<p>La première étape, c'est l'installation de <a href="http://nodejs.org/">NodeJS</a>. Les choses se font assez simplement, il y a un <code>.msi</code> <a href="http://nodejs.org/download/">à télécharger</a>. Il me faudra juste ajouter le chemin d'installation de NodeJS dans mon <code>PATH</code> :</p>

<p><code>text
D:\dev&gt;node -v
v0.10.3
D:\dev&gt;npm -v
1.2.17
</code></p>

<p>Maintenant, installons CoffeeScript grâce à la commande <code>npm install -g coffee-script</code>.</p>

<p><code>
D:\dev\nodejs&gt;npm install -g coffee-script
npm http GET https://registry.npmjs.org/coffee-script
npm http GET https://registry.npmjs.org/coffee-script
npm http GET https://registry.npmjs.org/coffee-script
npm ERR! Error: getaddrinfo ENOTFOUND
npm ERR!     at errnoException (dns.js:37:11)
npm ERR!     at Object.onanswer [as oncomplete] (dns.js:124:16)
npm ERR! If you need help, you may report this log at:
npm ERR!     &lt;http://github.com/isaacs/npm/issues&gt;
npm ERR! or email it to:
npm ERR!     &lt;npm-@googlegroups.com&gt;
npm ERR! System Windows_NT 6.1.7601
npm ERR! command "D:\\dev\\nodejs\\\\node.exe" "D:\\dev\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "install" "-g" "coffee-script"
npm ERR! cwd D:\dev\nodejs
npm ERR! node -v v0.10.3
npm ERR! npm -v 1.2.17
npm ERR! syscall getaddrinfo
npm ERR! code ENOTFOUND
npm ERR! errno ENOTFOUND
npm ERR!
npm ERR! Additional logging details can be found in:
npm ERR!     D:\dev\nodejs\npm-debug.log
npm ERR! not ok code 0
</code></p>

<p>Comme les choses ne sont pas simples chez moi, je suis derrière un proxy :) Il faut donc donner les informations de connexion à npm pour se connecter à Internet. Cela se fait dans le fichier <code>&lt;répertoire home&gt;\.npmrc</code> (par exemple <code>C:\Users\chuck.norris\.npmrc</code>). Dans ce fichier, on définit l'adresse des proxies ainsi que le registre npm :</p>

<p><code>
proxy = http://[user]:[mot de passe]@[url proxy]:[port]/
https-proxy = http://[user]:[mot de passe]@[url proxy]:[port]/
registry = http://registry.npmjs.org
</code></p>

<p>On relance la même commande, et cette fois-ci ça marche mieux :</p>

<p><code>
D:\dev\nodejs&gt;npm install -g coffee-script
npm http GET http://registry.npmjs.org/coffee-script
npm http 200 http://registry.npmjs.org/coffee-script
npm http GET http://registry.npmjs.org/coffee-script/-/coffee-script-1.6.2.tgz
npm http 200 http://registry.npmjs.org/coffee-script/-/coffee-script-1.6.2.tgz
C:\Users\chuck.norris\AppData\Roaming\npm\cake -&gt; C:\Users\chuck.norris\AppData\Roaming\npm\node_modules\coffee-script\bin\cake
C:\Users\chuck.norris\AppData\Roaming\npm\coffee -&gt; C:\Users\chuck.norris\AppData\Roaming\npm\node_modules\coffee-script\bin\coffee
coffee-script@1.6.2 C:\Users\chuck.norris\AppData\Roaming\npm\node_modules\coffee-script
</code></p>

<p>Cool ! Voyons maintenant s'il est possible de lancer la commande <code>coffee</code> :</p>

<p><code>
D:\dev&gt;coffee -v
CoffeeScript version 1.6.2
</code></p>

<p>Houra !</p>

<h2>Intégration au build</h2>

<p>Dernière étape de ce petit tutoriel : comment allons-nous faire pour exécuter automatiquement les tests CoffeeScript, pour les intégrer par exemple dans notre <em>build</em> continu sur Jenkins ? On pourrait effectivement ajouter une étape dans la configuration Jenkins qui irait lancer un script, mais ce n'est pas très propre.</p>

<p>J'ai trouvé quelques plugins Maven, mais rien de folichon. J'ai donc décidé <a href="https://github.com/linsolas/casperjs-runner-maven-plugin">d'en créer un moi-même</a>, mais il n'est pas encore stabilisé.</p>

<p>En attendant, je vais passer par un test <strong>JUnit</strong>, qui aura pour tâche de lister les <code>*.js</code> et <code>*.coffee</code> d'un répertoire donné. C'est une version très simple, elle ne gère que les cas standards (j'essaierais de faire les choses plus proprement dans mon plugin Maven). Elle ne supporte pas non plus les options de la commande <code>casperjs</code> (comme par exemple les <code>--pre</code> ou <code>--post</code>), mais c'est un premier pas et surtout, ça marche :)</p>

<p>``` java Classe JUnit d'exécution des fichiers JavaScript et CoffeeScript
package fr.linsolas.javascript.casperjs;</p>

<p>import org.apache.commons.exec.CommandLine;
import org.apache.commons.exec.DefaultExecutor;
import org.apache.commons.lang.StringUtils;
import org.junit.BeforeClass;
import org.junit.Test;</p>

<p>import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;</p>

<p>import static org.fest.assertions.Assertions.assertThat;</p>

<p>/<em><em>
 * Run CasperJS on any </em>.js or </em>.coffee files found in a specific folder.
 * @author Romain Linsolas
 */
public class RunCasperJSTest {</p>

<pre><code>private static boolean casperFound = false;
private static final String CASPER_JS = "casperjs.bat %s";
private static final String TESTS_DIR = "D:\\dev\\mon-application\\src\\test\\javascript\\casperjs";

@BeforeClass
public static void checkEnvironment() {
    // Vérification que l'on a bien CasperJS installé.
    int res = execute(CASPER_JS, "--version");
    assertThat(res).isNotEqualTo(-1);
    casperFound = true;
}

@Test
public void runJavaScriptTests() {
    File[] files = new File(TESTS_DIR).listFiles(new FilenameFilter() {
        @Override
        public boolean accept(File dir, String name) {
            return StringUtils.endsWithIgnoreCase(name, ".js");
        }
    });
    runTests(files);
}

@Test
public void runCoffeeScriptTests() {
    File[] files = new File(TESTS_DIR).listFiles(new FilenameFilter() {
        @Override
        public boolean accept(File dir, String name) {
            return StringUtils.endsWithIgnoreCase(name, ".coffee");
        }
    });
    runTests(files);
}

private void runTests(File[] files) {
    assertThat(casperFound).isTrue();
    int ok = 0;
    int ko = 0;
    for (File f : files) {
        int res = execute(CASPER_JS, f.getAbsolutePath());
        if (res == 0) { ok++; } else { ko++; }
    }
    System.out.println("Results: " + ok + " test(s) successful, " + ko + " test(s) failed. Total of " + (ok + ko) + " test(s).");
    assertThat(ko).isEqualTo(0);
}


private static int execute(String command, Object... arguments) {
    DefaultExecutor exec = new DefaultExecutor();
    CommandLine line = CommandLine.parse(String.format(command, arguments));
    try {
        return exec.execute(line);
    } catch (IOException e) {
        return -1;
    }
}
</code></pre>

<p>}</p>

<p>```</p>

<hr>


<p><small>Logo Windows<sup>>TM</sup> par <a href="http://www.yootheme.com/">YOOTheme</a>, image de coeur par <a href="http://www.icon-king.com">David Vignoni</a></small></p>
]]></content>
  </entry>
  
</feed>
