<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: conference | fr.romain:blog:3.0]]></title>
  <link href="http://linsolas.github.com/blog/categories/conference/atom.xml" rel="self"/>
  <link href="http://linsolas.github.com/"/>
  <updated>2013-04-01T09:41:28+02:00</updated>
  <id>http://linsolas.github.com/</id>
  <author>
    <name><![CDATA[Romain Linsolas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Devoxx France 2013 - Jour 1]]></title>
    <link href="http://linsolas.github.com/blog/2013/03/27/devoxx-france-2013-jour-1/"/>
    <updated>2013-03-27T09:42:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2013/03/27/devoxx-france-2013-jour-1</id>
    <content type="html"><![CDATA[<p><img src="http://www.devoxx.com/download/attachments/6816022/DevoxxFR-2012-web-400-267.png" alt="Devoxx France" /></p>

<p>Enfin, ça y est ! La deuxième édition de la conférence <a href="http://www.devoxx.com/display/FR13/Accueil">Devoxx France</a> a débuté. Comme l'année dernière, la conférence se déroule sur trois jours. Le mercredi est essentiellement constituée de démonstrations, de laboratoires, de mises en pratique d'un outil ou d'un langage, de <em>Tools in Action</em>.
Ma journée débute donc avec une université sur les tests en JavaScript. L'après-midi contiendra quelques surprises, dont... un minitel :)</p>

<!-- more -->


<h2><a href="http://www.devoxx.com/display/FR13/Le+fantome%2C+le+zombie+et+testacular%2C+panorama+des+outils+de+tests+pour+application+web+moderne.">Le fantôme, le zombie et Testacular, panorama des outils de tests pour application web moderne</a></h2>

<p><img src="/images/devoxxfr-2013-tests-js-1.jpg" alt="Qui fait vraiment des tests ?" /></p>

<p>Photo par <a href="https://twitter.com/binout">@binout</a></p>

<p>Pour commencer la journée et la conférence, <a href="http://www.devoxx.com/display/FR13/Jean-laurent+De+morlhon">Jean-Laurent de Morhlon</a> (<a href="https://twitter.com/morlhon">@morlhon</a>) et <a href="http://www.devoxx.com/display/FR13/Pierre+Gayvallet">Pierre Gayvallet</a> (<a href="https://twitter.com/wayofspark">@wayofspark</a>) nous proposent un tour d'horizon de ce qui se fait autour des tests JavaScript.</p>

<p>Tout d'abord, un rappel des différents types de tests</p>

<ul>
<li>Tests <strong>unitaires</strong> : il s'agit ici de tests techniques. On les exécutera plutôt en isolation, c'est-à-dire côté en supprimant le maximum de choses autour du code : pas de base de données, de navigateur web, d'accès réseau, etc.</li>
<li>Tests d'<strong>intégration</strong> : nous restons dans les techniques techniques, mais ici nous voulons mettre l'ensemble de l'application en test.</li>
<li>Tests d'<strong>acceptance</strong> : ce sont avant tout des tests fonctionnels. Nous pouvons utiliser le <em>BDD</em> (<em>Behavior Driven Development</em>). Toutefois, ces tests doivent représenter une petite partie de l'ensemble des tests.</li>
</ul>


<p>Technique de l'<em>outside-in</em> :</p>

<ul>
<li>On écrit un test d'acceptance qui va échouer.</li>
<li>Ensuite, on écrit un test unitaire qui va également échouer.</li>
<li>Puis on code de façon à faire passer le test simplement.</li>
<li>Une fois le test unitaire réussit, on procède au refactoring.</li>
<li>Une fois que le test unitaire est au vert et que le refactoring est terminé, on peut terminer en faisant en sorte que le test d'acceptance réussisse.</li>
</ul>


<p>Un peu de vocabulaire maintenant : un navigateur <em>headless</em> ("<em>sans tête</em>") est un navigateur sans interface graphique. Cela servira beaucoup pour les tests, la partie graphique étant éliminée, nous gagnons ainsi beaucoup de temps. Quelques exemples : PhantomJS, HtmlUnit, Zombie.js...</p>

<h3>PhantomJS</h3>

<p><img src="/images/phantomjs.png" alt="PhantomJS" /></p>

<p><a href="http://phantomjs.org">PhantomJS</a>, un navigateur <em>headless</em> dispose d'un vrai <em>rendering</em> (pas d'émulation), rapide, et offre une API JavaScript très complète.</p>

<p>Voici un exemple de code avec PhantomJS :</p>

<p>``` javascript
console.log('Loading a web page');
var page = require('webpage').create();
var url = 'http://www.phantomjs.org/';
page.open(url, function (status) {</p>

<pre><code>//Page is loaded!
phantom.exit();
</code></pre>

<p>});
```</p>

<p>L'une des particularité de PhantomJS est son double contexte d'exécution : client et serveur. Cela implique parfois des problèmes de communication entre les deux contextes, ce qui est souvent source d'erreur.</p>

<p>La gestion du <em>rendering</em> de PhantomJS supporte quasiment tous les standards HTML5 et CSS3, avec quelques limites toutefois : pas de support de Flash (ô mon dieu :) ), pas de CSS 3D, de géolocalisation, WebGL, etc.
Son écosystème est assez riche : GhostWriter (qui implémente la spécification WebDriver), des runners de tests (Poltergeist, Mocha, etc.), des frameworks de tests (Lotte, WebSpecter, CasperJS, etc.), mais aussi des outils pour réaliser des screenshots (capturejs, node-webshot...)</p>

<h3>CasperJS</h3>

<p><img src="/images/casperjs.jpg" alt="CasperJS" /></p>

<p><a href="http://casperjs.org/">CasperJS</a> est une surcouche de PhantomJS pour ajouter ce qui manque à ce dernier :</p>

<ul>
<li>Gestion des callbacks, de l'asynchronisme</li>
<li>API fluide (<em>fluent API</em>)</li>
<li>Méthodes d'intéraction avec la page (support du clavier, etc.)</li>
<li>Framework de tests</li>
</ul>


<p>Par exemple, le code suivant :</p>

<p>``` javascript
var page = require('webpage').create();</p>

<p>page.open(url1, function(status) {</p>

<pre><code>if (status == "fail") phantom.exit();
page.open(url2, function(status) {
    if (status == "fail") phantom.exit();
    page.open(url3, function(status) {
        if (status == "fail") phantom.exit();
        page.open(url4, function(status) {
            if (status == "fail") phantom.exit();
            // Can I stop, now?
        });
    });
});
</code></pre>

<p>});
```</p>

<p>s'écrira plus simplement avec CasperJS :</p>

<p>``` javascript
var casper = require('casper').create();</p>

<p>casper.start(url1);
casper.thenOpen(url2);
casper.thenOpen(url3);
casper.thenOpen(url4);</p>

<p>casper.run();
```</p>

<p>Il faut noter qu'avec la version 1.1 de CasperJS (pas encore sortie), l'écriture des tests sera simplifiée, en particulier pour ce qui concerne le code à exécuter avant ou après des tests (<code>setUp</code> et <code>`tearDown</code>).</p>

<p>S'ensuit une démonstration de l'outil CasperJS, pour tester de façon fluide est très simple des interactions sur un site web marchant : tests basiques d'une page (vérification d'un titre, du contenu), simulation de clics pour ajouter des éléments dans le panier, test de la validation d'un formulaire, etc.
Point sympathique, il est possible de demander à CasperJS de réaliser une capture d'écran durant un test et de le copier dans un fichier avec une commande simple : <code>casper.capture("mon_image.png");</code> On peut donc faire du <em>Screenshot Driven Development</em> :)</p>

<h3>Zombie.js</h3>

<p><img src="/images/zombiejs.jpg" alt="ZombieJS" /></p>

<p><a href="http://zombie.labnotes.org/">ZombieJS</a> est un navigateur <em>headless</em>, qui tourne sur node.js, et qui repose sur des bibliothèque d'émulation (c'est un avantage mais aussi un inconvénient). Ce n'est donc pas un <em>vrai</em> navigateur, bien qu'il supporte la plupart des fonctionnalités des navigateurs actuels : HTML5, sélecteurs CSS3, cookier, web storage, ajax, etc. Il se base sur certaines librairies tierces, telles que :</p>

<ul>
<li>JSDom</li>
<li>HTML5</li>
<li>Sizzle.js (sélecteurs CSS)</li>
</ul>


<p>L'API de Zombie.js est fluide, ce qui permet de rendre le code plus lisible (encore plus en utilisant CoffeeScript). Voici un exemple de code avec Zombie.js :</p>

<p>``` javascript
var Browser = require("zombie");
var assert = require("assert");</p>

<p>// Load the page from localhost
browser = new Browser()
browser.visit("http://localhost:3000/", function () {</p>

<p>  // Fill email, password and submit form
  browser.</p>

<pre><code>fill("email", "zombie@underworld.dead").
fill("password", "eat-the-living").
pressButton("Sign Me Up!", function() {

  // Form submitted, new page loaded.
  assert.ok(browser.success);
  assert.equal(browser.text("title"), "Welcome To Brains Depot");

})
</code></pre>

<p>});
```</p>

<p>Un autre exemple de test avec les sélecteurs CSS :</p>

<p><code>javascript
brower.queryAll("#content &gt; .produit").length.should.equal(7);
</code></p>

<p>Avec Zombie, le code devient très lisible, ultra rapide. Toutefois, il a quelques défauts (assez importants pour certains) :</p>

<ul>
<li>Emule un navigateur.</li>
<li>Difficile à intégrer dans un build java.</li>
<li>Difficile à faire tourner sur Windows (aie !).</li>
<li>Le développement est quelque peu en berne (aie aussi !).</li>
<li>Les erreurs sont parfois cryptiques.</li>
</ul>


<p>Jean-Laurent passe ensuite à une démonstration de l'outil avec CoffeeScript.</p>

<h3>QUnit</h3>

<p><img src="/images/qunit.png" alt="QUnit" /></p>

<p><a href="http://qunitjs.com">QUnit</a> est une librairie de tests JavaScript plus proche des JUnit, avec le système des assert. On est ici plutôt à destination des tests unitaires, pour faire du TDD.
L'écosystème de QUnit est assez riche, il est également possible d'ajouter de nouvelles assertions (par défaut, QUnit n'en propose qu'une toute petite poignée) :</p>

<p>``` javascript
// Code du plugin QUnit closeEnough (https://github.com/jquery/qunit/tree/master/addons/close-enough)
QUnit.extend( QUnit.assert, {</p>

<pre><code>/**
 * Checks that the first two arguments are equal, or are numbers close enough to be considered equal
 * based on a specified maximum allowable difference.
 */
close: function(actual, expected, maxDifference, message) {
    var passes = (actual === expected) || Math.abs(actual - expected) &lt;= maxDifference;
    QUnit.push(passes, actual, expected, message);
},

/**
 * Checks that the first two arguments are numbers with differences greater than the specified
 * minimum difference.
 */
notClose: function(actual, expected, minDifference, message) {
    QUnit.push(Math.abs(actual - expected) &gt; minDifference, actual, expected, message);
}
</code></pre>

<p>});
```</p>

<p>L'utilisation de cette nouvelle assertion doit passer par l'objet <em>assert</em> :</p>

<p>``` javascript
test('Example unit test', function(assert) {</p>

<pre><code>assert.close(3.141, Math.PI, 0.001);
assert.notClose(3.1, Math.PI, 0.001);
</code></pre>

<p>}
```</p>

<h3>Sinon.js</h3>

<p><a href="http://sinonjs.org/">Cette librairie</a> de tests a le gros avantage de pouvoir mocker pas mal de choses, dont les timers, des servers, des appels Ajax.
Il dispose également d'une API assez complète pour les espions (<em>spy</em>) ou les <em>stubs</em>.
Un petit exemple :</p>

<p>```javascript
it("calls original function with right this and args", function () {</p>

<pre><code>var callback = sinon.spy();
var proxy = once(callback);
var obj = {};

proxy.call(obj, 1, 2, 3);

assert(callback.calledOn(obj));
assert(callback.calledWith(1, 2, 3));
</code></pre>

<p>});
```</p>

<p>Un autre exemple, en mockant une requête Ajax :</p>

<p>```javascript
after(function () {</p>

<pre><code>// When the test either fails or passes, restore the original
// jQuery ajax function (Sinon.JS also provides tools to help
// test frameworks automate clean-up like this)
jQuery.ajax.restore();
</code></pre>

<p>});</p>

<p>it("makes a GET request for todo items", function () {</p>

<pre><code>sinon.stub(jQuery, "ajax");
getTodos(42, sinon.spy());

assert(jQuery.ajax.calledWithMatch({ url: "/todo/42/items" }));
</code></pre>

<p>});
```</p>

<h3>Karma (aka Testacular)</h3>

<p><a href="http://karma-runner.github.com/0.8/index.html">Karma</a> (anciennement appelé Testacular) est un lanceur de tests multi-navigateurs, tournant sur node.js. Il a été développé par l'équipe d'AngularJS (Google).
Il propose également des adaptateurs pour supporter différents frameworks de tests : Mocha, Jasmine, QUnit ou Angular Scenario.</p>

<h3>Chai.js</h3>

<p><img src="/images/chaijs.png" alt="Chaijs" /></p>

<p><a href="http://chaijs.com/">ChaiJS</a> est une toute petite librairie d'assertions. Elle propose 3 types d'assertions :</p>

<p>Le type <em>Assert</em> :</p>

<p>``` javascript
var assert = chai.assert;</p>

<p>assert.typeOf(foo, 'string');
assert.equal(foo, 'bar');
assert.lengthOf(foo, 3)
assert.property(tea, 'favors');
assert.lengthOf(tea.flavors, 3);
```</p>

<p>Le type <em>Expect</em> :</p>

<p>``` javascript
var expect = chai.expect;</p>

<p>expect(foo).to.be.a('string');
expect(foo).to.equal('bar');
expect(foo).to.have.length(3);
expect(tea).to.have.property('flavors').with.length(3);
```</p>

<p>Ou encore le type du <em>Should</em> :</p>

<p>``` javascript
chai.should();</p>

<p>foo.should.be.a('string');
foo.should.equal('bar');
foo.should.have.length(3);
tea.should.have.property('flavors').with.length(3);
```</p>

<h3>Mocha</h3>

<p><img src="/images/mocha.png" alt="Mocha" /></p>

<p><a href="http://visionmedia.github.com/mocha/">Mocha</a> est un framework de test, tourne sur Node.js ou dans un navigateur.
Il s'intègre parfaitement avec beaucoup d'autres choses : Jenkins, TeamCity, des outils comme chai.js.</p>

<h3>JSCover</h3>

<p><a href="http://tntim96.github.com/JSCover/">JSCover</a> (anciennement JsCoverage) permet de mesurer la couverture de code par les tests JS. Il offre également un export de type Cobertura, ce qui lui permet son intégration dans Jenkins (et a priori Sonar ?).</p>

<h3>Plato</h3>

<p><a href="http://jsoverson.github.com/plato/examples/jquery/">Plato</a> est un outil d'introspection des tests. Il donne ainsi un rapport détaillé du code JS, permet même d'estimer le nombre de bugs dans l'application :)
Il met également en détails les erreurs levées par JsLint.</p>

<p>Voilà une très bonne présentation pour commencer Devoxx France, avec beaucoup de beaux outils à tester. Peut-être même trop, les trois heures ont paru bien courtes :)</p>

<hr/>


<h2><a href="http://www.devoxx.com/display/FR13/Frontend+Live+Coding+++Tour+d%27horizon+de+l%27outillage+et+des+technos+web+d%27aujourd%27hui">Frontend live coding : tour d'horizon de l'outillage et des technos web d'aujourd'hui</a></h2>

<p><a href="http://www.parleys.com/#play/51561f64e4b0c779d78813f3">Vidéo Parleys</a></p>

<p><a href="http://www.devoxx.com/display/FR13/Frederic+Camblor">Frédéric Camblor</a> (<a href="https://twitter.com/fcamblor">@fcamblor</a>) nous propose un tour d'horizon des outils liés au développement web :</p>

<ul>
<li><strong>Yeoman</strong> / <strong>Grunt</strong> : orchestrateur des développements web ;</li>
<li><strong>Sass</strong> / <strong>Compass</strong> : surcouche à CSS permettant notamment de variabiliser les feuilles de style ;</li>
<li><strong>Bower</strong> : provisionneur de librairies JavaScript ;</li>
<li><strong>RequireJS</strong> : injecteur de dépendances JavaScript à la demande ;</li>
<li><strong>Handlebars</strong> : moteur de templating coté client ;</li>
<li><strong>BackboneJS</strong> : framework MVC qui permet d'améliorer la maintenabilité du code JavaScript ;</li>
<li>Un ensemble de tips de développement dans Chrome, dont vous ne soupçonnez peut-être pas l'existence.</li>
</ul>


<h3>Yeoman et Grunt</h3>

<p><img src="/images/yeoman.png" alt="Yeoman" /></p>

<p>Premier outil présenté par Frédéric, <a href="http://yeoman.io/">Yeoman</a>. C'est un ensemble d'outils pouvant jouer le rôle de <em>scaffolder</em>, c'est-à-dire qu'il va nous créer en un rien de temps une structure spécifique pour un projet, tout en forçant certaines bonnes pratiques (définition d'un cycle de vie pour l'application, exécution des tests, etc.). Quelque part, il y a pas mal de similitudes avec Maven ici.</p>

<p>Frédéric démarre par générer une structure adaptée à une <em>webapp</em>, via un générateur dédié. Il existe plusieurs autres générateurs, pour faire de l'Angular, du Testacular (enfin Karma), du Backbone, etc. La similitude avec les Maven archetype est saisissante ici. Donc une simple commande <code>yo webapp</code> permet de tout générer.</p>

<p>Une fois ceci généré, nous pouvons constater la présence d'un fichier <em>gruntfile.js</em> qui est utilisé par <a href="http://gruntjs.com/">Grunt</a> pour réaliser un certain nombre de tâches ("compilation", tests, démarrage d'un serveur, etc.). Frédéric le compare là aussi à Maven ou Gradle. Dans les faits, je trouve plus que cela s'approche de Gradle et de son approche scriptée, mais bon. A en voir le contenu, cela est un peu cryptique dans un premier temps, mais Frédéric nous indique qu'il n'est guère nécessaire de s'y attarder. En effet, ça fonctionne, et c'est tout ce qu'on lui demande ! On pourra bien sûr décider de s'intéresser au contenu de ce fichier, si les besoins au sein du projet le nécessite.</p>

<h3>SASS</h3>

<p><img src="/images/sass-lang.png" alt="SASS" /></p>

<p><a href="http://sass-lang.com/">SASS</a>, à l'image de <a href="http://lesscss.org/">LESS</a> est une surcharge du langage CSS pour en offrir des améliorations. Parmi celles-ci, on notera surtout :</p>

<ul>
<li><code>@import</code> qui permet d'importer un autre fichier CSS, et donc de bien segmenter son code CSS.</li>
<li>La possibilité d'imbriquer les classes (le <em>nesting</em>), offrant ainsi une bien meilleure lisibilité de son code, tout en l'architecturant mieux.</li>
<li>Les variables, pratique pour éviter les redondances, et faciliter le refactoring.</li>
<li>Des fonctions arithmétiques simples (on pourra faire <code>$largeurPanneau + 10px</code> par exemple).</li>
<li>Des mixins, sortes de fonction permettant de regrouper sous un même bloc un code redondant.</li>
</ul>


<p>A noter qu'il existe un site, <a href="http://compass-style.org/">Compass</a> qui permet de disposer de nombreux mixins pour SASS.</p>

<h3>Bower</h3>

<p><a href="https://github.com/twitter/bower">Bower</a> est un module de gestion des dépendances, un peu à l'image de Maven. Le fichier <code>component.json</code>, que Frédéric avait généré via la commande <code>yo webapp</code>, est le descripteur des dépendances de notre projet web-app.
Il est possible d'exécuter quelques commandes avec <code>bower</code> :</p>

<ul>
<li><code>bower install</code> pour installer en local les dépendances définies pour le projet. A noter que contrairement à Maven qui utilise un <em>repository</em> commun à tous les projets, Bower copie localement, <strong>pour chaque projet</strong> la liste des dépendances. Un peu dommage !</li>
<li><code>bower search</code> recherche les dépendances présentes dans le <em>registry</em> Bower.</li>
<li><code>bower info XXX</code>  donne toutes les versions présentes pour la librairie spécifiée.</li>
</ul>


<p>Il est également possible d'enregistrer sa propre librairie dans le <em>registry</em> de Bower, via une commande (<code>bower register [mon package] [mon repo git]</code>). Attention, il ne semble pas y avoir beaucoup de contrôles, et la librairie est de suite visible à tout le monde !</p>

<p>Un point important, le <em>versioning</em> des dépendances hébergées sur Bower est assez strict, et respecte le <a href="http://semver.org/"><em>Semantic Versioning</em></a>. Pour faire simple, une version est généralement constituée de 3 chiffres (<code>x.y.z</code>), où nous avons la version majeure (<code>x</code>), la version mineure  (<code>y</code>) puis les bugfixes  (<code>z</code>). Cela nous permet d'obtenir une certaine flexibilité dans la définition des dépendances. Par exemple, si on définit une version <code>1.2.x</code>, cela signifie que l'on veut n'importe quelle version <code>1.2.*</code>, et que si une nouvelle version bugfixe apparait, alors Bower pourra l'utiliser directement.</p>

<h3>RequireJS</h3>

<p><img src="/images/requirejs.png" alt="Require.js" /></p>

<p>Frédéric parle maintenant de <a href="http://requirejs.org/">Require.js</a>, une librairie qui a l'avantage de pouvoir charger des fichiers JavaScript à la demande. On peut également y définir des dépendances (par exemple il faut la librairie <em>foo.js</em> puis <em>bar.js</em> avant d'exécuter mon code).</p>

<h3>Handlebars</h3>

<p><img src="/images/handlebars.png" alt="Handlebars" /></p>

<p>Il arrive fréquemment d'avoir besoin de recourir au <em>templating</em>, c'est-à-dire de placer de la donnée (généralement en format JSON) dans du code HTML (en particulier quand on doit itérer sur un ensemble d'éléments). Frédéric est parti pour utiliser <a href="http://handlebarsjs.com/">Handlebars</a>. Personnellement, j'ai plus l'habitude d'utiliser <a href="http://mustache.github.com/">Mustache.js</a>, mais les principes sont les mêmes.</p>

<h3>Backbone.js</h3>

<p><img src="/images/backbone.png" alt="Backbone.js" /></p>

<p>Pour de multiples raisons, on peut être amené à développer toute une partie de l'application côté client. Ainsi, au lieu de développer le coeur de l'application côté serveur et de n'envoyer que la partie graphique au client, nous y envoyons un framework JavaScript, ainsi que toute une application côté client : la partie modèle, la partie controlleur et la partie vue se retrouvent dès lors sur le navigateur. Frédéric opte pour <a href="http://backbonejs.org/">Backbone.js</a>, mais il existe aussi <a href="http://emberjs.com/">Ember.js</a>, ou le très à la mode <a href="http://angularjs.org/">Angular.js</a> de Google.
Un tel choix architectural n'est bien sûr pas à prendre à la légère, cela apporte certains avantages (rapidité, minimisation de l'utilisation de la bande passante, possibilité de faire fonctionner son application en mode déconnecté, etc.), mais il y a également des inconvénients, dont le principal à mon avis est la sécurité.</p>

<h3>Rivets.js</h3>

<p>Dernier choix de librairie de la session : <a href="http://rivetsjs.com/">Rivets.js</a> pour réaliser du <em>data-binding</em> bi-directionnel. Cela est nécessaire pour qu'une modification au niveau du modèle soit immédiatement répercutée côté DOM, et qu'une modification côté DOM soit répercutée côté modèle. Cette librairie s'intègre parfaitement à Backbone.js, mais aurait été tout à fait inutile avec Angular, car ce dernier intègre nativement cette fonctionnalité de <em>data-binding</em>.</p>

<p>Pour résumer, cette deuxième université a été très intéressante aussi, car elle a montré une <em>stack</em> complète d'outils et de librairies pour le développement efficace d'une application en JavaScript. Seul bémol, la partie tests qui n'a pas été abordée. Toutefois, Frédéric nous avait prévenu au début qu'il n'était pas à l'aise dans ce domaine. De plus, l'université du matin en avait fait son thème principal, et cela aurait été sans doute redondant. J'aurais quand même apprécié de savoir quelles librairies de tests s'adaptaient le mieux avec la <em>stack</em> choisie par Frédéric.</p>

<hr/>


<h2><a href="http://www.devoxx.com/display/FR13/3615+Cloud+Devoxx">3615 Cloud @ Devoxx</a></h2>

<p><img src="/images/devoxxfr-2013-minitel.jpg" alt="Le minitel, l'avenir de Maven ?" /></p>

<p>Voici une session complètement décalée. <a href="http://www.devoxx.com/display/FR13/Nicolas+Loof">Nicolas Loof</a> et <a href="http://www.devoxx.com/display/FR13/Laurent+Huet">Laurent Huet</a> nous proposent d'intéragir avec une instance CloudBees grâce à... un minitel ! Oui, le minitel des années 80. Et sans trucage, juste du bricolage.
Le montage est le suivant :</p>

<ul>
<li>Un bon vieux minitel sert de console : saisie des commandes et affichage (textuel bien entendu).</li>
<li>Ensuite, un assemblage électronique réalisé par Laurent pour le connecter avec un Raspberry Pi.</li>
<li>Un Raspberry Pi qui va s'occuper de la partie "intelligente" des opérations.</li>
<li>Un MacBook Pro (celui de Nicolas, dont l'écran a rendu l'âme la semaine d'avant, grâce à un geste malheureux d'un enfant) pour la connexion à Internet. C'est aussi le MBP qui affichera la vidéo d'une caméra qui filme l'écran du minitel (eh oui, difficile de brancher un cable de vidéoprojecteur sur un minitel).</li>
</ul>


<p>Durant la présentation, on nous explique le montage électronique, puis ils exécuteront les tâches suivantes :</p>

<ul>
<li>Afficher le status de quelques jobs sur CloudBees, puis interagir avec eux : stopper ou démarrer ces jobs.</li>
<li>Faire un <code>mvn package</code> ! (ils le lanceront en mode <code>offline</code> bien sûr :) ).</li>
<li>Faire un commit avec git.</li>
</ul>


<p>Bref, une session très agréable, bien que tout à fait inutile !</p>

<h2><a href="http://www.devoxx.com/display/FR13/Good+Bad+and+Ugly+Maven+-+a+puzzler+session">Good bad and ugly Maven - a puzzler session</a></h2>

<p><img src="/images/devoxxfr-2013-maven.jpg" alt="In Maven dependencies hell" /></p>

<p><a href="http://www.devoxx.com/display/FR13/Nicolas+Loof">Nicolas Loof</a> (encore lui), accompagné de son éternel ami <a href="http://www.devoxx.com/display/FR13/Arnaud+Heritier">Arnaud Héritier</a> nous ont proposé le jeu "<em>Qui veut gagner des millions</em>" mais à la sauce Maven. Au cours d'une série de 6 ou 7 questions, Nicolas présentait des situations plus ou moins compliquées avec Maven, souvent des problèmes de dépendances transitives avec des conflits de version. Arnaud, en bon candidat, devait donner la bonne réponse, avec parfois l'aide du public.</p>

<p>Dans une ambiance décontractée et sympathique, j'ai donc terminé la première journée de Devoxx, avant de me rendre au repas du soir des speakers.</p>

<h2>Conclusion</h2>

<p>Comme l'année dernière, la première journée a été très riche à Devoxx France. Celle-ci est généralement plus calme, car il y a moins de monde, les sessions sont plus longues, surtout quand on assiste à des universités. J'ai fait un choix très orienté sur JavaScript cette année, avec 6 heures de démo, de code et de tests. A vrai dire, le programme que j'avais initialement établi le matin était différent. Je comptais en effet aller d'abord suivre <a href="http://www.devoxx.com/display/FR13/Introduction+iOS6+pour+les+developpeurs+Java">l'introduction à iOS pour un développeur Java</a> puis le <a href="http://www.devoxx.com/display/FR13/AngularJS%2C+ou+le+futur+du+developpement+Web">développement sur AngularJS</a>, mais à ma grande déception il s'agissait d'universités et non de <em>Labs</em> (ou <em>Hands On</em>). Ne codant pas moi-même, je craignais de ne pas retenir grand chose pour iOS (je n'ai aucune connaissance dans ce langage), et je n'aurais sans doute pas appris grand chose de nouveau sur Angular.js, que j'ai déjà un peu manipulé.</p>

<p>Mon souhait pour Devoxx France 2014, ce serait que la conférence se déroule sur 4 jours :</p>

<ul>
<li>2 jours de Labs, <em>Hands On</em> et universités, mais avec une préférence pour les sessions on l'audience code;</li>
<li>2 jours de conférences.</li>
</ul>


<p>Sait-on jamais :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Du JavaScript propre ? Challenge Accepted]]></title>
    <link href="http://linsolas.github.com/blog/2013/03/21/du-javascript-propre-challenge-accepted/"/>
    <updated>2013-03-21T23:17:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2013/03/21/du-javascript-propre-challenge-accepted</id>
    <content type="html"><![CDATA[<p><img src="http://linsolas.github.com/images/affiche-conference.jpg" alt="Du JavaScript propre ? Challenge Accepted!"/></p>

<p>L'édition 2013 de <a href="http://www.devoxx.com/display/FR13/Accueil">Devoxx France</a> arrive à grands pas, le 27 mars c'est presque demain !
A nouveau, j'aurais la chance d'être speaker, cette fois-ci pour présenter, conjointement avec <a href="http://www.devoxx.com/display/FR13/Julien+Jakubowski">Julien Jakubowski</a>, <a href="http://www.devoxx.com/display/FR13/Du+Javascript+propre+++Challenge+Accepted"><em>Du JavaScript propre ? Challenge Accepted!</em></a></p>

<p>Le JavaScript est partout, et pour peu que vous souhaitiez faire un peu de web, il est incontournable. Mais fini le JavaScript de papy, celui que vous écriviez en 2003 pour bidouiller votre page web. On est aujourd'hui sur quelque chose de sérieux. Il est donc hors de question de continuer à bidouiller, et il faut savoir chouchouter son code JavaScript.</p>

<p>Nous aborderons dans un premier temps les principaux travers du développement en JavaScript, avec quelques petites surprises, puis nous rentrerons dans le vif du sujet : les astuces, les bonnes pratiques et les bons outils pour écrire du code JavaScript <strong>proprement</strong>. Au bout d'une heure, vous ne devriez plus avoir peur de vous lancer dans l'écriture de 100,000 lignes de code JavaScript !</p>

<p>Si vous êtes curieux des solutions que l'on va vous proposer, venez à la Seine B, vendredi matin à 10h40.</p>

<p>Rendez-vous à Devoxx !</p>

<p><strong>EDIT</strong> En attendant la vidéo sur le site de <a href="http://www.parleys.com">Parleys</a>, voici <a href="http://fr.slideshare.net/linsolas/java-script-devoxxfrance2013">les slides sur SlideShare</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conférencier à Devoxx France 2013]]></title>
    <link href="http://linsolas.github.com/blog/2013/02/21/conferencier-a-devoxx-france-2013/"/>
    <updated>2013-02-21T00:08:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2013/02/21/conferencier-a-devoxx-france-2013</id>
    <content type="html"><![CDATA[<p><img src="http://www.devoxx.com/download/attachments/6816022/DevoxxFR-2012-web-400-267.png"/></p>

<p><em>tl;dr</em> Je serais à nouveau présentateur pour la conférence Devoxx France 2013, et ça fait mon bonheur, surtout qu'il s'agit d'une conférence (oui, je fais une conférence dans une conférence, normal quoi) !</p>

<!-- more -->


<p>La conférence <a href="http://www.devoxx.com">Devoxx</a> est arrivée assez tard dans ma vie professionnelle. J'en avais entendu parler il y a environ 4 ou 5 ans, et j'avais eu envie d'y assister à plusieurs reprises, en vain.
Quand fin 2011 le comité Devoxx annonça qu'à partir de 2012 la conférence aurait sa <em>petite</em> soeur <strong>Devoxx France</strong>, il devenait hors de question pour moi de ne pas y assister. Et pour n'avoir aucun regrêt, j'avais même proposé deux sujets (un <em>Tools In Action</em> ainsi qu'un <em>Quickie</em>) au <em>CFP</em> (<em>Call for Papers</em>, ou en français <em>Appel à Orateur</em> ?). A ma grande surprise, les deux sujets ont été acceptés, et je me suis ainsi retrouvé à présenter ceci :</p>

<ul>
<li><a href="http://www.devoxx.com/display/FR12/Chouchoutez+votre+code+JavaScript">Chouchoutez votre code JavaScript</a>, où je montrais qu'industrialiser son développement JavaScript est aussi facile qu'en Java, et pour ne rien gâcher, avec les mêmes outils : Maven, Jenkins, Sonar.</li>
<li><a href="http://www.devoxx.com/display/FR12/TestNG%2C+parce+que+vos+tests+le+valent+bien">TestNG, parce que vos tests le valent bien</a>, un petit <em>Quickie</em> pour montrer les atouts de TestNG par rapport à JUnit.</li>
</ul>


<p>Ca a été un grand moment, et quand est venu le <em>CFP</em> pour Devoxx World (la conférence originelle, tenue à Anvers), je me suis dit que j'allais également y proposer des sujets. Au final, mon <em>Quickie</em> <a href="http://www.devoxx.com/display/DV12/Easy+Entity+Auditing+with+Hibernate+Envers">Easy Entity Auditing With Hibernate Envers</a> a été retenu. Parler en anglais n'est pas forcément chose aisée, et le format <em>Quickie</em> - 15 minutes - s'adaptait à merveille !</p>

<p>Et voilà que vient l'année 2013. Et donc les Devoxx. Cette année, en plus de Paris et Anvers, Londres s'est jointe à la fête. Mais pas question pour moi d'assister à DevoxxUK, Devoxx France restant la priorité (surtout que les deux conférences se chevauchent dans le calendrier).
Vu l'excitation que m'avait procuré mes présentations lors des Devoxx 2012, je voulais absolument y retourner comme orateur. Par manque de temps et d'inspiration, je n'ai finalement proposé qu'un seul sujet, une conférence (format de 50 minutes). Pari risqué, car c'est le <em>slot</em> le plus demandé. Il me semble qu'il y a eu environ 310 propositions pour une trentaine de places. Près de 90% seront donc refusées. Par chance, la mienne fut retenue, tout comme celle de <a href="http://julien.jakubowski.fr/">Julien Jakubowski</a> (architecte <a href="http://www.octo.com">OCTO</a> et fondateur du <a href="http://chtijug.org/">Chti'JUG</a>), <a href="http://www.devoxx.com/display/FR13/Du+Javascript+propre+++Challenge+Accepted+%21"><em>Du JavaScript propre ? Challenge Accepted</em></a>.
Etant donné la ressemblance de nos deux présentations, il a été décidé que nous présenterions tous les deux une conférence commune. C'est donc chose faite (enfin, on y travaille quoi).</p>

<p>Je ne vais pas dévoiler le contenu de la présentation, mais il s'agira de lister les principaux travers lorsque l'on développe en JavaScript, et surtout de montrer les moyens de code proprement.</p>

<p><em>Stay tuned</em>, et je l'espère que l'on se verra à la conférence Devoxx !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[brownbaglunch.fr]]></title>
    <link href="http://linsolas.github.com/blog/2013/02/20/brownbaglunch-dot-fr/"/>
    <updated>2013-02-20T23:12:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2013/02/20/brownbaglunch-dot-fr</id>
    <content type="html"><![CDATA[<p>Récemment, je vous ai dit qu'il fallait <a href="http://linsolas.github.com/blog/2013/02/09/lancez-vous-dans-les-brown-bag-lunches/">vous lancer dans les Brown Bag Lunch</a>. Je suis sûr que depuis, vous avez envie de vous y mettre, comme participant, ou pourquoi pas comme orateur !</p>

<p>Hé bien voilà un beau site tout neuf fait spécialement pour vous aider dans la démarche : <a href="http://www.brownbaglunch.fr/">http://www.brownbaglunch.fr/</a>.</p>

<p>Vous trouverez sur ce site la liste des <em>baggers</em> (présentateurs) français, avec leurs propositions de sessions, ainsi que des sites permettant d'accueillir des BBL.
Si vous souhaitez enrichir ce site, allez jeter un coup d'oeil à la <a href="https://github.com/nrichand/BrownBagLunch">page GitHub du site</a>.</p>

<p>Enfin, n'hésitez absolument pas à suivre le petit piou-piou <a href="https://twitter.com/bbl_fr">@bbl_fr</a> !</p>

<p>Allez, on s'appelle et on se fait <del>une bouffe</del> un BBL !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lancez-vous dans les Brown Bag Lunches]]></title>
    <link href="http://linsolas.github.com/blog/2013/02/09/lancez-vous-dans-les-brown-bag-lunches/"/>
    <updated>2013-02-09T23:00:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2013/02/09/lancez-vous-dans-les-brown-bag-lunches</id>
    <content type="html"><![CDATA[<p><img src="http://linsolas.github.com/images/Brown-Bag.png" alt="Brown Bag lunch"/></p>

<h2>Kezako ?</h2>

<p>Un <em>Brown Bag Lunch</em> c'est une présentation technique à l'heure du déjeuner. Le <em>brown bag</em> fait en effet référence à ce sac en carton marron que l'on utilise pour transporter son déjeuner sur son lieu de travail. L'idée est donc simple : une personne vient faire une présentation, pendant que l'assistance l'écoute en dégustant un bon sandwich (ça marche aussi avec une salade, d'ailleurs). On joint ainsi l'utile à l'agréable.</p>

<p><a href="https://twitter.com/dgageot">David Gageot</a>, en redevenant consultant indépendant, a décidé de se <a href="http://blog.javabien.net/2012/11/05/bbl/">lancer dans les BBL</a> au mois de janvier 2013. Profitant de l'occasion, je l'ai fait venir à la SGCIB, où il nous a proposé sa fameuse présentation "<em>Du Legacy au Cloud en moins d'une heure</em>".</p>

<!-- more -->


<p><img src="http://linsolas.github.com/images/bbl-gageot.jpg" alt="David Gageot durant son BBL"/>
<em>David Gageot nous explique comment tester du code legacy</em></p>

<p>Le premier BBL organisé à la SGCIB aura finalement été celui d'un autre <a href="https://twitter.com/dadoonet">David, Pilato</a> venu faire une présentation d'<a href="http://www.elasticsearch.org">Elastic Search</a>, un moteur de recherche très puissant et extrêmement simple d'emploi.</p>

<p><img src="http://linsolas.github.com/images/bbl-pilato.jpg" alt="David Pilato durant son BBL"/>
<em>David Pilato nous montre son Elastic</em></p>

<p>Le 3e BBL devrait être celui de <a href="https://twitter.com/fsarradin">François Sarradin</a> pour nous montrer qu'en une heure, on peut développer un framework web en Scala (et, par la même occasion, chauffer la salle ;o) ).</p>

<p>A chaque fois, le public a apprécié la qualité des présentations, et de mon côté en tant qu'organisateur, j'apprécie de voir leur enthousiasme. Leur nombre ne cesse d'ailleurs de croitre, passant de 20 à 25, et peut-être même d'avantage pour les prochaines sessions.</p>

<h2>Et pourquoi ne pas proposer un BBL ?</h2>

<p>Que faut-il pour proposer un BBL ? Simplement un sujet, un peu sexy cela va sans dire. Proposer un sujet sur la maitrise des EJB 1.0, ce n'est guère attirant. Après, il faut trouver un endroit pour présenter. Moi, je peux vous proposer de venir à la SGCIB, il suffit de me contacter pour cela, après je m'occupe de l'organisation, de trouver une date ainsi que l'audience.
Pourquoi faire proposer un BBL ? En tant qu'orateur, cela a plusieurs avantages :</p>

<ul>
<li>Tout d'abord, cela vous permet de vous entrainer à parler en public face à un comité "relativement" restreint.</li>
<li>Ensuite, cela vous permet de rôder votre présentation, pour la perfectionner.</li>
<li>Cela vous fait également de la publicité, et permet de vous faire connaitre par d'autres personnes.</li>
<li>Enfin, parce que c'est fun et qu'un bon informaticien aime faire partager sa passion !</li>
</ul>


<p>Un BBL est aussi une occasion parfaite pour répéter une présentation avant de la présenter dans une conférence telle que <a href="http://www.devoxx.fr">Devoxx France</a>, <a href="http://www.mix-it.fr/">Mix-IT</a>, ou n'importe quel JUG en France (et <a href="http://www.touilleur-express.fr/2011/04/19/plus-de-17-java-user-group-en-france-debut-2011/">ils sont nombreux</a>).</p>

<p>Bref, lancez-vous dans l'aventure !</p>

<p>Et à défaut de sujet à proposer, pourquoi ne pas héberger vous-même un BBL ? Pour cela, il suffit d'avoir des locaux (si possible faciles d'accès, pour faciliter la venue des intervenants), d'avoir un public - il n'est pas nécessaire de faire des BBL avec 30 personnes, une demi douzaine peut déjà suffire - et de contacter les bonnes personnes. Twitter est sans doute une excellente porte d'entrée pour ça.</p>

<p>Icone par <a href="http://pica-ae.deviantart.com/">pica-ae</a></p>
]]></content>
  </entry>
  
</feed>
