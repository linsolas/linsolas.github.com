<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: conference | fr.romain:blog:3.0]]></title>
  <link href="http://linsolas.github.com/blog/categories/conference/atom.xml" rel="self"/>
  <link href="http://linsolas.github.com/"/>
  <updated>2013-04-09T23:42:07+02:00</updated>
  <id>http://linsolas.github.com/</id>
  <author>
    <name><![CDATA[Romain Linsolas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Devoxx France 2013 - Du JavaScript propre ? Challenge Accepted]]></title>
    <link href="http://linsolas.github.com/blog/2013/04/03/devoxx-france-2013-du-javascript-propre-challenge-accepted/"/>
    <updated>2013-04-03T08:59:00+02:00</updated>
    <id>http://linsolas.github.com/blog/2013/04/03/devoxx-france-2013-du-javascript-propre-challenge-accepted</id>
    <content type="html"><![CDATA[<p><img src="/images/affiche-conference.jpg" title="Du JavaScript propre ? Challenge Accepted!" alt="Du JavaScript propre ? Challenge Accepted!" /></p>

<p>Dernier billet sur la conférence Devoxx France 2013 (ouf !). Je vais parler de notre session, <a href="http://www.devoxx.com/display/FR13/Du+Javascript+propre+++Challenge+Accepted">Du JavaScript propre ? Challenge Accepted!</a>, présentée avec <a href="http://www.devoxx.com/display/FR13/Julien+Jakubowski">Julien Jakubowski</a> d'<a href="http://www.octo.com">OCTO</a>.</p>

<!-- more -->


<p>Alors pour la petite histoire, il faut savoir que Julien et moi ne nous connaissions pas personnellement un mois et demi avant Devoxx ! Nous avions tous les deux proposé une conférence durant le CFP (<em>Call For Paper</em>) très similaire.
De son côté, Julien avait proposé une version améliorée de sa présentation <a href="http://fr.slideshare.net/jak78/javascript-ce-nest-pas-si-sale">Le JavaScript ce n'est pas si sale</a> qu'il avait faite au <a href="http://chtijug.org/">Ch'ti JUG</a> dont il est le fondateur.
De mon côté, j'avais proposé à peu près la même chose, mais dont le but était plutôt de faire un état des lieux de l'écosystème autour de JavaScript en 2013, et montrer que celui-ci est extrêmement riche, presque à l'image de celui du monde Java.
Le comité de direction, ne sachant qui choisir, nous a demandé s'il était possible de mixer nos présentations. Ce qui fut fait. On est donc parti de la présentation de Julien, puis on l'a améliorée, suite à nos nombreuses discussions. Je pense également que le fait de la présenter à deux la rend plus vivante, plus intéressante.</p>

<p><img src="/images/devoxxfr-2013-salle-vide.jpg" title="Le calme avant la tempête" alt="Le calme avant la tempête" /></p>

<h2>Le contenu</h2>

<p>La session se divise en deux parties :</p>

<ul>
<li>Les problèmes courants en JavaScript.</li>
<li>Les solutions que l'on propose pour coder proprement en JavaScript.</li>
</ul>


<h3>Les problèmes</h3>

<p>Tout d'abord, nous expliquons pourquoi nous faisons cette présentation. Le constat est double :</p>

<ul>
<li>JavaScript est partout, et les sites sont de plus en plus riches en partie grâce à lui. On ne peut donc pas l'ignorer, surtout avec l'avénement du HTML5.</li>
<li>JavaScript a une mauvaise réputation. Le langage est sale, plus adapté à la bidouille sur sa page HTML que pour faire de <em>vraies</em> applications, difficulté de trouver un bon environnement de travail.</li>
</ul>


<p>Bref, il y a du boulot pour redorer le blason de JavaScript. Après une petite partie ludique, où l'on montre quelques résultats <em>étonnants</em> de JavaScript (je vous conseille fortement de regarder <a href="https://www.destroyallsoftware.com/talks/wat">cette vidéo</a>), on passe aux vrais problèmes que l'on est susceptible de rencontrer dans ses projets :</p>

<ul>
<li><strong>Pollution de l'espace de nommage</strong>. Quand on définit des fonctions dans les fichiers JavaScript sans prendre garde, il se peut qu'il y ait des collisions entre plusieurs fonctions ayant le même nom. Par exemple, si l'on définit une méthode <code>checkForm()</code> dans un fichier JS, rien ne dit que nous n'aurons pas une méthode au même nom dans un autre fichier. Dans pareille situation, JS ne considère que la dernière méthode définie, et cela peut poser des problèmes.</li>
<li><strong>Le scope global par défaut</strong>. Par défaut, les variables ont un scope global, et cela peut aussi entrainer des problèmes. Dans le code suivant, la variable <code>i</code> sera la même dans les 2 boucles, ce qui fait que nous n'applerons le <em>logger</em> que 10 fois et non 100 fois comme attendu :</li>
</ul>


<p>``` javascript
function subLoop() {</p>

<pre><code>for (i = 0; i &lt; 10; i++) {
    console.log(i);
}
</code></pre>

<p>}</p>

<p>for (var i = 0; i &lt; 10; i++) {</p>

<pre><code>subLoop();
</code></pre>

<p>}
<code>
* **Tout est public par défaut**. Difficile de cacher certains détails de son implémentation, le mot clé</code>private``` n'existant pas en JS. Dans le code suivant, la variable censée être privée ne l'est pas du tout :</p>

<p>``` javascript
var counter = {</p>

<pre><code>privateValue: 0,
increment: function() {
    counter.privateValue++;
    return counter.privateValue;
}
</code></pre>

<p>}</p>

<p>counter.increment(); // 1
counter.privateValue = 0; // Aie
counter.increment(); // 1</p>

<p>```
* <strong>Code non testé</strong>. Tout est dit :)</p>

<p>Assez parlé des problèmes, voyons les solutions !</p>

<h3>Les solutions</h3>

<p>Première idée : on pourrait simplement déléguer le code JavaScript à son framework préféré (GWT, JSF, etc.) Nous ne souhaitons pas aller dans cette direction. Faisons du JavaScript ! Autre idée, pour au moins limiter les dégâts : utiliser <a href="https://code.google.com/p/dart/">Google Dart</a> ou <a href="http://coffeescript.org/">CoffeeScript</a> qui permettent une écriture plus fluide, plus sécurisée du code JavaScript.</p>

<p>D'un point de vue architectural, donc assez haut niveau, il existe aujourd'hui une tendance à ne pas négliger : les architectures MVC/MVW/MV* <strong>côté client</strong>. Autrement dit, plutôt que d'avoir un serveur qui va s'occuper de toute la partie fonctionnelle (couches modèle, contrôleur et vue), on va déporter tout ou partie de ceci côté client. Pour se faire, on se fera aider de solutions telles que <a href="http://backbonejs.org/">Backbone.js</a>, <a href="http://emberjs.com/">Ember</a> ou le très à la mode <a href="http://angularjs.org/">AngularJS</a>. Ce type d'architecture offre d'autres avantages : comme le code est exécuté côté client, le temps de réponse est instantané, on transfère beaucoup moins d'informations entre le client et le serveur (ce qui privilégie les réseaux mobiles), et offre plus facilement un mode déconnecté à son application. Mais ce n'est pas magique, il faudra faire attention à d'autres points, en particulier l'aspect sécurité (bah oui, tout le code est sur le client, donc il lui est plus facile de le comprendre et de le contourner).</p>

<p><img src="/images/devoxxfr-2013-architecture-mvc.png" title="Et si on déplaçait le code métier du côté client ?" alt="Et si on déplaçait le code métier du côté client ?" /></p>

<p>On a cité, parmi les problèmes, le fait que tout est public par défaut. Pour le résoudre, on propose d'opter pour la modularité. Cela revient un peu à simuler une classe en Java (attention, ce n'est pas exactement ça, c'est juste pour faire comprendre l'idée), en n'exposant à l'extérieur que ce que l'on souhaite (une sorte d'interface). Le code de notre compteur devient au final quelque chose comme ça :</p>

<p>``` javascript
// Notre counter sera notre objet utilisé par la suite.
var counter = (function() {</p>

<pre><code>var privateValue = 0;
var publicMethod = function() {
    privateValue++;
    return privateValue;
};
// On retourne un objet qui contient une méthode "increment", seul élément qui sera visible de l'extérieur.
return {
    increment: publicMethod
};
</code></pre>

<p>})();</p>

<p>// On passe à l'utilisation du compteur :
counter.increment();  // 1
counter.privateValue; // undefined
counter.privateValue = 0; // Cela ne pose pas de problème. JS va ajouter une propriété "privateValue" à l'objet "counter", mais elle sera différente du "privateValue" que nous utilisons dans notre implémentation. Pas de conflit du coup !
counter.increment();  // 2
```</p>

<p>Pour accroitre encore la lisibilité et la propreté de son code, on pourra créer des sortes de packages pour nos modules :</p>

<p>``` javascript
var myapp = {</p>

<pre><code>subpackage: {

    counter: (function() {
        // ...
    })()

}
</code></pre>

<p>}</p>

<p>// Et son utilisation :
myapp.subpackage.counter.increment(); // 1
```</p>

<p>On aborde ensuite la question du chargement des librairies JS. Plutôt que d'avoir 15 fichiers JS chargés au chargement de la page (chargement séquentiel, qui plus est, ce qui ralentit d'autant le chargement), on va utiliser les principes de l'AMD (<em>Asynchronous Modules Definition</em>), par exemple grâce à la librairie <a href="http://requirejs.org/">require.js</a>. Cela apporte en particulier deux avantages :</p>

<ul>
<li>Chargement <strong>asynchrone</strong> et/ou en <strong>parallèle</strong>, et donc cela ne bloque pas le chargement des pages, qui se fait normalement de façon séquentielle.</li>
<li>Chargement à la <strong>demande</strong>. Certaines fonctionnalités de la page peuvent ne pas être utilisées. Alors autant ne pas charger les ressources liées. On pourra ainsi dire "quand l'utilisateur souhaite faire ceci, alors on chargera <em>à ce moment-là</em> les librairies X et Y".</li>
<li>Définition des <strong>dépendances</strong>. Un peu comme dans le point précédent, on pourra indiquer que la librairie X dépend de Y, et donc on chargera Y avant X.</li>
</ul>


<p>Intéressons-nous au code en lui-même maintenant. Il existe des outils pour s'assurer que nous n'écrivons pas (trop) de bêtises dans notre code JavaScript, un peu comme le fait Checkstyle ou PMD en Java. Nous avons ainsi <a href="http://www.jslint.com/">JsLint</a> ou <a href="http://www.jshint.com/">JsHint</a> pour remplir cette tâche. On tâchera aussi d'écrire un code plus expressif, c'est-à-dire plus simple, plus lisible, plus concis. J'aime l'expression qui dit <em>qu'il faut écrire le code comme si la personne qui va le maintenir est un psychopathe qui connait mon adresse</em>, ça traduit bien l'intérêt d'écrire correctement son code.</p>

<p>Un vieux code tel que celui-ci :</p>

<p>``` javascript
function checkForm() {</p>

<pre><code>var beerName = document.getElementById("beer_name").value;
if (beerName === '') {
    document.getElementById("beer_name").className += "invalid";
    document.getElementById("error_box").style.display = "block";
    return false;
}
return true;
</code></pre>

<p>}
```</p>

<p>pourra être <em>refactoré</em> avec <a href="http://jquery.com/">jQuery</a> de cette façon, rendant le code plus lisible, plus facile à maintenir :</p>

<p>``` javascript
$('#beerForm').submit(function() {</p>

<pre><code>if ($('#beer_name').val() === "") {
    $('#beer_name').addClass('invalid');
    $('#error_box').show();
    return false;
}
return true;
</code></pre>

<p>});
```</p>

<p>Autre chose pour simplifier l'écriture : utiliser des moteurs de <em>templating</em>, tels que <a href="http://mustache.github.com/">Mustache.js</a> ou <a href="http://handlebarsjs.com/">Handlebars.js</a>, qui permettent d'insérer des données dans du HTML de façon fluide. Ainsi, si <code>beers</code> est un tableau de bières (au format JSON), on pourra écrire ceci :</p>

<p>
```</p>

<ul id="beers-list">
    {{#beers}}
        <li>{{name}} - {{color}} - {{alcohol}}%</li>
    {{/beers}}
</ul>


<script type="text/javascript">
    var template = $('#beers-list');
    // Appel du moteur de rendu de Mustache
    template.html( Mustache.render(template.html(), data) );
</script>


<p>```
</p>

<p>Autre sujet important, les tests. Nous n'allons pas dans le détail, mais nous expliquons qu'il existe de nombreux outils pour cela : Jasmine, QUnit, Mocha, CapserJS, PhantomJS, Karma, etc. Je vous renvoie à l'<a href="http://linsolas.github.com/blog/2013/03/27/devoxx-france-2013-jour-1/">université de Jean-Laurent de Morlhon et Pierre Gayvallet à ce sujet</a>.</p>

<p>Le message est clair : tous les outils sont là pour faire des tests, du TDD, du BDD, des tests d'intégration, etc. Bref, on n'a plus d'excuses !</p>

<p><img src="/images/devoxxfr-2013-batmanrobin.png" title="Faites des tests en JavaScript" alt="Faites des tests en JavaScript" /></p>

<p>Dernier point abordé : l'automatisation. On peut facilement intégrer son application JavaScript dans un serveur d'intégration continue comme Jenkins ou un outil d'analyse qualité tel que Sonar. Je vous renvoie <a href="http://www.parleys.com/#play/5148922a0364bc17fc56c7cf">à mon Tools In Action de l'année dernière pour voir tout ça en pratique</a>.
Niveau IDE, nous recommandons <a href="http://www.jetbrains.com/idea/">IntelliJ IDEA de JetBrains</a> (ou <a href="http://www.jetbrains.com/webstorm/">WebStorm</a>) qui offre un <em>vrai</em> support des langages web comme le JavaScript, le HTML ou le CSS.</p>

<h3>La présentation à Devoxx France</h3>

<p>Voilà un retour personnel sur la présentation elle-même. Déjà, on était très content avec Julien, car la salle était pleine, ce qui fait 300 personnes à nous écouter (sans compter les millions qui nous verront sur Parleys). Si si, j'avais compté les chaises pendant que la salle était vide ! :o)</p>

<p><img src="/images/devoxxfr-2013-salle-1.jpg" title="Y a du monde à gauche..." alt="Y a du monde à gauche" />
<img src="/images/devoxxfr-2013-salle-2.jpg" title="... et aussi à droite !" alt="... et aussi à droite !" /></p>

<p>On a plutôt bien géré notre temps, on a fini un peu en avance même - environ 8 minutes avant - ce qui nous a permis de prendre près d'une dizaine de questions. Les retours que j'ai eu en direct ou sur le Net semblent montrer que la présentation a été appréciée, et c'est ce qui nous rend encore plus heureux (<a href="http://blog.soat.fr/2013/04/devoxx-fr-2013-du-javascript-propre-challenge-accepted/">un exemple ici</a>).</p>

<p>Une chose toutefois, que l'on fera peut-être si notre présentation est prise sur une autre conférence. Il semblerait, d'après les questions, que certaines personnes s'attendaient à avoir un peu la <em>stack</em> idéale pour développer en JavaScript. Tout d'abord, elle n'existe pas. Choisir un framework JavaScript va dépendre de vos besoins, mais aussi de votre maitrise du langage, et du risque que vous acceptez de courrir par rapport à la pérénnité de tel ou tel outil.
Je ne conseillerais pas AngularJS ou Backbone.js sans connaitre le contexte. Partir sur une application exécutée côté clent, cela a un impact à plus ou moins long terme, et faire ce choix n'est pas anodin.</p>

<p>L'un des points sur lequel il faut faire attention, c'est l'intégration des outils entre eux. Il n'est pas toujours évident de faire fonctionner X avec Y. Aussi, peut-être proposerons-nous dans une version améliorée de la présentation deux ou trois <em>stacks</em> qui fonctionnent bien ensemble.</p>

<h3>Références</h3>

<ul>
<li>Les slides sur Slideshare <a href="http://fr.slideshare.net/linsolas/java-script-devoxxfrance2013">ici</a> ou <a href="http://fr.slideshare.net/jak78/java-script-devoxxfrance2013ppt">là</a>.</li>
<li>Les slides et bientôt la vidéo sur <a href="http://www.parleys.com/#play/515aac03e4b0c779d7881496">Parleys</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devoxx France 2013 - Bilan]]></title>
    <link href="http://linsolas.github.com/blog/2013/04/02/devoxx-france-2013-bilan/"/>
    <updated>2013-04-02T23:23:00+02:00</updated>
    <id>http://linsolas.github.com/blog/2013/04/02/devoxx-france-2013-bilan</id>
    <content type="html"><![CDATA[<p><img src="http://www.devoxx.com/download/attachments/6816022/DevoxxFR-2012-web-400-267.png" title="Devoxx France 2013" alt="Devoxx France" /></p>

<p>L'édition française de Devoxx 2013 s'est donc achevée la semaine dernière. A nouveau, un énorme <strong>BRAVO</strong> à toute l'équipe organisatrice, aux sponsors, aux speakers, aux participants. C'était magique. Devoxx, c'est un peu le Disneyland du développeur geek. On y voit des "stars" (pas dans le mauvais sens du terme) et on s'amuse énormément.</p>

<p>Allez, un petit bilan personnel :</p>

<h3>Les plus</h3>

<ul>
<li>Les gens.</li>
<li>L'organisation, toujours au poil.</li>
<li>L'équipe des organisateurs, toujours gentils et disponibles.</li>
<li>Les rencontres, surtout voir en vrai des personnes que l'on ne connait que <em>via</em> Twitter.</li>
<li>Les présentations de qualité, plutôt variées et nombreuses.</li>
<li>Les gens.</li>
<li>Certains goodies. Personnellement, j'en ai un peu marre des t-shirts (sauf celui d'Atlassian qui est au top, et que je portais durant ma présentation) et des mugs. Certains sponsors innovent plus que d'autres en la matière : boite à Meuh d'OCTO, décapsuleurs, gants, etc.</li>
<li>Les concours, bien que je n'ai rien gagné !</li>
<li>Le site de Parleys qui diffuse toutes les sessions que l'on a dû rater parce que parfois c'était dur de choisir, ou que l'on discutait avec des personnes. En plus, le site a été refait en HTML 5 !</li>
<li>Le diner des speakers.</li>
<li>La soirée "<em>Meet &amp; greet</em>".</li>
<li>Les gens.</li>
</ul>


<h3>Les moins</h3>

<ul>
<li>Pas assez de <em>Hands On</em> le mercredi. Comme je l'ai dit, j'aimerais beaucoup que Devoxx France 2014 se déroule en quatre jours : 2 jours d'universités et Labs avec une attention particulière pour les sessions où l'auditoire code vraiment, et 2 jours de conférences.</li>
<li>Le Marriott devient trop petit. L'année passée, avec un peu plus de 1200 personnes, on se sentait à l'étroit. Cette année, avec 1400 et quelques participants, c'était encore plus vrai. De nombreuses personnes se sont faites recaler à l'entrée des salles de conférences pleines pour des raisons de sécurité. Cela se comprend, mais c'est rageant. Le problème est de trouver un lieu ayant une capacité d'accueil d'au moins 1500 personnes à Paris pour un budget raisonnable. Difficile à mon avis !</li>
<li>La nourriture le midi. Sans être mauvaise, ce n'était quand même pas ça, et ça manquait un peu de variété. En plus, sauf erreur de ma part, il n'y avait pas de desserts le midi. A noter que cette année, contrairement à 2012, les boissons étaient toujours à disposition et ça c'est bien (petit bémol : pas de Coca light, que du Coca "normal" :o) ).</li>
<li>Toujours pas de NAO à gagner :)</li>
<li>Faute de place, les BOF sont toujours un peu tard le soir (certains finissent à 22h). Guère pratique quand on a déjà 2 jours de Devoxx dans les pates !</li>
</ul>


<p>Voilà, hormis le problème du lieu qui devient trop petit, rien de méchant. Devoxx confirme qu'il s'agit d'une superbe conférence, et encore une fois, j'étais très fier d'y assister, surtout en tant que speaker ! A l'année prochaine (et en fin d'année pour la version World à Anvers) !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devoxx France 2013 - Jour 3]]></title>
    <link href="http://linsolas.github.com/blog/2013/03/29/devoxx-france-2013-jour-3/"/>
    <updated>2013-03-29T09:17:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2013/03/29/devoxx-france-2013-jour-3</id>
    <content type="html"><![CDATA[<p><img src="http://www.devoxx.com/download/attachments/6816022/DevoxxFR-2012-web-400-267.png" title="Devoxx France 2013" alt="Devoxx France" /></p>

<p>Aie, déjà le dernier jour de la conférence Devoxx France. Que le temps passe vite ! Cette dernière journée reste toutefois très intense, en particulier parce qu'à 10h40, c'était ma présentation "<em>Du JavaScript propre ? Challenge Accepted!</em>" avec Julien Jakubowski. Je ferais un billet dédié à cette présentation.</p>

<!-- more -->


<h3><a href="http://www.devoxx.com/display/FR13/Web+Oriented+Architecture%2C+une+transmutation+des+pratiques+de+construction+des+SI">Web oriented architecture, une transmutation des pratiques de construction des SI</a></h3>

<p>J'avais raté les keynotes du jeudi, je me suis dit qu'il serait dommage d'en faire autant le vendredi. Bon, j'ai raté une partie de la première keynote, celle d'<a href="http://www.devoxx.com/display/FR13/Alexis+Moussine-pouchkine">Alexis Moussine-Pouchkine</a>, "<a href="http://www.devoxx.com/display/FR13/Normal+ou+decafeine">Normal ou décafeiné</a>". En gros, le message de sa keynote est que l'avenir, en particulier le Cloud, peut - et doit - se faire avec Java.</p>

<p>Passons à la deuxième keynote, celle de <a href="http://www.devoxx.com/display/FR13/Habib+Guergachi">Habib Guergachi</a>, CEO de <a href="http://zenexity.com/">Zenexity</a>. Je voulais la voir car il l'avait <a href="http://www.parleys.com/#play/5148922a0364bc17fc56c738">déjà jouée l'année passée</a> sous forme de conférence, et j'avais entendu d'excellents retours. Au delà du message, c'est vraiment le bonhomme qui impressionne. Il avait une telle énergie que cela en devenait contagieux. Rien de mieux pour bien démarrer une journée intense !</p>

<p>Revenons au message lui-même. Il est un peu polémique, mais je crois qu'il n'a pas complètement tort sur un certain nombre de choses.</p>

<p>Quand il s'agit de faire un choix important, il y a deux solutions possibles. On peut opter et pousser le changement, au risque d'innover. Certes, il y a le risque de se faire virer, mais ce sera dans la gloire :) L'autre chemin, c'est la soumission, et ne pas bousculer les choses établies. On ne risque pas de se faire virer à court terme, mais peut-être que dans 2 ans, on vous reprochera de ne pas avoir sû anticiper le changement, et vous vous ferez virer dans la honte !</p>

<p>Ok, c'est une vision un peu simpliste, mais y a un soupçon de vérité là-dedans quand même.</p>

<p>Habib, au cours de sa présentation, parle de <a href="http://www.playframework.com/">Play</a>. Bien entendu, il prêche pour sa paroisse, Zenexity est l'éditeur du framework. Il s'agit d'une innovation française. Pourtant, au début c'était plutôt un défaut, que ce soit pour les français (qui ne jurent que par des produits américains) ou par les américains eux-mêmes. Utiliser une technologie française c'est un peu comme voler dans un avion congolais : ça ne rassure pas vraiment ! Pourtant, Play! a été adopté par de grands noms (surtout américains), comme LinkedIn, Typesafe, etc. Dès lors, tout le monde, y compris les français, encense le framework.</p>

<p>On ne peut pas tout comprendre, il faut savoir se concentrer sur un problème précis, un petit bout d'une architecture entière. Et si l'on se jette à l'eau, que l'on prend le problème à bras le corps, peut-être que l'on sera la personne qui a vraiment sû comprendre et aborder ce problème, et que la solution que l'on proposera deviendra la solution que tout le mondre utilisera. Mais pour cela, il faut se lancer !</p>

<p>Pour résumer, la keynote de Habib Guergachi était pleine de panache, et donne à réflechir. Rien de mieux pour continuer la journée, surtout que la présentation suivante est celle de <a href="http://www.devoxx.com/display/FR13/Julien+Jakubowski">Julien Jakubowski</a> et... <a href="http://www.devoxx.com/display/FR13/Romain+Linsolas">moi-même</a>. J'y reviendrais très vite.</p>

<hr/>


<h3><a href="http://www.devoxx.com/display/FR13/Animez+vos+pages+HTML5++un+tour+d%27horizon+complet+des+techniques+d%27animation+en+HTML5">Animez vos pages HTML5: un tour d'horizon complet des techniques d'animation en HTML5</a></h3>

<p><a href="http://www.devoxx.com/display/FR13/Martin+Gorner">Martin Gorner</a> (<a href="https://twitter.com/martingorner">@martingorner</a>) de Google nous parle d'animation en HTML5. Sa présentation est visible <a href="http://animateyourhtml5.appspot.com/pres/#1">en live sur ce site</a>.</p>

<p>En CSS 3, <code>transition</code> permet d'animer des éléments. Le navigateur va calculer lui-même toutes les étapes intermédiaires.
La propriété <code>animation</code> permet de faire des animations plus complexes, en définissant les propriétés CSS à appliquer à différentes étapes.
Le CSS 3 dispose également de transformations géométriques 2D (rotation, agrandissement, étirement, etc.).
Il y a également des transformations 3D : <code>translateZ</code>, <code>rotateY</code>, etc.
A noter qu'il faut définir soi même la perspective via une propriété CSS : <code>-webkit-perspective: 1000px;</code>.
Par défaut, la valeur par défaut est <code>-webkit-tansform-style: flat</code>. Ce n'est pas ce que l'on souhaite, il faut donc la mettre à <code>preserve-3d</code>. Attention, Internet Explorer 10 ne gère pas cette propriété (mais on peut bidouiller avec du JavaScript pour remplir cette lacune).</p>

<p><img src="/images/devoxxfr-2013-animation-1.jpg" title="Finalement, animer un cube en CSS, ce n'est pas si compliqué" alt="Finalement, animer un cube en CSS, ce n'est pas si compliqué" /></p>

<p>Les bonnes habitudes pour travailler en 3D :</p>

<ul>
<li>Créer un <code>div</code> qui représente la scène.</li>
<li>Créer un objet qui supportera l'animation.</li>
<li>Y affecter des images.</li>
<li>Définir les propriétés d'animation.</li>
</ul>


<p>Après avoir passé en revue l'utilisation des Canvas 2D, Martin aborde le Canvas 3D, connu aussi sous le nom de <strong>WebGL</strong>. Après quelques explications, Martin propose d'aborder la partie pratique à l'aide de la librairie <a href="https://github.com/mrdoob/three.js/">Three.js</a>, qui permet de coder dans le moteur WebGL en JavaScript : définition de la scène, création d'une "caméra", des "lumières". Ensuite on peut ajouter des objets (des <em>Meshs</em>). Enfin, on définit les actions.
Voici un exemple de code avec cette librairie :</p>

<p>``` javascript</p>

<p>var camera, scene, renderer;
var geometry, material, mesh;</p>

<p>init();
animate();</p>

<p>function init() {</p>

<pre><code>camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 10000 );
camera.position.z = 1000;
scene = new THREE.Scene();
geometry = new THREE.CubeGeometry( 200, 200, 200 );
material = new THREE.MeshBasicMaterial( { color: 0xff0000, wireframe: true } );
mesh = new THREE.Mesh( geometry, material );
scene.add( mesh );
renderer = new THREE.CanvasRenderer();
renderer.setSize( window.innerWidth, window.innerHeight );
document.body.appendChild( renderer.domElement );
</code></pre>

<p>}</p>

<p>function animate() {</p>

<pre><code>// note: three.js includes requestAnimationFrame shim
requestAnimationFrame( animate );
mesh.rotation.x += 0.01;
mesh.rotation.y += 0.02;
renderer.render( scene, camera );
</code></pre>

<p>}
```</p>

<p>Three.js gère également des modèles d'objets 3D (via la spécification <a href="https://collada.org">Collada</a> par exemple).</p>

<p>Un point sur les préfixes (ici <code>-webkit-*</code>) : il y a une "convention". Tant qu'une spécification n'est pas officielle, les navigateurs utilisent des préfixes. Une fois la spécification entérinée, alors le préfixe peut disparaître. On peut sinon utiliser des outils tels que <a href="http://leaverou.github.com/prefixfree/">prefixfree.js</a> ou <a href="http://sass-lang.com/">SASS</a> qui vont s'occuper d'ajouter les préfixes pour nous.</p>

<p><img src="/images/devoxxfr-2013-animation-2.jpg" title="Les 4 possibilités d'animations en web" alt="Les 4 possibilités d'animations en web" /></p>

<hr/>


<h2><a href="http://www.devoxx.com/display/FR13/Peut+on+toujours+etre+developpeur+apres+40+ans">Peut on toujours être développeur après 40 ans ?</a></h2>

<p><a href="http://www.devoxx.com/display/FR13/Benjamin+Marron">Benjamin Marron</a> (<a href="https://twitter.com/bmarron">@bmarron</a>) nous explique s'il est possible</p>

<p>Être boucher à 40 ans ? Artisan à 40 ans ? La question ne se pose pas tant elle est évidente. Pourtant, pour un développeur, la question se pose.
Y a-t-il une obscolescence des développeur ? Si la personne est concernée, se forme, alors non. Mais sans ces efforts, cela risque d'arriver. Et direction chef de projet :)</p>

<p>Grâce à leur expérience, les développeurs expérimentés savent mieux filtrer les informations, choisir les outils ou les librairies.</p>

<p><img src="/images/devoxxfr-2013-40ans.jpg" title="Développeur à 40 ans, c'est ça ?" alt="Développeur à 40 ans, c'est ça ?" /></p>

<p>Alors la question est peut-être de savoir si nous sommes usés ?
Il ne faut pas rester dans sa zone de confort.
Les conférences comme Devoxx permettent de se gonfler à bloc, le leitmotiv c'est "<strong>soyez fiers d'être développeurs</strong>"</p>

<p>Quid du choc générationnel ? Comme travailler avec des "petits jeunes" de 20 ans ? Il faut rester humble, dire que l'on a toujours à apprendre.</p>

<p>Il y a aussi le problème de disponibilité, avec la vie de famille, les enfants, etc. Mais cela reste jouable, et le fait de ne pas être toujours 100% disponible pour son travail n'est pas un frein.</p>

<p>Le message de Benjamin Marron est que la passion doit nous faire continuer dans cette voie, et que nous avons les moyens d'y parvenir. Un sujet n'a pas été vraiment abordé, si ce n'est lors des questions du public : la reconnaissance de l'expérience par l'employeur. Il est vrai qu'en France, niveau salaire, on a tendance à stagner assez vite (disons à partir d'une dizaine d'années d'expérience), et continuer sa progression n'est pas toujours facile. Ca reste compliqué aujourd'hui, mais les choses semblent changer. Doucement en tout cas.</p>

<hr/>


<h2><a href="http://www.devoxx.com/display/FR13/Winter+is+coming">Winter is coming</a></h2>

<p><img src="/images/devoxxfr-2013-winter.jpg" title="Winter is coming" alt="Winter is coming" /></p>

<p>Je finis (ou presque) ma journée avec la présentation de <a href="http://www.devoxx.com/display/FR13/Didier+Girard">Didier Girard</a> et <a href="http://www.devoxx.com/display/FR13/Aurelien+Pelletier">Aurélien Pelletier</a> de <a href="http://www.sfeir.com/">SFEIR</a>. J'avoue que j'ai un peu du mal à savoir quoi tirer de cette présentation, tant le message n'était pas très clair. L'idée, du moins une partie de ce qui a été dit, c'est de savoir comment juger de la pertinence d'un framework, d'une librairie, et de savoir estimer son espérance de vie, dans un monde très concurrentiel.</p>

<p>Didier Girard décide donc d'utiliser <a href="http://www.google.com/trends/?hl=en">Google Trends</a> pour juger de la popularité d'un framework. Cet outil de Google permet de mesurer, et comparer, le nombre de fois où tel ou tel mot est <em>recherché</em> sur Google.
Plutôt que simplement comparer deux noms de technologies via le site de Google, il décide d'y ajouter le terme <em>tutorial</em>, supposant que plus on recherche de tutoriels sur une technologie, plus celle-ci intéresse les gens, et sera facile à maitriser.
Bien sûr, Didier Girard insiste sur le fait que cela doit aider à se faire une opinion, mais que cela ne saurait suffire. Pourtant, il n'ira guère plus loin dans sa démonstration, ce qui est un peu contradictoire au final. Dommage.</p>

<p>Pour résumer, on va dire que ce n'est pas forcément la présentation que j'ai préféré à Devoxx :)</p>

<hr/>


<h2><a href="http://www.devoxx.com/display/FR13/Les+Cast+Codeurs+Podcast...+putain+4+ans+deja%21">Les CastCodeurs, putain 4 ans déjà</a></h2>

<p><img src="/images/devoxxfr-2013-castcodeurs.jpg" title="Merci Atlassian, une fois de plus !" alt="Merci Atlassian, une fois de plus !" /></p>

<p>Ca devient une tradition, finir un Devoxx avec une session live des <a href="http://lescastcodeurs.com/">Cast Codeurs</a>. A vrai dire, je ne vois <strong>aucune</strong> raison de ne pas y assister : récapitulatif de la conférence, bonne ambiance, bonnes blagues (quoique ?) et bières offertes par Atlassian ! Rien de mieux pour terminer en beauté une magnifique conférence. Allez écouter le podcast, bientôt disponible. En attendant, il y a les podcasts de <a href="http://lescastcodeurs.com/2011/11/28/les-cast-codeurs-podcast-episode-49-devoxx-2011-les-dix-ans/">Devoxx 2011</a>, <a href="http://lescastcodeurs.com/2012/04/21/les-cast-codeurs-podcast-episode-57-en-direct-de-devoxx-france-2012/">Devoxx France 2012</a>, et enfin <a href="http://lescastcodeurs.com/2012/11/29/les-cast-codeurs-podcast-episode-68-devoxx-2012-et-les-putchettes/">Devoxx 2012</a>.</p>

<p>A l'année prochaine !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devoxx France 2013 - Jour 2]]></title>
    <link href="http://linsolas.github.com/blog/2013/03/28/devoxx-france-2013-jour-2/"/>
    <updated>2013-03-28T11:31:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2013/03/28/devoxx-france-2013-jour-2</id>
    <content type="html"><![CDATA[<p><img src="http://www.devoxx.com/download/attachments/6816022/DevoxxFR-2012-web-400-267.png" title="Devoxx France 2013" alt="Devoxx France" /></p>

<p>Et c'est parti pour la seconde journée de Devoxx France 2013. Le jeudi est la première journée des conférences et quickies. Moins de code, mais toujours autant de fun.</p>

<p>Pour cause de timing, j'ai hélas raté les keynotes du matin. <a href="http://www.devoxx.com/display/FR13/Bonjour+et+bienvenue">La première</a>, présentée par une partie de l'équipe organisatrice de l'événement, était essentiellement destinée à accueillir les personnes et donner un certain nombre de chiffres. Une annonce toutefois : la nouvelle version du site <a href="http://www.parleys.com">Parleys</a>, refait complètement en HTML 5. Exit le Flash, et c'est tant mieux !</p>

<p><a href="http://www.devoxx.com/pages/viewpage.action?pageId=6818412">La seconde, L'Histoire des Ecritures</a>, présentée par <a href="http://www.devoxx.com/display/FR13/Clarisse+Herrenschmidt">Clarisse Herrenschmidt</a> retraçait l'histoire de l'écriture, au terme de nombreux siècles d'évolution. Une keynote visiblement passionnante, qui change un peu des thèmes très informatiques dont on a l'habitude. Certains l'ont comparée à la keynote de Michel Serres à l'USI, donc forcément un compliment ! L'ayant ratée, je pense qu'il s'agira de la première que je regarderais sur le site de Parleys.</p>

<p><a href="http://www.devoxx.com/display/FR13/Objects+and+functions%2C+conflict+without+a+cause">Dernière keynote</a> fut celle de <a href="http://www.devoxx.com/display/FR13/Martin+Odersky">Martin Odersky</a>, le créateur de Scala. Il semble que les retours indiquent que la keynote n'a pas été dans la direction d'un apaisement entre les <em>Javaïstes</em> et les <em>Scalafistes</em>. Dommage.</p>

<!-- more -->


<h2><a href="http://www.devoxx.com/display/FR13/Elastifiez+votre+application+++du+SQL+au+NoSQL+en+moins+d%27une+heure">Elastifiez votre application : du SQL au NoSQL en moins d'une heure</a></h2>

<p><img src="/images/devoxxfr-2013-nosql-1.jpg" title="David et Tug sur scène" alt="David et Tug sur scène" /></p>

<p><a href="http://www.devoxx.com/display/FR13/David+Pilato">David Pilato</a> et <a href="http://www.devoxx.com/display/FR13/Tugdual%20Grall">Tugdual Grall</a> nous propose un guide pour migrer une application utilisant une base de données relationnelle vers une base de données NoSQL.</p>

<p>Tout d'abord, une question : pourquoi migrer ?</p>

<ul>
<li>Il est aisé de faire de la scalabilité verticale : augmentation des serveurs, de la mémoire, etc. Mais cela ne suffit plus, on voudrait de la scalabilité horizontale.</li>
<li>La recherche doit être structurée. On souhaiterait de la recherche full-text.</li>
</ul>


<p>Ils vont nous montrer le développement d'une application basée sur <a href="http://www.couchbase.com/">CouchBase</a> pour la base de données NoSQL et <a href="http://www.elasticsearch.org/">ElasticSearch</a> pour la partie recherche.</p>

<p><img src="/images/devoxxfr-2013-nosql-2.jpg" title="Un petit problème, David ?" alt="Un petit problème, David ?" /></p>

<p>On commence par une visite de l'application telle qu'elle est, dans sa version relationelle. Il s'agit d'une base assez simple, avec des fonctionnalités de CRUD, et une recherche assez limitée (la recherche n'est pas multi-champs, très stricte, etc.).</p>

<p>Première étape du refactoring de l'application : mettre en place une API REST dans le serveur (utilisation de Spring MVC + <a href="http://jackson.codehaus.org/">Jackson</a>). Par exemple, on propose une méthode de récupération d'une personne par son ID (ou éventuellement par son nom).</p>

<p>Deuxième étape, mise en place de <strong>CouchBase</strong>. Côté code, on ajoute la dépendance vers le client CouchBase dans le <code>pom.xml</code>. L'API utilisée ici est très claire et concise. Pour montrer que ça fonctionne, Tugdual montre des appels REST via la commande <code>curl</code>. Ce n'est pas sexy, mais ça marche effectivement.</p>

<p>L'interface graphique de l'application se fait en Angular, mais ça n'a guère d'importance ici.</p>

<p>Tout fonctionne bien, mais ce n'est pas encore ça. Par exemple, si on cherche <em>Joe Smith</em>, on trouvera des résultats, mais pas si l'on cherche <em>Smith Joe</em>. C'est là qu'intervient <strong>ElasticSearch</strong>. Une fois l'index dans ElasticSearch créé, on duplique les données de CouchBase vers ElasticSearch, tout ceci se faisant très simplement via l'interface web de CouchBase (la base de données est prévue pour fonctionner avec ElasticSearch).</p>

<p>Maintenant, on modifie la partie de recherche - gérée par AngularJS - afin de taper directement sur ElasticSearch, sans passer par le serveur. Avec pratiquement aucune modification, la recherche bénéficie désormais de la puissance d'ElasticSearch : recherche multi-champs, recherche plus générique (désormais la recherche <em>Smith Joe</em> trouve effectivement <em>Joe Smith</em>), etc.</p>

<p>Passons maintenant à l'analyse de données. David présente <a href="http://kibana.org/">Kibana</a>, un plugin d'Elastic Search qui permet de créer des dashboards dynamiques. En quelques clics, David arrive à créer un histogramme montrant la distribution des dates de naissance parmi la base de données contenant déjà plus d'un million d'entrées. Même chose pour créer un camembert pour la répartition par pays. Ce dashboard est dynamique. On peut ainsi naviguer dans nos données.</p>

<p><img src="/images/devoxxfr-2013-nosql-3.jpg" title="Kibana, pour faire des dashboards rapides et efficaces" alt="Kibana, pour faire des dashboards rapides et efficaces" /></p>

<p>Un autre point positif des bases NoSQL : les données sont sans schéma (<em>schema less</em>), c'est-à-dire qu'il est possible d'ajouter, modifier ou supprimer des champs sans aucun problème. Aucun <code>ALTER TABLE</code> à faire, pas de freeze de la base de données, pas d'update des données existantes.</p>

<p>En moins d'une heure, David et Tug ont réussi leur pari de faire migrer leur application pour la rendre plus scalable, plus élastique. En prime, et ce n'est pas négligeable, ils ont ajouté de vraies fonctionnalités de recherche et de création de dashboards dynamiques, à moindre frais. Une telle migration n'est toutefois pas si aisée dans le monde réél, et se passer d'une base relationnelle n'est pas toujours simple, en particulier car il faut changer aussi sa façon de penser son modèle de données.</p>

<hr/>


<h2><a href="http://www.devoxx.com/display/FR13/Les+bronzes+font+du+dev">Les bronzés font du dév</a></h2>

<p><img src="/images/devoxxfr-2013-ellene.jpg" title="Pas de machine ? Lis la doc en attendant !" alt="Pas de machine ? Lis la doc en attendant" /></p>

<p><a href="http://www.devoxx.com/display/FR13/Ellene+Dijoux">Ellène Siber Dijoux</a> (<a href="https://twitter.com/ElleneSiber">@ElleneSiber</a>), durant un Quickie humoristique, nous montre la vie professionnelle de Martin Dutruc, jeune développeur fraichement débarqué de son école. La déconvenue va être totale, et nous voyons à travers cette petite histoire pas mal de travers de notre métier (quand il n'est pas exécuté par les bonnes personnes) ainsi qu'un certain nombre de clichés dans notre environnement :</p>

<ul>
<li>La société à "taille humaine" de 1200 personnes ;</li>
<li>Le commercial qui était un ancien développeur et qui connait bien le monde du "<em>Java - J deux ZE</em>" ;</li>
<li>Pas de machine lors de l'arrivée d'un nouveau dans l'équipe. Du coup on lui donne 1000 pages de documentation, fonctionnelle ou technique ;</li>
<li>Le problème du build qui ne passe pas, alors il faut ignorer les tests ;</li>
<li>La mauvaise gestion du temps, de la pseudo-agilité (vive les itérations de 2 mois !).</li>
</ul>


<p>Ellène s'en est bien sortie, le format de sa présentation n'était pas forcément facile. Hélas, ces travers sentaient beaucoup le vécu, y compris pour moi. En tout cas, bien vu Ellène :)</p>

<hr/>


<h2><a href="http://www.devoxx.com/display/FR13/Comparing+JVM+Web+Frameworks">Comparing JVM Web Frameworks</a></h2>

<p><a href="http://www.devoxx.com/display/FR13/Matt+Raible">Matt Raible</a> (<a href="https://twitter.com/mraible">@mraible</a>) nous propose une comparaison de différents frameworks Web tournant sur la JVM. Tout d'abord une petite histoire sur le web et les frameworks web pour la JVM.</p>

<p><img src="https://farm9.staticflickr.com/8529/8588701778_91aeb65377_o.png" title="L'historique des frameworks web de la JVM" alt="L'historique des frameworks web de la JVM" />
<em>Image de <a href="http://raibledesigns.com/">Matt Raible</a> (Copyright Raible Designs)</em></p>

<p>Y a t'il trop de frameworks web pour la JVM ? La salle pense en majorité que oui. L'arrivée des frameworks JavaScript ne change pas la donne, et posent d'autres problèmes : peu de scalabilité, problème de sécurité, code potentiellement critique côté client, etc.</p>

<p>Passons au comparatif des frameworks. Tout d'abord, quels critères pour choisir les candidats ?</p>

<ul>
<li>Communauté / Support</li>
<li>HTML 5</li>
<li>REST</li>
<li>Mobile</li>
<li>Performances</li>
<li>Rapidité des pages</li>
</ul>


<p>Matt décide de se "borner" à la plateforme JVM pour restreindre son choix. Cela laisse tout de même un large choix de langage : Java, Scala, Groovy, etc.</p>

<p>Faire des comparatifs n'est pas simple. Il faut affronter communautés passionnées (surtout celles ayant une mauvaise note), critiques sur la façon de noter ou sur les notes. Il y aussi la possibilité de "tricher" avec les résultats.</p>

<p>Pour Matt, l'une des très bonne comparaison de frameworks était la présentation <a href="http://www.parleys.com/#play/514892290364bc17fc56c52e/chapter0/about">World Wide Wait</a> lors du Devoxx 2011.
Autre comparatif intéressant est le site <a href="http://devrates.com/stats/index">devrates.com</a> qui permet avant tout de connaitre la popularité d'un framework.</p>

<p>S'il s'agit d'un framework <em>full stack</em>, Matt recommande avant tout de choisir en fonction du langage que l'on souhaite utiliser : JRuby, Groovy, Scala ou Java.</p>

<p>Cette présentation n'était pas une comparaison en soi, mais plutôt les bonnes méthodes à suivre quand on veut faire soi même une comparaison de frameworks, afin de choisir ce qui permettra de mieux répondre à nos besoins. Une présentation intéressante, mais peut-être un peu en deça de ce que nous avait habitué Matt Raible par le passé.</p>

<hr/>


<h2><a href="http://www.devoxx.com/display/FR13/Structures+de+donnees+exotiques%2C+au+dela+de+ArrayList%2C+HashMap+et+autres+HashSet.">Structures de données exotiques, au delà de ArrayList, HashMap et autres HashSet</a></h2>

<p><a href="http://www.devoxx.com/display/FR13/Sam+Bessalah">Sam Bessalah</a> (<a href="https://twitter.com/samklr">@samklr</a>)</p>

<p>On a tendance à toujours sortir l'artillerie lourde, et pas de considérer vraiment le problème que l'on a. Comme il le dit, <em>quand on a un marteau, tout ressemble à un clou</em> ! Durant cette présentation, Sam nous présente 4 structures de données, un poil exotique.</p>

<h3>Skiplist</h3>

<ul>
<li>Stockage de données ordonnées</li>
<li>Insertion / suppression en <code>O(log N)</code></li>
<li>Recherche en <code>O(log N)</code></li>
</ul>


<p>Plutôt que de parcourir toute la liste pour chercher un élément, on prend des "voies express", c'est-à-dire qu'on va sauter des éléments. Pour vulgariser un peu, Sam compare ça aux Métro 1 et au RER A. Par exemple, si l'on veut se rendre de La Défense à Châtelet, on peut prendre l'une ou l'autre des lignes. Le Métro 1 va mettre plus de temps, car il s'arrête à chaque station, alors que le RER prend une voie "express" (du moins en temps normal, quand il n'y a pas d'incident :) ). On arrive ainsi plus vite à destination. C'est le même principe pour les <code>SkipList</code> lorsqu'on la parcourt à la recherche d'un élément : on ne va pas aller d'élément en élément, mais on va plutôt prendre des "raccourcis".</p>

<p>Depuis le JDK 1.6, il existe des implémentations de ce type de structure :</p>

<ul>
<li><a href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ConcurrentSkipListMap.html">java.util.concurrent.ConcurrentSkipListMap</a></li>
<li><a href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ConcurrentSkipListSet.html">java.util.concurrent.ConcurrentSkipListSet</a></li>
</ul>


<h3>Tries</h3>

<p>Cette structure est une sorte d'arbre ternaire. Pour une recherche de texte, la complexité va dépendre non de la taille de l'arbre, mais de la longueur de la chaine de recherche.
Toutefois, cette structure reste assez gourmande en mémoire. Sam fait un focus sur la structure <code>Hash Array Mapped Trie</code> (<a href="http://en.wikipedia.org/wiki/Hash_array_mapped_trie">HAMT</a>). Dans ce type de structure, on code les clés sur 32 bits, du coup la profondeur de l'arbre ne dépassera jamais 7 niveaux.</p>

<p>Pour la complexité nous avons d'excellents résultats :</p>

<ul>
<li>ajouter, premier, dernier, n-ième élément, mise à jour -> <code>O(1)</code>.</li>
<li>concat, insert, preprend -> <code>O(N)</code> (N étant au maximum 7).</li>
</ul>


<p>A noter qu'il existe une <code>Concurrent Trie</code> (<a href="http://en.wikipedia.org/wiki/Ctrie">CTrie</a>) qui n'est pas bloquante.</p>

<h3>Sketches</h3>

<p>Prendre un ensemble de données, en extraire des informations, puis travailler sur ces informations et non sur les données elles-mêmes.</p>

<h4>Bloom Filters</h4>

<p>Structure de données probabiliste. Par exemple, est-ce qu'un élément appartient à un ensemble de données ?
On ne pas être sûr à 100% que la donnée soit présente, mais on est absolument certain qu'elle n'y ait pas. Il ne peut donc pas y avoir de faux-négatif.</p>

<p>Attention toutefois, si un <em>Bloom Filter</em> accepte les insertions, il ne peut pas y ajouter de suppression de données. Afin de supporter la suppression, il faudra utiliser un <em>Counting Bloom Filter</em>.</p>

<p>On peut trouver une implémentation dans Guava, <a href="http://docs.guava-libraries.googlecode.com/git-history/v11.0/javadoc/com/google/common/hash/BloomFilter.html">BloomFilter</a></p>

<h3>Count Min Sketches</h3>

<p>Le <a href="http://en.wikipedia.org/wiki/Count-Min_sketch">Count Min Sketch</a> est une évolution du Bloom Filter. Cette structure garde l'information du nombre d'occurences de chaque élément. Une utilisation de ce genre de structure est de détecter quelle source change le plus souvent ses données, les IP qui consomment le plus de bande passante, etc.</p>

<p>A voir sur GitHub, une <a href="https://github.com/clearspring/stream-lib">librairie de structure de données par flux</a>.</p>

<hr/>


<p>Une seconde journée moins chargée en terme de conférence en ce qui me concerne, car il me fallait encore préparer mon passage du lendemain avec Julien Jakubowski. J'ai également beaucoup discuté avec d'autres personnes, visiter un peu les stands, etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devoxx France 2013 - Jour 1]]></title>
    <link href="http://linsolas.github.com/blog/2013/03/27/devoxx-france-2013-jour-1/"/>
    <updated>2013-03-27T09:42:00+01:00</updated>
    <id>http://linsolas.github.com/blog/2013/03/27/devoxx-france-2013-jour-1</id>
    <content type="html"><![CDATA[<p><img src="http://www.devoxx.com/download/attachments/6816022/DevoxxFR-2012-web-400-267.png" alt="Devoxx France" /></p>

<p>Enfin, ça y est ! La deuxième édition de la conférence <a href="http://www.devoxx.com/display/FR13/Accueil">Devoxx France</a> a débuté. Comme l'année dernière, la conférence se déroule sur trois jours. Le mercredi est essentiellement constituée de démonstrations, de laboratoires, de mises en pratique d'un outil ou d'un langage, de <em>Tools in Action</em>.
Ma journée débute donc avec une université sur les tests en JavaScript. L'après-midi contiendra quelques surprises, dont... un minitel :)</p>

<!-- more -->


<h2><a href="http://www.devoxx.com/display/FR13/Le+fantome%2C+le+zombie+et+testacular%2C+panorama+des+outils+de+tests+pour+application+web+moderne.">Le fantôme, le zombie et Testacular, panorama des outils de tests pour application web moderne</a></h2>

<p><img src="/images/devoxxfr-2013-tests-js-1.jpg" alt="Qui fait vraiment des tests ?" /></p>

<p>Photo par <a href="https://twitter.com/binout">@binout</a></p>

<p>Pour commencer la journée et la conférence, <a href="http://www.devoxx.com/display/FR13/Jean-laurent+De+morlhon">Jean-Laurent de Morhlon</a> (<a href="https://twitter.com/morlhon">@morlhon</a>) et <a href="http://www.devoxx.com/display/FR13/Pierre+Gayvallet">Pierre Gayvallet</a> (<a href="https://twitter.com/wayofspark">@wayofspark</a>) nous proposent un tour d'horizon de ce qui se fait autour des tests JavaScript.</p>

<p>Tout d'abord, un rappel des différents types de tests</p>

<ul>
<li>Tests <strong>unitaires</strong> : il s'agit ici de tests techniques. On les exécutera plutôt en isolation, c'est-à-dire côté en supprimant le maximum de choses autour du code : pas de base de données, de navigateur web, d'accès réseau, etc.</li>
<li>Tests d'<strong>intégration</strong> : nous restons dans les techniques techniques, mais ici nous voulons mettre l'ensemble de l'application en test.</li>
<li>Tests d'<strong>acceptance</strong> : ce sont avant tout des tests fonctionnels. Nous pouvons utiliser le <em>BDD</em> (<em>Behavior Driven Development</em>). Toutefois, ces tests doivent représenter une petite partie de l'ensemble des tests.</li>
</ul>


<p>Technique de l'<em>outside-in</em> :</p>

<ul>
<li>On écrit un test d'acceptance qui va échouer.</li>
<li>Ensuite, on écrit un test unitaire qui va également échouer.</li>
<li>Puis on code de façon à faire passer le test simplement.</li>
<li>Une fois le test unitaire réussit, on procède au refactoring.</li>
<li>Une fois que le test unitaire est au vert et que le refactoring est terminé, on peut terminer en faisant en sorte que le test d'acceptance réussisse.</li>
</ul>


<p>Un peu de vocabulaire maintenant : un navigateur <em>headless</em> ("<em>sans tête</em>") est un navigateur sans interface graphique. Cela servira beaucoup pour les tests, la partie graphique étant éliminée, nous gagnons ainsi beaucoup de temps. Quelques exemples : PhantomJS, HtmlUnit, Zombie.js...</p>

<h3>PhantomJS</h3>

<p><img src="/images/phantomjs.png" alt="PhantomJS" /></p>

<p><a href="http://phantomjs.org">PhantomJS</a>, un navigateur <em>headless</em> dispose d'un vrai <em>rendering</em> (pas d'émulation), rapide, et offre une API JavaScript très complète.</p>

<p>Voici un exemple de code avec PhantomJS :</p>

<p>``` javascript
console.log('Loading a web page');
var page = require('webpage').create();
var url = 'http://www.phantomjs.org/';
page.open(url, function (status) {</p>

<pre><code>//Page is loaded!
phantom.exit();
</code></pre>

<p>});
```</p>

<p>L'une des particularité de PhantomJS est son double contexte d'exécution : client et serveur. Cela implique parfois des problèmes de communication entre les deux contextes, ce qui est souvent source d'erreur.</p>

<p>La gestion du <em>rendering</em> de PhantomJS supporte quasiment tous les standards HTML5 et CSS3, avec quelques limites toutefois : pas de support de Flash (ô mon dieu :) ), pas de CSS 3D, de géolocalisation, WebGL, etc.
Son écosystème est assez riche : GhostWriter (qui implémente la spécification WebDriver), des runners de tests (Poltergeist, Mocha, etc.), des frameworks de tests (Lotte, WebSpecter, CasperJS, etc.), mais aussi des outils pour réaliser des screenshots (capturejs, node-webshot...)</p>

<h3>CasperJS</h3>

<p><img src="/images/casperjs.jpg" alt="CasperJS" /></p>

<p><a href="http://casperjs.org/">CasperJS</a> est une surcouche de PhantomJS pour ajouter ce qui manque à ce dernier :</p>

<ul>
<li>Gestion des callbacks, de l'asynchronisme</li>
<li>API fluide (<em>fluent API</em>)</li>
<li>Méthodes d'intéraction avec la page (support du clavier, etc.)</li>
<li>Framework de tests</li>
</ul>


<p>Par exemple, le code suivant :</p>

<p>``` javascript
var page = require('webpage').create();</p>

<p>page.open(url1, function(status) {</p>

<pre><code>if (status == "fail") phantom.exit();
page.open(url2, function(status) {
    if (status == "fail") phantom.exit();
    page.open(url3, function(status) {
        if (status == "fail") phantom.exit();
        page.open(url4, function(status) {
            if (status == "fail") phantom.exit();
            // Can I stop, now?
        });
    });
});
</code></pre>

<p>});
```</p>

<p>s'écrira plus simplement avec CasperJS :</p>

<p>``` javascript
var casper = require('casper').create();</p>

<p>casper.start(url1);
casper.thenOpen(url2);
casper.thenOpen(url3);
casper.thenOpen(url4);</p>

<p>casper.run();
```</p>

<p>Il faut noter qu'avec la version 1.1 de CasperJS (pas encore sortie), l'écriture des tests sera simplifiée, en particulier pour ce qui concerne le code à exécuter avant ou après des tests (<code>setUp</code> et <code>`tearDown</code>).</p>

<p>S'ensuit une démonstration de l'outil CasperJS, pour tester de façon fluide est très simple des interactions sur un site web marchant : tests basiques d'une page (vérification d'un titre, du contenu), simulation de clics pour ajouter des éléments dans le panier, test de la validation d'un formulaire, etc.
Point sympathique, il est possible de demander à CasperJS de réaliser une capture d'écran durant un test et de le copier dans un fichier avec une commande simple : <code>casper.capture("mon_image.png");</code> On peut donc faire du <em>Screenshot Driven Development</em> :)</p>

<h3>Zombie.js</h3>

<p><img src="/images/zombiejs.jpg" alt="ZombieJS" /></p>

<p><a href="http://zombie.labnotes.org/">ZombieJS</a> est un navigateur <em>headless</em>, qui tourne sur node.js, et qui repose sur des bibliothèque d'émulation (c'est un avantage mais aussi un inconvénient). Ce n'est donc pas un <em>vrai</em> navigateur, bien qu'il supporte la plupart des fonctionnalités des navigateurs actuels : HTML5, sélecteurs CSS3, cookier, web storage, ajax, etc. Il se base sur certaines librairies tierces, telles que :</p>

<ul>
<li>JSDom</li>
<li>HTML5</li>
<li>Sizzle.js (sélecteurs CSS)</li>
</ul>


<p>L'API de Zombie.js est fluide, ce qui permet de rendre le code plus lisible (encore plus en utilisant CoffeeScript). Voici un exemple de code avec Zombie.js :</p>

<p>``` javascript
var Browser = require("zombie");
var assert = require("assert");</p>

<p>// Load the page from localhost
browser = new Browser()
browser.visit("http://localhost:3000/", function () {</p>

<p>  // Fill email, password and submit form
  browser.</p>

<pre><code>fill("email", "zombie@underworld.dead").
fill("password", "eat-the-living").
pressButton("Sign Me Up!", function() {

  // Form submitted, new page loaded.
  assert.ok(browser.success);
  assert.equal(browser.text("title"), "Welcome To Brains Depot");

})
</code></pre>

<p>});
```</p>

<p>Un autre exemple de test avec les sélecteurs CSS :</p>

<p><code>javascript
brower.queryAll("#content &gt; .produit").length.should.equal(7);
</code></p>

<p>Avec Zombie, le code devient très lisible, ultra rapide. Toutefois, il a quelques défauts (assez importants pour certains) :</p>

<ul>
<li>Emule un navigateur.</li>
<li>Difficile à intégrer dans un build java.</li>
<li>Difficile à faire tourner sur Windows (aie !).</li>
<li>Le développement est quelque peu en berne (aie aussi !).</li>
<li>Les erreurs sont parfois cryptiques.</li>
</ul>


<p>Jean-Laurent passe ensuite à une démonstration de l'outil avec CoffeeScript.</p>

<h3>QUnit</h3>

<p><img src="/images/qunit.png" alt="QUnit" /></p>

<p><a href="http://qunitjs.com">QUnit</a> est une librairie de tests JavaScript plus proche des JUnit, avec le système des assert. On est ici plutôt à destination des tests unitaires, pour faire du TDD.
L'écosystème de QUnit est assez riche, il est également possible d'ajouter de nouvelles assertions (par défaut, QUnit n'en propose qu'une toute petite poignée) :</p>

<p>``` javascript
// Code du plugin QUnit closeEnough (https://github.com/jquery/qunit/tree/master/addons/close-enough)
QUnit.extend( QUnit.assert, {</p>

<pre><code>/**
 * Checks that the first two arguments are equal, or are numbers close enough to be considered equal
 * based on a specified maximum allowable difference.
 */
close: function(actual, expected, maxDifference, message) {
    var passes = (actual === expected) || Math.abs(actual - expected) &lt;= maxDifference;
    QUnit.push(passes, actual, expected, message);
},

/**
 * Checks that the first two arguments are numbers with differences greater than the specified
 * minimum difference.
 */
notClose: function(actual, expected, minDifference, message) {
    QUnit.push(Math.abs(actual - expected) &gt; minDifference, actual, expected, message);
}
</code></pre>

<p>});
```</p>

<p>L'utilisation de cette nouvelle assertion doit passer par l'objet <em>assert</em> :</p>

<p>``` javascript
test('Example unit test', function(assert) {</p>

<pre><code>assert.close(3.141, Math.PI, 0.001);
assert.notClose(3.1, Math.PI, 0.001);
</code></pre>

<p>}
```</p>

<h3>Sinon.js</h3>

<p><a href="http://sinonjs.org/">Cette librairie</a> de tests a le gros avantage de pouvoir mocker pas mal de choses, dont les timers, des servers, des appels Ajax.
Il dispose également d'une API assez complète pour les espions (<em>spy</em>) ou les <em>stubs</em>.
Un petit exemple :</p>

<p>```javascript
it("calls original function with right this and args", function () {</p>

<pre><code>var callback = sinon.spy();
var proxy = once(callback);
var obj = {};

proxy.call(obj, 1, 2, 3);

assert(callback.calledOn(obj));
assert(callback.calledWith(1, 2, 3));
</code></pre>

<p>});
```</p>

<p>Un autre exemple, en mockant une requête Ajax :</p>

<p>```javascript
after(function () {</p>

<pre><code>// When the test either fails or passes, restore the original
// jQuery ajax function (Sinon.JS also provides tools to help
// test frameworks automate clean-up like this)
jQuery.ajax.restore();
</code></pre>

<p>});</p>

<p>it("makes a GET request for todo items", function () {</p>

<pre><code>sinon.stub(jQuery, "ajax");
getTodos(42, sinon.spy());

assert(jQuery.ajax.calledWithMatch({ url: "/todo/42/items" }));
</code></pre>

<p>});
```</p>

<h3>Karma (aka Testacular)</h3>

<p><a href="http://karma-runner.github.com/0.8/index.html">Karma</a> (anciennement appelé Testacular) est un lanceur de tests multi-navigateurs, tournant sur node.js. Il a été développé par l'équipe d'AngularJS (Google).
Il propose également des adaptateurs pour supporter différents frameworks de tests : Mocha, Jasmine, QUnit ou Angular Scenario.</p>

<h3>Chai.js</h3>

<p><img src="/images/chaijs.png" alt="Chaijs" /></p>

<p><a href="http://chaijs.com/">ChaiJS</a> est une toute petite librairie d'assertions. Elle propose 3 types d'assertions :</p>

<p>Le type <em>Assert</em> :</p>

<p>``` javascript
var assert = chai.assert;</p>

<p>assert.typeOf(foo, 'string');
assert.equal(foo, 'bar');
assert.lengthOf(foo, 3)
assert.property(tea, 'favors');
assert.lengthOf(tea.flavors, 3);
```</p>

<p>Le type <em>Expect</em> :</p>

<p>``` javascript
var expect = chai.expect;</p>

<p>expect(foo).to.be.a('string');
expect(foo).to.equal('bar');
expect(foo).to.have.length(3);
expect(tea).to.have.property('flavors').with.length(3);
```</p>

<p>Ou encore le type du <em>Should</em> :</p>

<p>``` javascript
chai.should();</p>

<p>foo.should.be.a('string');
foo.should.equal('bar');
foo.should.have.length(3);
tea.should.have.property('flavors').with.length(3);
```</p>

<h3>Mocha</h3>

<p><img src="/images/mocha.png" alt="Mocha" /></p>

<p><a href="http://visionmedia.github.com/mocha/">Mocha</a> est un framework de test, tourne sur Node.js ou dans un navigateur.
Il s'intègre parfaitement avec beaucoup d'autres choses : Jenkins, TeamCity, des outils comme chai.js.</p>

<h3>JSCover</h3>

<p><a href="http://tntim96.github.com/JSCover/">JSCover</a> (anciennement JsCoverage) permet de mesurer la couverture de code par les tests JS. Il offre également un export de type Cobertura, ce qui lui permet son intégration dans Jenkins (et a priori Sonar ?).</p>

<h3>Plato</h3>

<p><a href="http://jsoverson.github.com/plato/examples/jquery/">Plato</a> est un outil d'introspection des tests. Il donne ainsi un rapport détaillé du code JS, permet même d'estimer le nombre de bugs dans l'application :)
Il met également en détails les erreurs levées par JsLint.</p>

<p>Voilà une très bonne présentation pour commencer Devoxx France, avec beaucoup de beaux outils à tester. Peut-être même trop, les trois heures ont paru bien courtes :)</p>

<hr/>


<h2><a href="http://www.devoxx.com/display/FR13/Frontend+Live+Coding+++Tour+d%27horizon+de+l%27outillage+et+des+technos+web+d%27aujourd%27hui">Frontend live coding : tour d'horizon de l'outillage et des technos web d'aujourd'hui</a></h2>

<p><a href="http://www.parleys.com/#play/51561f64e4b0c779d78813f3">Vidéo Parleys</a></p>

<p><a href="http://www.devoxx.com/display/FR13/Frederic+Camblor">Frédéric Camblor</a> (<a href="https://twitter.com/fcamblor">@fcamblor</a>) nous propose un tour d'horizon des outils liés au développement web :</p>

<ul>
<li><strong>Yeoman</strong> / <strong>Grunt</strong> : orchestrateur des développements web ;</li>
<li><strong>Sass</strong> / <strong>Compass</strong> : surcouche à CSS permettant notamment de variabiliser les feuilles de style ;</li>
<li><strong>Bower</strong> : provisionneur de librairies JavaScript ;</li>
<li><strong>RequireJS</strong> : injecteur de dépendances JavaScript à la demande ;</li>
<li><strong>Handlebars</strong> : moteur de templating coté client ;</li>
<li><strong>BackboneJS</strong> : framework MVC qui permet d'améliorer la maintenabilité du code JavaScript ;</li>
<li>Un ensemble de tips de développement dans Chrome, dont vous ne soupçonnez peut-être pas l'existence.</li>
</ul>


<h3>Yeoman et Grunt</h3>

<p><img src="/images/yeoman.png" alt="Yeoman" /></p>

<p>Premier outil présenté par Frédéric, <a href="http://yeoman.io/">Yeoman</a>. C'est un ensemble d'outils pouvant jouer le rôle de <em>scaffolder</em>, c'est-à-dire qu'il va nous créer en un rien de temps une structure spécifique pour un projet, tout en forçant certaines bonnes pratiques (définition d'un cycle de vie pour l'application, exécution des tests, etc.). Quelque part, il y a pas mal de similitudes avec Maven ici.</p>

<p>Frédéric démarre par générer une structure adaptée à une <em>webapp</em>, via un générateur dédié. Il existe plusieurs autres générateurs, pour faire de l'Angular, du Testacular (enfin Karma), du Backbone, etc. La similitude avec les Maven archetype est saisissante ici. Donc une simple commande <code>yo webapp</code> permet de tout générer.</p>

<p>Une fois ceci généré, nous pouvons constater la présence d'un fichier <em>gruntfile.js</em> qui est utilisé par <a href="http://gruntjs.com/">Grunt</a> pour réaliser un certain nombre de tâches ("compilation", tests, démarrage d'un serveur, etc.). Frédéric le compare là aussi à Maven ou Gradle. Dans les faits, je trouve plus que cela s'approche de Gradle et de son approche scriptée, mais bon. A en voir le contenu, cela est un peu cryptique dans un premier temps, mais Frédéric nous indique qu'il n'est guère nécessaire de s'y attarder. En effet, ça fonctionne, et c'est tout ce qu'on lui demande ! On pourra bien sûr décider de s'intéresser au contenu de ce fichier, si les besoins au sein du projet le nécessite.</p>

<h3>SASS</h3>

<p><img src="/images/sass-lang.png" alt="SASS" /></p>

<p><a href="http://sass-lang.com/">SASS</a>, à l'image de <a href="http://lesscss.org/">LESS</a> est une surcharge du langage CSS pour en offrir des améliorations. Parmi celles-ci, on notera surtout :</p>

<ul>
<li><code>@import</code> qui permet d'importer un autre fichier CSS, et donc de bien segmenter son code CSS.</li>
<li>La possibilité d'imbriquer les classes (le <em>nesting</em>), offrant ainsi une bien meilleure lisibilité de son code, tout en l'architecturant mieux.</li>
<li>Les variables, pratique pour éviter les redondances, et faciliter le refactoring.</li>
<li>Des fonctions arithmétiques simples (on pourra faire <code>$largeurPanneau + 10px</code> par exemple).</li>
<li>Des mixins, sortes de fonction permettant de regrouper sous un même bloc un code redondant.</li>
</ul>


<p>A noter qu'il existe un site, <a href="http://compass-style.org/">Compass</a> qui permet de disposer de nombreux mixins pour SASS.</p>

<h3>Bower</h3>

<p><a href="https://github.com/twitter/bower">Bower</a> est un module de gestion des dépendances, un peu à l'image de Maven. Le fichier <code>component.json</code>, que Frédéric avait généré via la commande <code>yo webapp</code>, est le descripteur des dépendances de notre projet web-app.
Il est possible d'exécuter quelques commandes avec <code>bower</code> :</p>

<ul>
<li><code>bower install</code> pour installer en local les dépendances définies pour le projet. A noter que contrairement à Maven qui utilise un <em>repository</em> commun à tous les projets, Bower copie localement, <strong>pour chaque projet</strong> la liste des dépendances. Un peu dommage !</li>
<li><code>bower search</code> recherche les dépendances présentes dans le <em>registry</em> Bower.</li>
<li><code>bower info XXX</code>  donne toutes les versions présentes pour la librairie spécifiée.</li>
</ul>


<p>Il est également possible d'enregistrer sa propre librairie dans le <em>registry</em> de Bower, via une commande (<code>bower register [mon package] [mon repo git]</code>). Attention, il ne semble pas y avoir beaucoup de contrôles, et la librairie est de suite visible à tout le monde !</p>

<p>Un point important, le <em>versioning</em> des dépendances hébergées sur Bower est assez strict, et respecte le <a href="http://semver.org/"><em>Semantic Versioning</em></a>. Pour faire simple, une version est généralement constituée de 3 chiffres (<code>x.y.z</code>), où nous avons la version majeure (<code>x</code>), la version mineure  (<code>y</code>) puis les bugfixes  (<code>z</code>). Cela nous permet d'obtenir une certaine flexibilité dans la définition des dépendances. Par exemple, si on définit une version <code>1.2.x</code>, cela signifie que l'on veut n'importe quelle version <code>1.2.*</code>, et que si une nouvelle version bugfixe apparait, alors Bower pourra l'utiliser directement.</p>

<h3>RequireJS</h3>

<p><img src="/images/requirejs.png" alt="Require.js" /></p>

<p>Frédéric parle maintenant de <a href="http://requirejs.org/">Require.js</a>, une librairie qui a l'avantage de pouvoir charger des fichiers JavaScript à la demande. On peut également y définir des dépendances (par exemple il faut la librairie <em>foo.js</em> puis <em>bar.js</em> avant d'exécuter mon code).</p>

<h3>Handlebars</h3>

<p><img src="/images/handlebars.png" alt="Handlebars" /></p>

<p>Il arrive fréquemment d'avoir besoin de recourir au <em>templating</em>, c'est-à-dire de placer de la donnée (généralement en format JSON) dans du code HTML (en particulier quand on doit itérer sur un ensemble d'éléments). Frédéric est parti pour utiliser <a href="http://handlebarsjs.com/">Handlebars</a>. Personnellement, j'ai plus l'habitude d'utiliser <a href="http://mustache.github.com/">Mustache.js</a>, mais les principes sont les mêmes.</p>

<h3>Backbone.js</h3>

<p><img src="/images/backbone.png" alt="Backbone.js" /></p>

<p>Pour de multiples raisons, on peut être amené à développer toute une partie de l'application côté client. Ainsi, au lieu de développer le coeur de l'application côté serveur et de n'envoyer que la partie graphique au client, nous y envoyons un framework JavaScript, ainsi que toute une application côté client : la partie modèle, la partie controlleur et la partie vue se retrouvent dès lors sur le navigateur. Frédéric opte pour <a href="http://backbonejs.org/">Backbone.js</a>, mais il existe aussi <a href="http://emberjs.com/">Ember.js</a>, ou le très à la mode <a href="http://angularjs.org/">Angular.js</a> de Google.
Un tel choix architectural n'est bien sûr pas à prendre à la légère, cela apporte certains avantages (rapidité, minimisation de l'utilisation de la bande passante, possibilité de faire fonctionner son application en mode déconnecté, etc.), mais il y a également des inconvénients, dont le principal à mon avis est la sécurité.</p>

<h3>Rivets.js</h3>

<p>Dernier choix de librairie de la session : <a href="http://rivetsjs.com/">Rivets.js</a> pour réaliser du <em>data-binding</em> bi-directionnel. Cela est nécessaire pour qu'une modification au niveau du modèle soit immédiatement répercutée côté DOM, et qu'une modification côté DOM soit répercutée côté modèle. Cette librairie s'intègre parfaitement à Backbone.js, mais aurait été tout à fait inutile avec Angular, car ce dernier intègre nativement cette fonctionnalité de <em>data-binding</em>.</p>

<p>Pour résumer, cette deuxième université a été très intéressante aussi, car elle a montré une <em>stack</em> complète d'outils et de librairies pour le développement efficace d'une application en JavaScript. Seul bémol, la partie tests qui n'a pas été abordée. Toutefois, Frédéric nous avait prévenu au début qu'il n'était pas à l'aise dans ce domaine. De plus, l'université du matin en avait fait son thème principal, et cela aurait été sans doute redondant. J'aurais quand même apprécié de savoir quelles librairies de tests s'adaptaient le mieux avec la <em>stack</em> choisie par Frédéric.</p>

<hr/>


<h2><a href="http://www.devoxx.com/display/FR13/3615+Cloud+Devoxx">3615 Cloud @ Devoxx</a></h2>

<p><img src="/images/devoxxfr-2013-minitel.jpg" alt="Le minitel, l'avenir de Maven ?" /></p>

<p>Voici une session complètement décalée. <a href="http://www.devoxx.com/display/FR13/Nicolas+Loof">Nicolas Loof</a> et <a href="http://www.devoxx.com/display/FR13/Laurent+Huet">Laurent Huet</a> nous proposent d'intéragir avec une instance CloudBees grâce à... un minitel ! Oui, le minitel des années 80. Et sans trucage, juste du bricolage.
Le montage est le suivant :</p>

<ul>
<li>Un bon vieux minitel sert de console : saisie des commandes et affichage (textuel bien entendu).</li>
<li>Ensuite, un assemblage électronique réalisé par Laurent pour le connecter avec un Raspberry Pi.</li>
<li>Un Raspberry Pi qui va s'occuper de la partie "intelligente" des opérations.</li>
<li>Un MacBook Pro (celui de Nicolas, dont l'écran a rendu l'âme la semaine d'avant, grâce à un geste malheureux d'un enfant) pour la connexion à Internet. C'est aussi le MBP qui affichera la vidéo d'une caméra qui filme l'écran du minitel (eh oui, difficile de brancher un cable de vidéoprojecteur sur un minitel).</li>
</ul>


<p>Durant la présentation, on nous explique le montage électronique, puis ils exécuteront les tâches suivantes :</p>

<ul>
<li>Afficher le status de quelques jobs sur CloudBees, puis interagir avec eux : stopper ou démarrer ces jobs.</li>
<li>Faire un <code>mvn package</code> ! (ils le lanceront en mode <code>offline</code> bien sûr :) ).</li>
<li>Faire un commit avec git.</li>
</ul>


<p>Bref, une session très agréable, bien que tout à fait inutile !</p>

<h2><a href="http://www.devoxx.com/display/FR13/Good+Bad+and+Ugly+Maven+-+a+puzzler+session">Good bad and ugly Maven - a puzzler session</a></h2>

<p><img src="/images/devoxxfr-2013-maven.jpg" alt="In Maven dependencies hell" /></p>

<p><a href="http://www.devoxx.com/display/FR13/Nicolas+Loof">Nicolas Loof</a> (encore lui), accompagné de son éternel ami <a href="http://www.devoxx.com/display/FR13/Arnaud+Heritier">Arnaud Héritier</a> nous ont proposé le jeu "<em>Qui veut gagner des millions</em>" mais à la sauce Maven. Au cours d'une série de 6 ou 7 questions, Nicolas présentait des situations plus ou moins compliquées avec Maven, souvent des problèmes de dépendances transitives avec des conflits de version. Arnaud, en bon candidat, devait donner la bonne réponse, avec parfois l'aide du public.</p>

<p>Dans une ambiance décontractée et sympathique, j'ai donc terminé la première journée de Devoxx, avant de me rendre au repas du soir des speakers.</p>

<h2>Conclusion</h2>

<p>Comme l'année dernière, la première journée a été très riche à Devoxx France. Celle-ci est généralement plus calme, car il y a moins de monde, les sessions sont plus longues, surtout quand on assiste à des universités. J'ai fait un choix très orienté sur JavaScript cette année, avec 6 heures de démo, de code et de tests. A vrai dire, le programme que j'avais initialement établi le matin était différent. Je comptais en effet aller d'abord suivre <a href="http://www.devoxx.com/display/FR13/Introduction+iOS6+pour+les+developpeurs+Java">l'introduction à iOS pour un développeur Java</a> puis le <a href="http://www.devoxx.com/display/FR13/AngularJS%2C+ou+le+futur+du+developpement+Web">développement sur AngularJS</a>, mais à ma grande déception il s'agissait d'universités et non de <em>Labs</em> (ou <em>Hands On</em>). Ne codant pas moi-même, je craignais de ne pas retenir grand chose pour iOS (je n'ai aucune connaissance dans ce langage), et je n'aurais sans doute pas appris grand chose de nouveau sur Angular.js, que j'ai déjà un peu manipulé.</p>

<p>Mon souhait pour Devoxx France 2014, ce serait que la conférence se déroule sur 4 jours :</p>

<ul>
<li>2 jours de Labs, <em>Hands On</em> et universités, mais avec une préférence pour les sessions on l'audience code;</li>
<li>2 jours de conférences.</li>
</ul>


<p>Sait-on jamais :)</p>
]]></content>
  </entry>
  
</feed>
